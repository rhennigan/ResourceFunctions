Notebook[{

Cell[CellGroupData[{
Cell[BoxData[{
 RowBox[{
  RowBox[{"Get", " ", "@", " ", 
   RowBox[{"FileNameJoin", " ", "@", " ", 
    RowBox[{"{", " ", 
     RowBox[{
      RowBox[{"NotebookDirectory", "[", " ", "]"}], ",", " ", 
      "\"\<Definition.wl\>\""}], " ", "}"}]}]}], ";"}], "\n", 
 RowBox[{"TestReport", " ", "@", " ", 
  RowBox[{"FileNameJoin", " ", "@", " ", 
   RowBox[{"{", " ", 
    RowBox[{
     RowBox[{"NotebookDirectory", "[", " ", "]"}], ",", " ", 
     "\"\<Tests.wlt\>\""}], " ", "}"}]}]}]}], "Code", "Excluded",
 CellLabel->"In[1]:=",ExpressionUUID->"31af359f-113f-4e34-aa9b-ef50ea5e931a"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["TestReportObject",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{
              InsetBox[
               BoxData[
                FormBox[
                 PaneBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "MUnitExpressions", "SuccessIcon"]], Alignment -> Center, 
                  ImageSize -> 
                  Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], TraditionalForm]]]}, 
             PlotRange -> {{0, 1}, {0, 1}}, Background -> GrayLevel[0.93], 
             Axes -> False, AspectRatio -> 1, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Thickness[Tiny], 
               GrayLevel[0.55]]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Title: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Test Report: Tests.wlt\"", "SummaryItem"]}], 
               "\[SpanFromLeft]"}, {
               RowBox[{
                 TagBox["\"Success rate: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   InterpretationBox[
                    StyleBox["\"100%\"", ShowStringCharacters -> False], 1., 
                    AutoDelete -> True], PercentForm], "SummaryItem"]}], 
               RowBox[{
                 TagBox["\"Tests run: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["14", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{
              InsetBox[
               BoxData[
                FormBox[
                 PaneBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "MUnitExpressions", "SuccessIcon"]], Alignment -> Center, 
                  ImageSize -> 
                  Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], TraditionalForm]]]}, 
             PlotRange -> {{0, 1}, {0, 1}}, Background -> GrayLevel[0.93], 
             Axes -> False, AspectRatio -> 1, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Thickness[Tiny], 
               GrayLevel[0.55]]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Title: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Test Report: Tests.wlt\"", "SummaryItem"]}], 
               "\[SpanFromLeft]"}, {
               RowBox[{
                 TagBox["\"Success rate: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   InterpretationBox[
                    StyleBox["\"100%\"", ShowStringCharacters -> False], 1., 
                    AutoDelete -> True], PercentForm], "SummaryItem"]}], 
               RowBox[{
                 TagBox["\"Tests run: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["14", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Succeeded: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["14", "SummaryItem"]}], "\[SpanFromLeft]"}, {
               RowBox[{
                 TagBox["\"Failed: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["0", "SummaryItem"]}], "\[SpanFromLeft]"}, {
               RowBox[{
                 TagBox[
                 "\"Failed with wrong results: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["0", "SummaryItem"]}], "\[SpanFromLeft]"}, {
               RowBox[{
                 TagBox[
                 "\"Failed with messages: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["0", "SummaryItem"]}], "\[SpanFromLeft]"}, {
               RowBox[{
                 TagBox["\"Failed with errors: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["0", "SummaryItem"]}], "\[SpanFromLeft]"}, {
               RowBox[{
                 TagBox["\"Time elapsed: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{
                   "0.0330045`", "\"s\"", "seconds", "\"Seconds\""}, 
                   "Quantity", SyntaxForm -> Mod], "SummaryItem"]}], 
               "\[SpanFromLeft]"}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  TestReportObject[<|
   "Title" -> "Test Report: Tests.wlt", "Aborted" -> False, 
    "TestResults" -> <|
     8099494989339435425 -> 
      TestResultObject[<|
        "TestKey" -> 8099494989339435425, "TestID" -> None, "TestFileName" -> 
         "H:\\Documents\\ResourceFunctions\\Definitions\\ReadableForm\\Tests.\
wlt", "SameTest" -> SameQ, "SameMessages" -> Testing`MessageMatchQ, 
         "MemoryConstraint" -> DirectedInfinity[1], "TimeConstraint" -> 
         DirectedInfinity[1], "Outcome" -> "Success", "Input" -> 
         HoldForm[
          ClearAll[$CellContext`verifyExpr]; 
           Attributes[$CellContext`verifyExpr] = {
             HoldAllComplete}; $CellContext`verifyExpr[
              Pattern[$CellContext`expr, 
               Blank[]], 
              Pattern[$CellContext`opts, 
               BlankNullSequence[]]] := 
            Module[{$CellContext`string, $CellContext`readable}, \
$CellContext`string = ToString[
                 HoldComplete[$CellContext`expr], 
                 InputForm]; $CellContext`readable = ToString[
                 $CellContext`ReadableForm[
                  HoldComplete[$CellContext`expr], $CellContext`opts]]; 
              ToExpression[$CellContext`string, InputForm, HoldComplete] === 
               ToExpression[$CellContext`readable, InputForm, HoldComplete]]],
          "ExpectedOutput" -> HoldForm[Null], "ActualOutput" -> 
         HoldForm[Null], "ExpectedMessages" -> HoldForm[{}], 
         "ActualMessages" -> {}, "AbsoluteTime" -> 3.860069362010667*^9, 
         "AbsoluteTimeUsed" -> 0``7.1505149978319915, "CPUTimeUsed" -> 0., 
         "MemoryUsed" -> 3232|>], 3436348926375274196 -> 
      TestResultObject[<|
        "TestKey" -> 3436348926375274196, "TestID" -> None, "TestFileName" -> 
         "H:\\Documents\\ResourceFunctions\\Definitions\\ReadableForm\\Tests.\
wlt", "SameTest" -> SameQ, "SameMessages" -> Testing`MessageMatchQ, 
         "MemoryConstraint" -> DirectedInfinity[1], "TimeConstraint" -> 
         DirectedInfinity[1], "Outcome" -> "Success", "Input" -> HoldForm[
           $CellContext`verifyExpr[
            Hold[$CellContext`a (-1), -$CellContext`a]]], "ExpectedOutput" -> 
         HoldForm[True], "ActualOutput" -> HoldForm[True], "ExpectedMessages" -> 
         HoldForm[{}], "ActualMessages" -> {}, "AbsoluteTime" -> 
         3.8600693620126667`*^9, "AbsoluteTimeUsed" -> 
         0.0010005`4.15073209080422, "CPUTimeUsed" -> 0., "MemoryUsed" -> 
         7328|>], 8600553487104553966 -> 
      TestResultObject[<|
        "TestKey" -> 8600553487104553966, "TestID" -> None, "TestFileName" -> 
         "H:\\Documents\\ResourceFunctions\\Definitions\\ReadableForm\\Tests.\
wlt", "SameTest" -> SameQ, "SameMessages" -> Testing`MessageMatchQ, 
         "MemoryConstraint" -> DirectedInfinity[1], "TimeConstraint" -> 
         DirectedInfinity[1], "Outcome" -> "Success", "Input" -> HoldForm[
           $CellContext`verifyExpr[<|
            "Context" -> ($Context = $CellContext`ctx), 
             "ContextPath" -> ($ContextPath = $CellContext`cp)|>]], 
         "ExpectedOutput" -> HoldForm[True], "ActualOutput" -> HoldForm[True],
          "ExpectedMessages" -> HoldForm[{}], "ActualMessages" -> {}, 
         "AbsoluteTime" -> 3.8600693620136676`*^9, "AbsoluteTimeUsed" -> 
         0.0019997`4.451479844437383, "CPUTimeUsed" -> 0., "MemoryUsed" -> 
         14888|>], 683623045387704558 -> 
      TestResultObject[<|
        "TestKey" -> 683623045387704558, "TestID" -> None, "TestFileName" -> 
         "H:\\Documents\\ResourceFunctions\\Definitions\\ReadableForm\\Tests.\
wlt", "SameTest" -> SameQ, "SameMessages" -> Testing`MessageMatchQ, 
         "MemoryConstraint" -> DirectedInfinity[1], "TimeConstraint" -> 
         DirectedInfinity[1], "Outcome" -> "Success", "Input" -> HoldForm[
           $CellContext`verifyExpr[
            
            Hold[$CellContext`a - 
             Plus[-$CellContext`f[$CellContext`b + 1]]]]], "ExpectedOutput" -> 
         HoldForm[True], "ActualOutput" -> HoldForm[True], "ExpectedMessages" -> 
         HoldForm[{}], "ActualMessages" -> {}, "AbsoluteTime" -> 
         3.860069362015667*^9, "AbsoluteTimeUsed" -> 
         0.0019997`4.451479844437386, "CPUTimeUsed" -> 0., "MemoryUsed" -> 
         9840|>], 3146026519135052475 -> 
      TestResultObject[<|
        "TestKey" -> 3146026519135052475, "TestID" -> None, "TestFileName" -> 
         "H:\\Documents\\ResourceFunctions\\Definitions\\ReadableForm\\Tests.\
wlt", "SameTest" -> SameQ, "SameMessages" -> Testing`MessageMatchQ, 
         "MemoryConstraint" -> DirectedInfinity[1], "TimeConstraint" -> 
         DirectedInfinity[1], "Outcome" -> "Success", "Input" -> HoldForm[
           $CellContext`verifyExpr[# (-1)& ]], "ExpectedOutput" -> 
         HoldForm[True], "ActualOutput" -> HoldForm[True], "ExpectedMessages" -> 
         HoldForm[{}], "ActualMessages" -> {}, "AbsoluteTime" -> 
         3.860069362017667*^9, "AbsoluteTimeUsed" -> 
         0.0010004`4.150688680890457, "CPUTimeUsed" -> 0., "MemoryUsed" -> 
         4048|>], 7473579219796209799 -> 
      TestResultObject[<|
        "TestKey" -> 7473579219796209799, "TestID" -> None, "TestFileName" -> 
         "H:\\Documents\\ResourceFunctions\\Definitions\\ReadableForm\\Tests.\
wlt", "SameTest" -> SameQ, "SameMessages" -> Testing`MessageMatchQ, 
         "MemoryConstraint" -> DirectedInfinity[1], "TimeConstraint" -> 
         DirectedInfinity[1], "Outcome" -> "Success", "Input" -> HoldForm[
           $CellContext`verifyExpr[
            HoldComplete[<|
              Apply[Rule, 
               Tally[
                Part[
                 Part[$CellContext`preformated, All, 4], All, 2]], {1}]|>], 
            PageWidth -> 65, "DynamicAlignment" -> True, "StrictMode" -> 
            True]], "ExpectedOutput" -> HoldForm[True], "ActualOutput" -> 
         HoldForm[True], "ExpectedMessages" -> HoldForm[{}], 
         "ActualMessages" -> {}, "AbsoluteTime" -> 3.860069362018667*^9, 
         "AbsoluteTimeUsed" -> 0.0220008`5.4929534708936805, "CPUTimeUsed" -> 
         0.01499999999999968, "MemoryUsed" -> 11632|>], 1255835377573042876 -> 
      TestResultObject[<|
        "TestKey" -> 1255835377573042876, "TestID" -> None, "TestFileName" -> 
         "H:\\Documents\\ResourceFunctions\\Definitions\\ReadableForm\\Tests.\
wlt", "SameTest" -> SameQ, "SameMessages" -> Testing`MessageMatchQ, 
         "MemoryConstraint" -> DirectedInfinity[1], "TimeConstraint" -> 
         DirectedInfinity[1], "Outcome" -> "Success", "Input" -> HoldForm[
           $CellContext`verifyExpr[
            Apply[Set, $CellContext`x, {1}]]], "ExpectedOutput" -> 
         HoldForm[True], "ActualOutput" -> HoldForm[True], "ExpectedMessages" -> 
         HoldForm[{}], "ActualMessages" -> {}, "AbsoluteTime" -> 
         3.8600693620416665`*^9, "AbsoluteTimeUsed" -> 0``7.1505149978319915, 
         "CPUTimeUsed" -> 0., "MemoryUsed" -> 3816|>], 2447198465936500857 -> 
      TestResultObject[<|
        "TestKey" -> 2447198465936500857, "TestID" -> None, "TestFileName" -> 
         "H:\\Documents\\ResourceFunctions\\Definitions\\ReadableForm\\Tests.\
wlt", "SameTest" -> SameQ, "SameMessages" -> Testing`MessageMatchQ, 
         "MemoryConstraint" -> DirectedInfinity[1], "TimeConstraint" -> 
         DirectedInfinity[1], "Outcome" -> "Success", "Input" -> HoldForm[
           $CellContext`verifyExpr[
            MapApply[Set, $CellContext`x]]], "ExpectedOutput" -> 
         HoldForm[True], "ActualOutput" -> HoldForm[True], "ExpectedMessages" -> 
         HoldForm[{}], "ActualMessages" -> {}, "AbsoluteTime" -> 
         3.8600693620416665`*^9, "AbsoluteTimeUsed" -> 
         0.0010002`4.150601848043641, "CPUTimeUsed" -> 0., "MemoryUsed" -> 
         3256|>], 5526834081489205195 -> 
      TestResultObject[<|
        "TestKey" -> 5526834081489205195, "TestID" -> None, "TestFileName" -> 
         "H:\\Documents\\ResourceFunctions\\Definitions\\ReadableForm\\Tests.\
wlt", "SameTest" -> SameQ, "SameMessages" -> Testing`MessageMatchQ, 
         "MemoryConstraint" -> DirectedInfinity[1], "TimeConstraint" -> 
         DirectedInfinity[1], "Outcome" -> "Success", "Input" -> HoldForm[
           $CellContext`verifyExpr[<|"a" -> 1, "b" -> 2, "a" -> 3|>]], 
         "ExpectedOutput" -> HoldForm[True], "ActualOutput" -> HoldForm[True],
          "ExpectedMessages" -> HoldForm[{}], "ActualMessages" -> {}, 
         "AbsoluteTime" -> 3.860069362042667*^9, "AbsoluteTimeUsed" -> 
         0``7.1505149978319915, "CPUTimeUsed" -> 0., "MemoryUsed" -> 5688|>], 
      6833765711193996632 -> 
      TestResultObject[<|
        "TestKey" -> 6833765711193996632, "TestID" -> None, "TestFileName" -> 
         "H:\\Documents\\ResourceFunctions\\Definitions\\ReadableForm\\Tests.\
wlt", "SameTest" -> SameQ, "SameMessages" -> Testing`MessageMatchQ, 
         "MemoryConstraint" -> DirectedInfinity[1], "TimeConstraint" -> 
         DirectedInfinity[1], "Outcome" -> "Success", "Input" -> HoldForm[
           ToString[
            $CellContext`ReadableForm[
             
             Unevaluated[\[FormalA] - (\[FormalB] + \[FormalC]) - \[FormalD] + \
\[FormalE]], "DynamicAlignment" -> True, PageWidth -> 30]]], "ExpectedOutput" -> 
         HoldForm[
          "\[FormalA] - (\[FormalB] + \[FormalC]) - \[FormalD] + \[FormalE]"],
          "ActualOutput" -> 
         HoldForm[
          "\[FormalA] - (\[FormalB] + \[FormalC]) - \[FormalD] + \[FormalE]"],
          "ExpectedMessages" -> HoldForm[{}], "ActualMessages" -> {}, 
         "AbsoluteTime" -> 3.860069362043667*^9, "AbsoluteTimeUsed" -> 
         0``7.150514997831988, "CPUTimeUsed" -> 0., "MemoryUsed" -> 6376|>], 
      7566560423650155888 -> 
      TestResultObject[<|
        "TestKey" -> 7566560423650155888, "TestID" -> None, "TestFileName" -> 
         "H:\\Documents\\ResourceFunctions\\Definitions\\ReadableForm\\Tests.\
wlt", "SameTest" -> SameQ, "SameMessages" -> Testing`MessageMatchQ, 
         "MemoryConstraint" -> DirectedInfinity[1], "TimeConstraint" -> 
         DirectedInfinity[1], "Outcome" -> "Success", "Input" -> HoldForm[
           ToString[
            $CellContext`ReadableForm[
             Hold[<|$CellContext`stuff|>]]]], "ExpectedOutput" -> 
         HoldForm["Hold @ Association @ stuff"], "ActualOutput" -> 
         HoldForm["Hold @ Association @ stuff"], "ExpectedMessages" -> 
         HoldForm[{}], "ActualMessages" -> {}, "AbsoluteTime" -> 
         3.860069362043667*^9, "AbsoluteTimeUsed" -> 0.001`4.15051499783199, 
         "CPUTimeUsed" -> 0., "MemoryUsed" -> 3440|>], 6368031333677500021 -> 
      TestResultObject[<|
        "TestKey" -> 6368031333677500021, "TestID" -> None, "TestFileName" -> 
         "H:\\Documents\\ResourceFunctions\\Definitions\\ReadableForm\\Tests.\
wlt", "SameTest" -> SameQ, "SameMessages" -> Testing`MessageMatchQ, 
         "MemoryConstraint" -> DirectedInfinity[1], "TimeConstraint" -> 
         DirectedInfinity[1], "Outcome" -> "Success", "Input" -> HoldForm[
           ToString[
            $CellContext`ReadableForm[
             Hold[Now - Quantity[12, "Hours"]]]]], "ExpectedOutput" -> 
         HoldForm["Hold[ Now - Quantity[ 12, \"Hours\" ] ]"], "ActualOutput" -> 
         HoldForm["Hold[ Now - Quantity[ 12, \"Hours\" ] ]"], 
         "ExpectedMessages" -> HoldForm[{}], "ActualMessages" -> {}, 
         "AbsoluteTime" -> 3.860069362044667*^9, "AbsoluteTimeUsed" -> 
         0.0010001`4.150558425108854, "CPUTimeUsed" -> 0., "MemoryUsed" -> 
         6312|>], 5991068802064045840 -> 
      TestResultObject[<|
        "TestKey" -> 5991068802064045840, "TestID" -> None, "TestFileName" -> 
         "H:\\Documents\\ResourceFunctions\\Definitions\\ReadableForm\\Tests.\
wlt", "SameTest" -> SameQ, "SameMessages" -> Testing`MessageMatchQ, 
         "MemoryConstraint" -> DirectedInfinity[1], "TimeConstraint" -> 
         DirectedInfinity[1], "Outcome" -> "Success", "Input" -> HoldForm[
           ToString[
            $CellContext`ReadableForm[
             Hold[
              Part[$CellContext`x, 1, 
               Span[2, 3, 4]]]]]], "ExpectedOutput" -> 
         HoldForm["Hold @ x[[ 1, 2;;3;;4 ]]"], "ActualOutput" -> 
         HoldForm["Hold @ x[[ 1, 2;;3;;4 ]]"], "ExpectedMessages" -> 
         HoldForm[{}], "ActualMessages" -> {}, "AbsoluteTime" -> 
         3.8600693620456667`*^9, "AbsoluteTimeUsed" -> 0``7.1505149978319915, 
         "CPUTimeUsed" -> 0., "MemoryUsed" -> 2896|>], 6692026486211622721 -> 
      TestResultObject[<|
        "TestKey" -> 6692026486211622721, "TestID" -> None, "TestFileName" -> 
         "H:\\Documents\\ResourceFunctions\\Definitions\\ReadableForm\\Tests.\
wlt", "SameTest" -> SameQ, "SameMessages" -> Testing`MessageMatchQ, 
         "MemoryConstraint" -> DirectedInfinity[1], "TimeConstraint" -> 
         DirectedInfinity[1], "Outcome" -> "Success", "Input" -> HoldForm[
           ToString[
            $CellContext`ReadableForm[
             
             Unevaluated[$CellContext`$checkPropertyOptions = <|
                "DefinitionNotebook" -> {
                  "IgnoredProperties" -> {
                    "DefinitionNotebook", "FileManagerData", "PacletFiles", 
                    "PacletObject"}}, 
                 "Documentation" -> {
                  "ScrapedProperties" -> {"Documentation"}}, 
                 "PacletFiles" -> {
                  "ScrapedProperties" -> {
                    "PacletFiles", "PacletObject", "Name", "Description", 
                    "ContributorInformation"}}|>; Null]]]], "ExpectedOutput" -> 
         HoldForm[
          "$checkPropertyOptions = <|\n    \"DefinitionNotebook\" -> {\n      \
  \"IgnoredProperties\" -> {\n            \"DefinitionNotebook\",\n           \
 \"FileManagerData\",\n            \"PacletFiles\",\n            \
\"PacletObject\"\n        }\n    },\n    \"Documentation\" -> { \
\"ScrapedProperties\" -> { \"Documentation\" } },\n    \"PacletFiles\" -> {\n \
       \"ScrapedProperties\" -> {\n            \"PacletFiles\",\n            \
\"PacletObject\",\n            \"Name\",\n            \"Description\",\n      \
      \"ContributorInformation\"\n        }\n    }\n|>;"], "ActualOutput" -> 
         HoldForm[
          "$checkPropertyOptions = <|\n    \"DefinitionNotebook\" -> {\n      \
  \"IgnoredProperties\" -> {\n            \"DefinitionNotebook\",\n           \
 \"FileManagerData\",\n            \"PacletFiles\",\n            \
\"PacletObject\"\n        }\n    },\n    \"Documentation\" -> { \
\"ScrapedProperties\" -> { \"Documentation\" } },\n    \"PacletFiles\" -> {\n \
       \"ScrapedProperties\" -> {\n            \"PacletFiles\",\n            \
\"PacletObject\",\n            \"Name\",\n            \"Description\",\n      \
      \"ContributorInformation\"\n        }\n    }\n|>;"], "ExpectedMessages" -> 
         HoldForm[{}], "ActualMessages" -> {}, "AbsoluteTime" -> 
         3.8600693620456667`*^9, "AbsoluteTimeUsed" -> 
         0.0020031`4.452217628785136, "CPUTimeUsed" -> 0., "MemoryUsed" -> 
         18224|>]|>, 
    "TestsSucceededKeys" -> {8099494989339435425, 3436348926375274196, 
     8600553487104553966, 683623045387704558, 3146026519135052475, 
     7473579219796209799, 1255835377573042876, 2447198465936500857, 
     5526834081489205195, 6833765711193996632, 7566560423650155888, 
     6368031333677500021, 5991068802064045840, 6692026486211622721}, 
    "TestsFailedWrongResultsKeys" -> {}, "TestsFailedWithMessagesKeys" -> {}, 
    "TestsFailedWithErrorsKeys" -> {}|>],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output", "Excluded",
 CellChangeTimes->{3.8600636524776316`*^9, 3.8600637241275*^9, 
  3.8600639485478177`*^9, 3.860069127320861*^9, 3.8600693620806675`*^9},
 CellLabel->"Out[2]=",ExpressionUUID->"12e47623-5c3c-4354-bb71-86f5e15afe04"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Basic Examples", "Subsection",
 TaggingRules->{},
 CellLabel->"In[3]:=",
 CellID->93685765,ExpressionUUID->"87b64a67-5ee8-4e6b-9dd7-50684a0d7c04"],

Cell["View the code underlying a formatted expression:", "Text",
 TaggingRules->{},
 CellChangeTimes->{{3.7434483297504663`*^9, 3.743448345734988*^9}},
 CellID->40267931,ExpressionUUID->"b0519da0-84fd-45b4-8962-66bb7db88123"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  GraphicsBox[
   {RGBColor[0, 1, 0], Thickness[Large], RectangleBox[{0, -1}, {2, 1}], 
    {RGBColor[1, 0, 0], DiskBox[{0, 0}]}, 
    {RGBColor[0, 0, 1], CircleBox[{2, 0}]}, 
    {RGBColor[1, 1, 0], PolygonBox[{{2, 0}, {4, 1}, {4, -1}}]}, 
    {RGBColor[0.5, 0, 0.5], Arrowheads[Large], 
     ArrowBox[NCache[{{4, Rational[3, 2]}, {0, Rational[3, 2]}, {0, 0}}, {{
        4, 1.5}, {0, 1.5}, {0, 0}}]], 
     {GrayLevel[0], Dashing[{Small, Small}], LineBox[{{-1, 0}, {4, 0}}]}}}], "//",
   "ReadableForm"}]], "Input",
 TaggingRules->{},
 CellLabel->"In[1]:=",
 CellID->256378378,ExpressionUUID->"82b710fb-0448-4a82-9279-1dd9a255512b"],

Cell[BoxData[
 StyleBox[
  RowBox[{"Graphics", " ", "@", " ", 
   RowBox[{"{", "\n", "    ", 
    RowBox[{
     RowBox[{"RGBColor", "[", " ", 
      RowBox[{"0", ",", " ", "1", ",", " ", "0"}], " ", "]"}], ",", "\n", 
     "    ", 
     RowBox[{"Thickness", " ", "@", " ", "Large"}], ",", "\n", "    ", 
     RowBox[{"Rectangle", "[", " ", 
      RowBox[{
       RowBox[{"{", " ", 
        RowBox[{"0", ",", " ", 
         RowBox[{"-", "1"}]}], " ", "}"}], ",", " ", 
       RowBox[{"{", " ", 
        RowBox[{"2", ",", " ", "1"}], " ", "}"}]}], " ", "]"}], ",", "\n", 
     "    ", 
     RowBox[{"{", " ", 
      RowBox[{
       RowBox[{"RGBColor", "[", " ", 
        RowBox[{"1", ",", " ", "0", ",", " ", "0"}], " ", "]"}], ",", " ", 
       RowBox[{"Disk", " ", "@", " ", 
        RowBox[{"{", " ", 
         RowBox[{"0", ",", " ", "0"}], " ", "}"}]}]}], " ", "}"}], ",", "\n", 
     "    ", 
     RowBox[{"{", " ", 
      RowBox[{
       RowBox[{"RGBColor", "[", " ", 
        RowBox[{"0", ",", " ", "0", ",", " ", "1"}], " ", "]"}], ",", " ", 
       RowBox[{"Circle", " ", "@", " ", 
        RowBox[{"{", " ", 
         RowBox[{"2", ",", " ", "0"}], " ", "}"}]}]}], " ", "}"}], ",", "\n", 
     "    ", 
     RowBox[{"{", " ", 
      RowBox[{
       RowBox[{"RGBColor", "[", " ", 
        RowBox[{"1", ",", " ", "1", ",", " ", "0"}], " ", "]"}], ",", " ", 
       RowBox[{"Polygon", " ", "@", " ", 
        RowBox[{"{", " ", 
         RowBox[{
          RowBox[{"{", " ", 
           RowBox[{"2", ",", " ", "0"}], " ", "}"}], ",", " ", 
          RowBox[{"{", " ", 
           RowBox[{"4", ",", " ", "1"}], " ", "}"}], ",", " ", 
          RowBox[{"{", " ", 
           RowBox[{"4", ",", " ", 
            RowBox[{"-", "1"}]}], " ", "}"}]}], " ", "}"}]}]}], " ", "}"}], 
     ",", "\n", "    ", 
     RowBox[{"{", "\n", "        ", 
      RowBox[{
       RowBox[{"RGBColor", "[", " ", 
        RowBox[{"0.5", ",", " ", "0", ",", " ", "0.5"}], " ", "]"}], ",", 
       "\n", "        ", 
       RowBox[{"Arrowheads", " ", "@", " ", "Large"}], ",", "\n", "        ", 
       RowBox[{"Arrow", " ", "@", " ", 
        RowBox[{"{", " ", 
         RowBox[{
          RowBox[{"{", " ", 
           RowBox[{"4", ",", " ", 
            RowBox[{"3", " ", "/", " ", "2"}]}], " ", "}"}], ",", " ", 
          RowBox[{"{", " ", 
           RowBox[{"0", ",", " ", 
            RowBox[{"3", " ", "/", " ", "2"}]}], " ", "}"}], ",", " ", 
          RowBox[{"{", " ", 
           RowBox[{"0", ",", " ", "0"}], " ", "}"}]}], " ", "}"}]}], ",", 
       "\n", "        ", 
       RowBox[{"{", " ", 
        RowBox[{
         RowBox[{"GrayLevel", "[", " ", "0", " ", "]"}], ",", " ", 
         RowBox[{"Dashing", " ", "@", " ", 
          RowBox[{"{", " ", 
           RowBox[{"Small", ",", " ", "Small"}], " ", "}"}]}], ",", " ", 
         RowBox[{"Line", " ", "@", " ", 
          RowBox[{"{", " ", 
           RowBox[{
            RowBox[{"{", " ", 
             RowBox[{
              RowBox[{"-", "1"}], ",", " ", "0"}], " ", "}"}], ",", " ", 
            RowBox[{"{", " ", 
             RowBox[{"4", ",", " ", "0"}], " ", "}"}]}], " ", "}"}]}]}], " ", 
        "}"}]}], "\n", "    ", "}"}]}], "\n", "}"}]}], "Input",
  StripOnInput->True,
  ShowAutoStyles->True,
  ShowStringCharacters->True]], "Output",
 TaggingRules->{},
 CellChangeTimes->{{3.7483682371526766`*^9, 3.748368254115199*^9}, 
   3.748369987642457*^9, 3.8275303003573866`*^9, 3.827702321534074*^9, 
   3.8277028033492527`*^9, 3.827703144327124*^9, 3.827703698113674*^9, 
   3.8278353584536324`*^9, 3.8278355180389338`*^9, 3.860063266953888*^9},
 CellLabel->"Out[1]=",ExpressionUUID->"a72e708e-3e15-442d-82c2-c74318baed42"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 InterpretationBox[Cell[
  "\t", "ExampleDelimiter",ExpressionUUID->
   "bbd99bef-2460-40f7-b8ec-41c0495b8b51"],
  $Line = 0; Null]], "ExampleDelimiter",
 TaggingRules->{},
 CellID->628664695,ExpressionUUID->"c458d374-0f9a-4654-a210-33fbea8be603"],

Cell["Visually inspect properties of formatted objects:", "Text",
 TaggingRules->{},
 CellChangeTimes->{{3.7434483709192514`*^9, 3.7434483883757133`*^9}},
 CellID->319496880,ExpressionUUID->"e28f7a46-4628-4e43-b842-8261408e6373"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  InterpretationBox[
   RowBox[{
    TagBox["ResourceObject",
     "SummaryHead"], "[", 
    DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
     TemplateBox[{
       PaneSelectorBox[{False -> GridBox[{{
             PaneBox[
              ButtonBox[
               DynamicBox[
                FEPrivate`FrontEndResource[
                "FEBitmaps", "SquarePlusIconMedium"]], 
               ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
               Evaluator -> Automatic, Method -> "Preemptive"], 
              Alignment -> {Center, Center}, ImageSize -> 
              Dynamic[{
                Automatic, 
                 3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                  Magnification])}]], 
             GraphicsBox[
              RasterBox[CompressedData["
1:eJztm+tvlFkdx4m+8aX/gv+FviKaaNyob9jV7KtNWGXXjREjGIkvNllIuaZI
u0ADtNDLcGkRgYa2Kb3QNr2lF0rTexlIt4MDNFDIlmKZFDN+mF96PDm3Pk9n
3Mq635TJzDxnzjnf3/13nofvffiHbR99a8uWLbu/w8u27Xt+uGvX9r+8+10+
/HLn7k8+3rnjN+/s/NOOj3fs+v6H3+bLn/DvHf69eZ/9BoXAcuZpX6qifnpP
c7Lodrp29V+Zzd5RYZBc7Dox8OOjvT9Qf5Uj7y8s393sfeUL9GXwUuzedt11
z5fZvORvYqFhs3eXF/4+9Ucftbb7RzZ7dxvHyspKYuATH7WOuZLN3mBsPHny
pL+/v6qq6tChQ2dv7v4aGOSDBw+am5tP5MCbubm5bC6MlPY4wkhJ+896+7u/
mo0tLS2lc4j1K0xufHz8+vXrKKiiogJloTJ1dXV19cqVK0091X/t+pHO69it
n36xMA798+fPv3jxotBU/oPnz5+zt9NrqKysnJmZWfcnsGBjMGLzd+7cgaMx
hm8YAPE3A8YGRx9dJW7gX9jhzN0pLjEmmUyeOnWK1/8Gr0wmk0gkTltgt/Zg
TK6trQ17KykpQeaBLaELfA2bFGr2gIaGhqGhIRkJTaZFxQXkBfr6+mxeAOt6
+fJlNmdUYnLFxcV82d3drZucE+iUkY8ePWLbKMVpckzLJTUV0/KTdWeOBUTq
pAZaW1uRZ1FRkZhcRKeAEXuGnUyOWHwjsQE0q5QlPxRVFgTIykft0qVLcb2A
8exW/M5nijo6clAfoYmhIk/bczcAPYAYmJ2djTUVmq2trZVdBUzRALJFffo3
yAd3zj+2TE5O+nzt6NGjEZ0LEDCRkrKusCnqwHQhYsSQQsWWpqYmm9rly5eZ
Vg+JmIpPkowhYKqPUUxRB+pGLPb3BYktTC7xhERw8+bNmpoaXpV1ZXOyxcH1
qKIusSv2oKaKboo6WGt6etr+vuCxhY2hKWxVxQQFlQtI1uXl5QzTeWXjmKKx
YiBNYDC6nLM5USP8ixcvUmDcuHEjlUpFX0uMRI/kBliorKyMFfUM7jPFuWf9
lyd+R09aPrytfnrP4j+/sMfwcylRnECnLCR1KUTswE6Cjs6OhVgOXrCDo35J
JWX1kTBSXV29b98+yEJQl3BfqsKojUv7t04/abVXVCWKE1LhtLS0OMsnEF13
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
Nyy1wU8=
               "], {{0, 0}, {73, 70}}, {0, 255}, ColorFunction -> RGBColor], 
              AspectRatio -> 1, Axes -> False, Background -> None, Frame -> 
              None, FrameTicks -> None, ImageSize -> 
              Dynamic[{
                Automatic, 
                 3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                  Magnification])}, ImageSizeCache -> {45., {0., 9.}}]], 
             GridBox[{{
                RowBox[{
                  TagBox["\"Name: \"", "SummaryItemAnnotation"], 
                  "\[InvisibleSpace]", 
                  TagBox[
                   TemplateBox[{"\"LeNet Trained on MNIST Data\"", "\" \"", 
                    
                    TemplateBox[{
                    "\"\[RightGuillemet]\"", 
                    "https://resources.wolframcloud.com/NeuralNetRepository/\
resources/LeNet-Trained-on-MNIST-Data"}, "HyperlinkURL"]}, "RowDefault"], 
                   "SummaryItem"]}], 
                TagBox["\"\"", "SummaryItem"]}, {
                RowBox[{
                  TagBox["\"Type: \"", "SummaryItemAnnotation"], 
                  "\[InvisibleSpace]", 
                  TagBox["\"NeuralNet\"", "SummaryItem"]}], 
                "\[SpanFromLeft]"}, {
                RowBox[{
                  TagBox["\"Description: \"", "SummaryItemAnnotation"], 
                  "\[InvisibleSpace]", 
                  TagBox[
                  "\"Identify the handwritten digit in an image\"", 
                   "SummaryItem"]}], "\[SpanFromLeft]"}}, 
              GridBoxAlignment -> {
               "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
              False, GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              GridBoxSpacings -> {
               "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
              BaseStyle -> {
               ShowStringCharacters -> False, NumberMarks -> False, 
                PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
           GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
           BaselinePosition -> {1, 1}], True -> GridBox[{{
             PaneBox[
              ButtonBox[
               DynamicBox[
                FEPrivate`FrontEndResource[
                "FEBitmaps", "SquareMinusIconMedium"]], 
               ButtonFunction :> (Typeset`open$$ = False), Appearance -> None,
                Evaluator -> Automatic, Method -> "Preemptive"], 
              Alignment -> {Center, Center}, ImageSize -> 
              Dynamic[{
                Automatic, 
                 3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                  Magnification])}]], 
             GraphicsBox[
              RasterBox[CompressedData["
1:eJztm+tvlFkdx4m+8aX/gv+FviKaaNyob9jV7KtNWGXXjREjGIkvNllIuaZI
u0ADtNDLcGkRgYa2Kb3QNr2lF0rTexlIt4MDNFDIlmKZFDN+mF96PDm3Pk9n
3Mq635TJzDxnzjnf3/13nofvffiHbR99a8uWLbu/w8u27Xt+uGvX9r+8+10+
/HLn7k8+3rnjN+/s/NOOj3fs+v6H3+bLn/DvHf69eZ/9BoXAcuZpX6qifnpP
c7Lodrp29V+Zzd5RYZBc7Dox8OOjvT9Qf5Uj7y8s393sfeUL9GXwUuzedt11
z5fZvORvYqFhs3eXF/4+9Ucftbb7RzZ7dxvHyspKYuATH7WOuZLN3mBsPHny
pL+/v6qq6tChQ2dv7v4aGOSDBw+am5tP5MCbubm5bC6MlPY4wkhJ+896+7u/
mo0tLS2lc4j1K0xufHz8+vXrKKiiogJloTJ1dXV19cqVK0091X/t+pHO69it
n36xMA798+fPv3jxotBU/oPnz5+zt9NrqKysnJmZWfcnsGBjMGLzd+7cgaMx
hm8YAPE3A8YGRx9dJW7gX9jhzN0pLjEmmUyeOnWK1/8Gr0wmk0gkTltgt/Zg
TK6trQ17KykpQeaBLaELfA2bFGr2gIaGhqGhIRkJTaZFxQXkBfr6+mxeAOt6
+fJlNmdUYnLFxcV82d3drZucE+iUkY8ePWLbKMVpckzLJTUV0/KTdWeOBUTq
pAZaW1uRZ1FRkZhcRKeAEXuGnUyOWHwjsQE0q5QlPxRVFgTIykft0qVLcb2A
8exW/M5nijo6clAfoYmhIk/bczcAPYAYmJ2djTUVmq2trZVdBUzRALJFffo3
yAd3zj+2TE5O+nzt6NGjEZ0LEDCRkrKusCnqwHQhYsSQQsWWpqYmm9rly5eZ
Vg+JmIpPkowhYKqPUUxRB+pGLPb3BYktTC7xhERw8+bNmpoaXpV1ZXOyxcH1
qKIusSv2oKaKboo6WGt6etr+vuCxhY2hKWxVxQQFlQtI1uXl5QzTeWXjmKKx
YiBNYDC6nLM5USP8ixcvUmDcuHEjlUpFX0uMRI/kBliorKyMFfUM7jPFuWf9
lyd+R09aPrytfnrP4j+/sMfwcylRnECnLCR1KUTswE6Cjs6OhVgOXrCDo35J
JWX1kTBSXV29b98+yEJQl3BfqsKojUv7t04/abVXVCWKE1LhtLS0OMsnEF13
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
Nyy1wU8=
               "], {{0, 0}, {73, 70}}, {0, 255}, ColorFunction -> RGBColor], 
              AspectRatio -> 1, Axes -> False, Background -> None, Frame -> 
              None, FrameTicks -> None, ImageSize -> 
              Dynamic[{
                Automatic, 
                 3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                  Magnification])}, ImageSizeCache -> {45., {0., 9.}}]], 
             GridBox[{{
                RowBox[{
                  TagBox["\"Name: \"", "SummaryItemAnnotation"], 
                  "\[InvisibleSpace]", 
                  TagBox[
                   TemplateBox[{"\"LeNet Trained on MNIST Data\"", "\" \"", 
                    
                    TemplateBox[{
                    "\"\[RightGuillemet]\"", 
                    "https://resources.wolframcloud.com/NeuralNetRepository/\
resources/LeNet-Trained-on-MNIST-Data"}, "HyperlinkURL"]}, "RowDefault"], 
                   "SummaryItem"]}], 
                TagBox["\"\"", "SummaryItem"]}, {
                RowBox[{
                  TagBox["\"Type: \"", "SummaryItemAnnotation"], 
                  "\[InvisibleSpace]", 
                  TagBox["\"NeuralNet\"", "SummaryItem"]}], 
                "\[SpanFromLeft]"}, {
                RowBox[{
                  TagBox["\"Description: \"", "SummaryItemAnnotation"], 
                  "\[InvisibleSpace]", 
                  TagBox[
                  "\"Identify the handwritten digit in an image\"", 
                   "SummaryItem"]}], "\[SpanFromLeft]"}, {
                RowBox[{
                  TagBox["\"ByteCount: \"", "SummaryItemAnnotation"], 
                  "\[InvisibleSpace]", 
                  TagBox["1750489", "SummaryItem"]}], ""}, {
                RowBox[{
                  TagBox[
                  "\"TrainingSetInformation: \"", "SummaryItemAnnotation"], 
                  "\[InvisibleSpace]", 
                  TagBox[
                  "\"MNIST Database of Handwritten Digits, consisting of \
60,000 training and 10,000 test grayscale images of size 28x28.\"", 
                   "SummaryItem"]}], ""}, {
                RowBox[{
                  TagBox["\"InputDomains: \"", "SummaryItemAnnotation"], 
                  "\[InvisibleSpace]", 
                  TagBox[
                   TagBox[
                    
                    TemplateBox[{",", "\",\"", "\"Image\""}, 
                    "RowWithSeparators"], Short], "SummaryItem"]}], ""}, {
                RowBox[{
                  TagBox["\"TaskType: \"", "SummaryItemAnnotation"], 
                  "\[InvisibleSpace]", 
                  TagBox[
                   RowBox[{"{", "\"Classification\"", "}"}], "SummaryItem"]}],
                 ""}, {
                RowBox[{
                  TagBox["\"Keywords: \"", "SummaryItemAnnotation"], 
                  "\[InvisibleSpace]", 
                  TagBox[
                   TagBox[
                    
                    TemplateBox[{
                    ",", "\",\"", "\"mnist\"", "\"lenet\"", "\"digit\""}, 
                    "RowWithSeparators"], Short], "SummaryItem"]}], ""}, {
                RowBox[{
                  TagBox["\"Data Location: \"", "SummaryItemAnnotation"], 
                  "\[InvisibleSpace]", 
                  TagBox[
                   
                   DynamicModuleBox[{
                    ResourceSystemClient`Private`typesetstorage$$ = 
                    ResourceSystemClient`Private`typesetstorageLocation, 
                    ResourceSystemClient`Private`info$$}, 
                    DynamicBox[
                    ToBoxes[
                    ResourceSystemClient`Private`info$$ = 
                    ResourceSystemClient`Private`resourceInfo[
                    "050b1a0a-f43a-4c28-b7e0-72607a918467"]; If[
                    AssociationQ[ResourceSystemClient`Private`info$$], 
                    ResourceSystemClient`Private`typesetstorage$$[
                    Lookup[
                    ResourceSystemClient`Private`info$$, 
                    "ContentElementLocations", None]], 
                    Missing["NotAvailable"]], StandardForm]], 
                    DynamicModuleValues :> {}], "SummaryItem"]}], ""}, {
                RowBox[{
                  TagBox["\"UUID: \"", "SummaryItemAnnotation"], 
                  "\[InvisibleSpace]", 
                  TagBox[
                  "\"050b1a0a-f43a-4c28-b7e0-72607a918467\"", 
                   "SummaryItem"]}], ""}, {
                RowBox[{
                  TagBox["\"Version: \"", "SummaryItemAnnotation"], 
                  "\[InvisibleSpace]", 
                  TagBox["\"1.16.0\"", "SummaryItem"]}], ""}, {
                RowBox[{
                  TagBox["\"Elements: \"", "SummaryItemAnnotation"], 
                  "\[InvisibleSpace]", 
                  TagBox[
                   TagBox[
                    
                    TemplateBox[{
                    ",", "\",\"", "\"ConstructionNotebook\"", 
                    "\"ConstructionNotebookExpression\"", "\"EvaluationNet\"",
                     "\"UninitializedEvaluationNet\"", 
                    "\"EvaluationExample\""}, "RowWithSeparators"], 
                    Short[#, 2]& ], "SummaryItem"]}], ""}}, 
              GridBoxAlignment -> {
               "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
              False, GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              GridBoxSpacings -> {
               "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
              BaseStyle -> {
               ShowStringCharacters -> False, NumberMarks -> False, 
                PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
           GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
           BaselinePosition -> {1, 1}]}, 
        Dynamic[Typeset`open$$], ImageSize -> Automatic]},
      "SummaryPanel"],
     DynamicModuleValues:>{}], "]"}],
   ResourceObject[<|
    "Name" -> "LeNet Trained on MNIST Data", "UUID" -> 
     "050b1a0a-f43a-4c28-b7e0-72607a918467", "ResourceType" -> "NeuralNet", 
     "Version" -> "1.16.0", "Description" -> 
     "Identify the handwritten digit in an image", "RepositoryLocation" -> 
     URL["https://www.wolframcloud.com/objects/resourcesystem/api/1.0"], 
     "WolframLanguageVersionRequired" -> "11.1", 
     "ContentElements" -> {
      "ConstructionNotebook", "ConstructionNotebookExpression", 
       "EvaluationNet", "UninitializedEvaluationNet", "EvaluationExample"}|>, 
    ResourceSystemBase -> 
    "https://www.wolframcloud.com/objects/resourcesystem/api/1.0"],
   Editable->False,
   SelectWithContents->True,
   Selectable->False], "//", "ReadableForm"}]], "Input",
 TaggingRules->{},
 CellChangeTimes->{
  3.70999648737139*^9, {3.743446476485813*^9, 3.7434464922253437`*^9}, 
   3.743446557190403*^9, 3.7483683198813047`*^9, 3.748368459200318*^9, 
   3.748368509132885*^9},
 CellLabel->"In[1]:=",
 CellID->558531935,ExpressionUUID->"823827e9-bc96-4dc9-918b-58bd674e704f"],

Cell[BoxData[
 StyleBox[
  RowBox[{"ResourceObject", "[", "\n", "    ", 
   RowBox[{
    RowBox[{"<|", "\n", "        ", 
     RowBox[{
      RowBox[{
      "\"\<Name\>\"", " ", "->", " ", "\"\<LeNet Trained on MNIST Data\>\""}],
       ",", "\n", "        ", 
      RowBox[{
      "\"\<UUID\>\"", " ", "->", " ", 
       "\"\<050b1a0a-f43a-4c28-b7e0-72607a918467\>\""}], ",", "\n", 
      "        ", 
      RowBox[{"\"\<ResourceType\>\"", " ", "->", " ", "\"\<NeuralNet\>\""}], 
      ",", "\n", "        ", 
      RowBox[{"\"\<Version\>\"", " ", "->", " ", "\"\<1.16.0\>\""}], ",", 
      "\n", "        ", 
      RowBox[{
      "\"\<Description\>\"", " ", "->", " ", 
       "\"\<Identify the handwritten digit in an image\>\""}], ",", "\n", 
      "        ", 
      RowBox[{"\"\<RepositoryLocation\>\"", " ", "->", "\n", "            ", 
       RowBox[{
       "URL", "[", " ", 
        "\"\<https://www.wolframcloud.com/objects/resourcesystem/api/1.0\>\"",
         " ", "]"}]}], ",", "\n", "        ", 
      RowBox[{
      "\"\<WolframLanguageVersionRequired\>\"", " ", "->", " ", 
       "\"\<11.1\>\""}], ",", "\n", "        ", 
      RowBox[{"\"\<ContentElements\>\"", " ", "->", " ", 
       RowBox[{"{", "\n", "            ", 
        RowBox[{
        "\"\<ConstructionNotebook\>\"", ",", "\n", "            ", 
         "\"\<ConstructionNotebookExpression\>\"", ",", "\n", "            ", 
         "\"\<EvaluationNet\>\"", ",", "\n", "            ", 
         "\"\<UninitializedEvaluationNet\>\"", ",", "\n", "            ", 
         "\"\<EvaluationExample\>\""}], "\n", "        ", "}"}]}]}], "\n", 
     "    ", "|>"}], ",", "\n", "    ", 
    RowBox[{
    "ResourceSystemBase", " ", "->", " ", 
     "\"\<https://www.wolframcloud.com/objects/resourcesystem/api/1.0\>\""}]}]\
, "\n", "]"}], "Input",
  StripOnInput->True,
  ShowAutoStyles->True,
  ShowStringCharacters->True]], "Output",
 TaggingRules->{},
 CellChangeTimes->{3.7434465169336224`*^9, 3.7434465599713182`*^9, 
  3.7483683224722395`*^9, 3.7483684605402555`*^9, 3.748368535672124*^9, 
  3.8275303055702343`*^9, 3.827702325201988*^9, 3.8277028077321386`*^9, 
  3.827703148100033*^9, 3.8277037029425507`*^9, 3.827835362496512*^9, 
  3.8278355211548195`*^9, 3.8600632712507706`*^9},
 CellLabel->"Out[1]=",ExpressionUUID->"07f94aa3-d116-455f-b722-2f25d77ba11c"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Scope", "Subsection",
 TaggingRules->{},
 CellLabel->"In[2]:=",
 CellID->204337381,ExpressionUUID->"022a4325-d18a-4eee-9437-c4afd3c248ae"],

Cell["Input-style syntax highlighting is used:", "Text",
 TaggingRules->{},
 CellChangeTimes->{{3.7434465867975206`*^9, 3.743446601333085*^9}},
 CellID->49525629,ExpressionUUID->"cf3a5abc-0bb2-4d13-b18c-dba5465198a7"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ReadableForm", "[", 
  RowBox[{"Hold", "[", 
   RowBox[{
    RowBox[{"f", "[", "x_", "]"}], ":=", 
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{"i", "+", "1"}], ",", 
      RowBox[{"{", 
       RowBox[{"i", ",", "x"}], "}"}]}], "]"}]}], "]"}], "]"}]], "Input",
 TaggingRules->{},
 CellChangeTimes->{
  3.70999648737139*^9, {3.7434466064769306`*^9, 3.7434466499656334`*^9}, {
   3.7434467523795753`*^9, 3.7434467646852236`*^9}},
 CellLabel->"In[1]:=",
 CellID->74732240,ExpressionUUID->"6a6b145b-6e1e-4d27-a243-a215d662c71f"],

Cell[BoxData[
 StyleBox[
  RowBox[{"Hold", "[", " ", 
   RowBox[{
    RowBox[{"f", "[", " ", "x_", " ", "]"}], " ", ":=", " ", 
    RowBox[{"Table", "[", " ", 
     RowBox[{
      RowBox[{"i", " ", "+", " ", "1"}], ",", " ", 
      RowBox[{"{", " ", 
       RowBox[{"i", ",", " ", "x"}], " ", "}"}]}], " ", "]"}]}], " ", "]"}], 
  "Input",
  StripOnInput->True,
  ShowAutoStyles->True,
  ShowStringCharacters->True]], "Output",
 TaggingRules->{},
 CellChangeTimes->{
  3.7434466340791073`*^9, 3.743446767413125*^9, 3.7483685872306433`*^9, 
   3.82753031240001*^9, {3.827702458758505*^9, 3.8277024645813274`*^9}, 
   3.8277028119890137`*^9, 3.82770315190692*^9, 3.8277037032565217`*^9, 
   3.8278353679123507`*^9, 3.8278355251677184`*^9, 3.860063283180726*^9},
 CellLabel->"Out[1]=",ExpressionUUID->"604ecd01-ffaa-4bd6-b037-ce4b64ae9bde"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 InterpretationBox[Cell[
  "\t", "ExampleDelimiter",ExpressionUUID->
   "ecbb557a-514f-42c5-b62b-9b9598913dcd"],
  $Line = 0; Null]], "ExampleDelimiter",
 TaggingRules->{},
 CellID->83701084,ExpressionUUID->"af685e37-9e2b-43d1-8829-b16a0ec6e0ca"],

Cell[TextData[{
 "Use ",
 Cell[BoxData[
  TagBox[
   ButtonBox[
    StyleBox["Unevaluated", "SymbolsRefLink",
     ShowStringCharacters->True,
     FontFamily->"Source Sans Pro"],
    BaseStyle->Dynamic[
      FEPrivate`If[
       CurrentValue["MouseOver"], {
       "Link", FontColor -> RGBColor[0.854902, 0.396078, 0.145098]}, {
       "Link"}]],
    ButtonData->"paclet:ref/Unevaluated",
    ContentPadding->False],
   MouseAppearanceTag["LinkHand"]]], "InlineFormula",
  FontFamily->"Source Sans Pro",
  FontSize->0.9428571428571428 Inherited,ExpressionUUID->
  "90650e55-4beb-4c57-a36c-afc1ae4dfe08"],
 " to prevent the expression from evaluating:"
}], "Text",
 TaggingRules->{},
 CellChangeTimes->{{3.743446799789158*^9, 3.743446820501539*^9}},
 CellID->138852805,ExpressionUUID->"a4e49418-1076-42ef-b0cb-86aed1e9b374"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ReadableForm", "[", 
  RowBox[{"Unevaluated", "[", 
   RowBox[{"Echo", "[", 
    RowBox[{
     SubsuperscriptBox["\[Integral]", "0", "1"], 
     RowBox[{
      FractionBox[
       RowBox[{"Log", "[", 
        RowBox[{
         FractionBox["1", "2"], " ", 
         RowBox[{"(", 
          RowBox[{"1", "+", 
           SqrtBox[
            RowBox[{"1", "+", 
             RowBox[{"4", " ", "x"}]}]]}], ")"}]}], "]"}], "x"], 
      RowBox[{"\[DifferentialD]", "x"}]}]}], "]"}], "]"}], "]"}]], "Input",
 TaggingRules->{},
 CellChangeTimes->{
  3.70999648737139*^9, {3.7434468240634346`*^9, 3.743446880855738*^9}, 
   3.743447032461209*^9, {3.743447111881837*^9, 3.743447115797722*^9}},
 CellLabel->"In[1]:=",
 CellID->335491445,ExpressionUUID->"a4e1b016-138c-4d4c-b4c0-cf5d7e69a897"],

Cell[BoxData[
 StyleBox[
  RowBox[{"Echo", " ", "@", " ", 
   RowBox[{"Integrate", "[", " ", 
    RowBox[{
     RowBox[{
      RowBox[{"Log", "[", " ", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"1", " ", "/", " ", "2"}], ")"}], " ", "*", " ", 
        RowBox[{"(", 
         RowBox[{"1", " ", "+", " ", 
          RowBox[{"Sqrt", "[", " ", 
           RowBox[{"1", " ", "+", " ", 
            RowBox[{"4", " ", "*", " ", "x"}]}], " ", "]"}]}], ")"}]}], " ", 
       "]"}], " ", "/", " ", "x"}], ",", " ", 
     RowBox[{"{", " ", 
      RowBox[{"x", ",", " ", "0", ",", " ", "1"}], " ", "}"}]}], " ", "]"}]}],
   "Input",
  StripOnInput->True,
  ShowAutoStyles->True,
  ShowStringCharacters->True]], "Output",
 TaggingRules->{},
 CellChangeTimes->{3.7434468652922015`*^9, 3.743447037498059*^9, 
  3.7434471172286777`*^9, 3.7483685974113555`*^9, 3.827530317209885*^9, 
  3.8277028377612295`*^9, 3.8277031549088264`*^9, 3.8277037063794503`*^9, 
  3.8278353757431374`*^9, 3.827835527342655*^9, 3.860063999371889*^9},
 CellLabel->"Out[1]=",ExpressionUUID->"8250136d-e82b-4591-b730-cdb18b15ccd8"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Generalizations and Extensions", "Subsection",
 TaggingRules->{},
 CellChangeTimes->{{3.763315156792132*^9, 3.7633151593221483`*^9}},
 CellLabel->"In[2]:=",
 CellID->105869601,ExpressionUUID->"cd2455e8-f516-4995-8c39-30a76501deb0"],

Cell[TextData[{
 Cell[BoxData[
  TagBox[
   ButtonBox[
    StyleBox["ToString", "SymbolsRefLink",
     ShowStringCharacters->True,
     FontFamily->"Source Sans Pro"],
    BaseStyle->Dynamic[
      FEPrivate`If[
       CurrentValue["MouseOver"], {
       "Link", FontColor -> RGBColor[0.854902, 0.396078, 0.145098]}, {
       "Link"}]],
    ButtonData->"paclet:ref/ToString",
    ContentPadding->False],
   MouseAppearanceTag["LinkHand"]]], "InlineFormula",
  FontFamily->"Source Sans Pro",
  FontSize->0.9428571428571428 Inherited,ExpressionUUID->
  "8c1ed5c9-8b50-44fa-9bfd-b932fe7c57a0"],
 " will preserve the whitespace:"
}], "Text",
 TaggingRules->{},
 CellChangeTimes->{{3.7434479557426353`*^9, 3.7434479612304716`*^9}, {
  3.743448154982685*^9, 3.7434481766910367`*^9}},
 CellID->219304110,ExpressionUUID->"1d5ed823-ce24-413b-a817-fb79b63c1943"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"if", "=", 
  RowBox[{"ReadableForm", "[", 
   InterpretationBox[
    RowBox[{
     TagBox["TestResultObject",
      "SummaryHead"], "[", 
     DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = 
      "Ready"}, 
      TemplateBox[{
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open$$ = True), Appearance -> None,
                 Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 
                  3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                   Magnification])}]], 
              GraphicsBox[{
                InsetBox[
                 BoxData[
                  FormBox[
                   PaneBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "MUnitExpressions", "MessageFailureIcon"]], Alignment -> 
                    Center, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], TraditionalForm]]]}, 
               PlotRange -> {{0, 1}, {0, 1}}, Background -> GrayLevel[0.93], 
               Axes -> False, AspectRatio -> 1, ImageSize -> 
               Dynamic[{
                 Automatic, 
                  3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                   Magnification])}], Frame -> True, FrameTicks -> None, 
               FrameStyle -> Directive[
                 Thickness[Tiny], 
                 GrayLevel[0.55]]], 
              GridBox[{{
                 RowBox[{
                   TagBox["\"Outcome: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["\"MessagesFailure\"", "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox["\"Test ID: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["None", "SummaryItem"]}]}}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}], True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                None, Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 
                  3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                   Magnification])}]], 
              GraphicsBox[{
                InsetBox[
                 BoxData[
                  FormBox[
                   PaneBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "MUnitExpressions", "MessageFailureIcon"]], Alignment -> 
                    Center, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], TraditionalForm]]]}, 
               PlotRange -> {{0, 1}, {0, 1}}, Background -> GrayLevel[0.93], 
               Axes -> False, AspectRatio -> 1, ImageSize -> 
               Dynamic[{
                 Automatic, 
                  3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                   Magnification])}], Frame -> True, FrameTicks -> None, 
               FrameStyle -> Directive[
                 Thickness[Tiny], 
                 GrayLevel[0.55]]], 
              GridBox[{{
                 RowBox[{
                   TagBox["\"Outcome: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["\"MessagesFailure\"", "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox["\"Test ID: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["None", "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox["\"Input: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                    PaneBox[
                    TagBox[
                    FractionBox["1", "0"], Short[#, 
                    Rational[2, 3]]& ], ImageSize -> {{1, 500}, Automatic}, 
                    BaselinePosition -> Baseline, ContentPadding -> False, 
                    FrameMargins -> 0, StripOnInput -> True], 
                    "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox["\"Expected output: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                    PaneBox[
                    TagBox["ComplexInfinity", Short[#, 
                    Rational[2, 3]]& ], ImageSize -> {{1, 500}, Automatic}, 
                    BaselinePosition -> Baseline, ContentPadding -> False, 
                    FrameMargins -> 0, StripOnInput -> True], 
                    "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox["\"Actual output: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                    PaneBox[
                    TagBox["ComplexInfinity", Short[#, 
                    Rational[2, 3]]& ], ImageSize -> {{1, 500}, Automatic}, 
                    BaselinePosition -> Baseline, ContentPadding -> False, 
                    FrameMargins -> 0, StripOnInput -> True], 
                    "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox["\"Expected messages: \"", "SummaryItemAnnotation"],
                    "\[InvisibleSpace]", 
                   TagBox[
                    PaneBox[
                    TagBox[
                    RowBox[{"{", "}"}], Short[#, 
                    Rational[2, 3]]& ], ImageSize -> {{1, 500}, Automatic}, 
                    BaselinePosition -> Baseline, ContentPadding -> False, 
                    FrameMargins -> 0, StripOnInput -> True], 
                    "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox["\"Actual messages: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                    PaneBox[
                    TagBox[
                    RowBox[{"{", 
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"Power", "::", "infy"}], "MessageName"], ",", 
                    FractionBox["1", "0"]}], "]"}], "}"}], Short[#, 
                    Rational[2, 3]]& ], ImageSize -> {{1, 500}, Automatic}, 
                    BaselinePosition -> Baseline, ContentPadding -> False, 
                    FrameMargins -> 0, StripOnInput -> True], 
                    "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox["\"Time Taken: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                    PaneBox[
                    TagBox[
                    
                    TemplateBox[{
                    "0``7.1505149978319915", "\"s\"", "seconds", 
                    "\"Seconds\""}, "Quantity", SyntaxForm -> Mod], Short[#, 
                    Rational[2, 3]]& ], ImageSize -> {{1, 500}, Automatic}, 
                    BaselinePosition -> Baseline, ContentPadding -> False, 
                    FrameMargins -> 0, StripOnInput -> True], 
                    "SummaryItem"]}]}}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open$$], ImageSize -> Automatic]},
       "SummaryPanel"],
      DynamicModuleValues:>{}], "]"}],
    TestResultObject[<|
     "TestClass" -> None, "TestIndex" -> 1, "TestID" -> None, "Outcome" -> 
      "MessagesFailure", "Input" -> HoldForm[1/0], "ExpectedOutput" -> 
      HoldForm[
        DirectedInfinity[]], "ActualOutput" -> HoldForm[
        DirectedInfinity[]], "ExpectedMessages" -> {}, "ActualMessages" -> {
        HoldForm[
         Message[
          MessageName[Power, "infy"], 
          HoldForm[0^(-1)]]]}, "AbsoluteTimeUsed" -> 
      Quantity[0``7.1505149978319915, "Seconds"], "CPUTimeUsed" -> 
      Quantity[0., "Seconds"], "MemoryUsed" -> Quantity[1136, "Bytes"]|>],
    Editable->False,
    SelectWithContents->True,
    Selectable->False], "]"}]}]], "Input",
 TaggingRules->{},
 CellChangeTimes->{
  3.70999648737139*^9, {3.743448192749573*^9, 3.7434481943075104`*^9}},
 CellLabel->"In[1]:=",
 CellID->161631057,ExpressionUUID->"4ace2206-cd14-4e09-8c84-20b1ddd2e7d8"],

Cell[BoxData[
 StyleBox[
  RowBox[{"TestResultObject", " ", "@", " ", 
   RowBox[{"<|", "\n", "    ", 
    RowBox[{
     RowBox[{"\"\<TestClass\>\"", " ", "->", " ", "None"}], ",", "\n", "    ", 
     RowBox[{"\"\<TestIndex\>\"", " ", "->", " ", "1"}], ",", "\n", "    ", 
     RowBox[{"\"\<TestID\>\"", " ", "->", " ", "None"}], ",", "\n", "    ", 
     RowBox[{"\"\<Outcome\>\"", " ", "->", " ", "\"\<MessagesFailure\>\""}], 
     ",", "\n", "    ", 
     RowBox[{"\"\<Input\>\"", " ", "->", " ", 
      RowBox[{"HoldForm", "[", " ", 
       RowBox[{"1", " ", "/", " ", "0"}], " ", "]"}]}], ",", "\n", "    ", 
     RowBox[{"\"\<ExpectedOutput\>\"", " ", "->", " ", 
      RowBox[{"HoldForm", " ", "@", " ", 
       RowBox[{"DirectedInfinity", "[", " ", "]"}]}]}], ",", "\n", "    ", 
     RowBox[{"\"\<ActualOutput\>\"", " ", "->", " ", 
      RowBox[{"HoldForm", " ", "@", " ", 
       RowBox[{"DirectedInfinity", "[", " ", "]"}]}]}], ",", "\n", "    ", 
     RowBox[{"\"\<ExpectedMessages\>\"", " ", "->", " ", 
      RowBox[{"{", " ", "}"}]}], ",", "\n", "    ", 
     RowBox[{"\"\<ActualMessages\>\"", " ", "->", " ", 
      RowBox[{"{", " ", 
       RowBox[{"HoldForm", " ", "@", " ", 
        RowBox[{"Message", "[", " ", 
         RowBox[{
          RowBox[{"Power", "::", "infy"}], ",", " ", 
          RowBox[{"HoldForm", "[", " ", 
           RowBox[{"0", "^", 
            RowBox[{"(", 
             RowBox[{"-", "1"}], ")"}]}], " ", "]"}]}], " ", "]"}]}], " ", 
       "}"}]}], ",", "\n", "    ", 
     RowBox[{"\"\<AbsoluteTimeUsed\>\"", " ", "->", " ", 
      RowBox[{"Quantity", "[", " ", 
       RowBox[{"0.", ",", " ", "\"\<Seconds\>\""}], " ", "]"}]}], ",", "\n", 
     "    ", 
     RowBox[{"\"\<CPUTimeUsed\>\"", " ", "->", " ", 
      RowBox[{"Quantity", "[", " ", 
       RowBox[{"0.", ",", " ", "\"\<Seconds\>\""}], " ", "]"}]}], ",", "\n", 
     "    ", 
     RowBox[{"\"\<MemoryUsed\>\"", " ", "->", " ", 
      RowBox[{"Quantity", "[", " ", 
       RowBox[{"1136", ",", " ", "\"\<Bytes\>\""}], " ", "]"}]}]}], "\n", 
    "|>"}]}], "Input",
  StripOnInput->True,
  ShowAutoStyles->True,
  ShowStringCharacters->True]], "Output",
 TaggingRules->{},
 CellChangeTimes->{
  3.743448196795437*^9, 3.7483686219156523`*^9, 3.7483702729388876`*^9, 
   3.8275303220077467`*^9, 3.8277028668903637`*^9, {3.827702912944998*^9, 
   3.8277029316914573`*^9}, {3.8277032245827584`*^9, 3.827703245194148*^9}, {
   3.8277037098783474`*^9, 3.8277037361095476`*^9}, 3.8278353801829877`*^9, 
   3.827835452561875*^9, 3.8278355318065066`*^9, 3.827836501044758*^9, 
   3.827836727023046*^9, 3.827836812930997*^9, 3.82783685024489*^9, 
   3.8600640572948217`*^9},
 CellLabel->"Out[1]=",ExpressionUUID->"6fb301b3-bb31-4697-8cdb-326d5b6191e4"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ToString", "[", "if", "]"}]], "Input",
 TaggingRules->{},
 CellChangeTimes->{
  3.70999648737139*^9, {3.743447962639429*^9, 3.743447977246993*^9}, {
   3.7434480669433146`*^9, 3.7434480759400454`*^9}, {3.743448124780587*^9, 
   3.743448129457446*^9}, {3.7434481885596824`*^9, 3.743448201148306*^9}},
 CellLabel->"In[2]:=",
 CellID->49082542,ExpressionUUID->"89ff84ad-c4f0-4e2f-acae-9f1696c83a07"],

Cell[BoxData["\<\"TestResultObject @ <|\\n    \\\"TestClass\\\" -> None,\\n   \
 \\\"TestIndex\\\" -> 1,\\n    \\\"TestID\\\" -> None,\\n    \\\"Outcome\\\" \
-> \\\"MessagesFailure\\\",\\n    \\\"Input\\\" -> HoldForm[ 1 / 0 ],\\n    \
\\\"ExpectedOutput\\\" -> HoldForm @ DirectedInfinity[ ],\\n    \
\\\"ActualOutput\\\" -> HoldForm @ DirectedInfinity[ ],\\n    \
\\\"ExpectedMessages\\\" -> { },\\n    \\\"ActualMessages\\\" -> { HoldForm @ \
Message[ Power::infy, HoldForm[ 0^(-1) ] ] },\\n    \\\"AbsoluteTimeUsed\\\" \
-> Quantity[ 0., \\\"Seconds\\\" ],\\n    \\\"CPUTimeUsed\\\" -> Quantity[ \
0., \\\"Seconds\\\" ],\\n    \\\"MemoryUsed\\\" -> Quantity[ 1136, \
\\\"Bytes\\\" ]\\n|>\"\>"], "Output",
 TaggingRules->{},
 CellChangeTimes->{
  3.743448080200919*^9, 3.7434481329353447`*^9, 3.7434482024442663`*^9, 
   3.7483686237095966`*^9, 3.748370274364851*^9, 3.8275303283295574`*^9, {
   3.8277029130069947`*^9, 3.8277029317394557`*^9}, {3.827703228237631*^9, 
   3.827703245254145*^9}, {3.8277037158431673`*^9, 3.8277037361855445`*^9}, 
   3.827835383556887*^9, 3.827836730525942*^9, 3.827836852902811*^9, 
   3.8600640592019606`*^9},
 CellLabel->"Out[2]=",ExpressionUUID->"5b119550-1824-473b-a30f-22160d261323"]
}, Open  ]],

Cell[TextData[{
 Cell[BoxData[
  TagBox[
   ButtonBox[
    StyleBox["CopyToClipboard", "SymbolsRefLink",
     ShowStringCharacters->True,
     FontFamily->"Source Sans Pro"],
    BaseStyle->Dynamic[
      FEPrivate`If[
       CurrentValue["MouseOver"], {
       "Link", FontColor -> RGBColor[0.854902, 0.396078, 0.145098]}, {
       "Link"}]],
    ButtonData->"paclet:ref/CopyToClipboard",
    ContentPadding->False],
   MouseAppearanceTag["LinkHand"]]], "InlineFormula",
  FontFamily->"Source Sans Pro",
  FontSize->0.9428571428571428 Inherited,ExpressionUUID->
  "f63b20dc-e0b2-4556-9fea-d28d8871c406"],
 " will also preserve much of the formatting:"
}], "Text",
 TaggingRules->{},
 CellChangeTimes->{{3.7434482424701047`*^9, 3.7434482698982534`*^9}},
 CellID->275065620,ExpressionUUID->"2675069c-a2da-4753-8590-239fcc9d8296"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"CopyToClipboard", "[", "if", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"Paste", "[", "]"}]}], "Input",
 TaggingRules->{},
 CellChangeTimes->{
  3.70999648737139*^9, {3.743448277903014*^9, 3.7434482842708235`*^9}, {
   3.748368630431399*^9, 3.748368634167274*^9}},
 CellLabel->"In[3]:=",
 CellID->303655914,ExpressionUUID->"b8835aa8-e7fa-49de-a6f4-381010158e46"],

Cell["\<\
TestResultObject @ <|
    \"TestClass\" -> None,
    \"TestIndex\" -> 1,
    \"TestID\" -> None,
    \"Outcome\" -> \"MessagesFailure\",
    \"Input\" -> HoldForm[ 1 / 0 ],
    \"ExpectedOutput\" -> HoldForm @ DirectedInfinity[ ],
    \"ActualOutput\" -> HoldForm @ DirectedInfinity[ ],
    \"ExpectedMessages\" -> { },
    \"ActualMessages\" -> { HoldForm @ Message[ Power::infy, HoldForm[ 0^(-1) \
] ] },
    \"AbsoluteTimeUsed\" -> Quantity[ 0., \"Seconds\" ],
    \"CPUTimeUsed\" -> Quantity[ 0., \"Seconds\" ],
    \"MemoryUsed\" -> Quantity[ 1136, \"Bytes\" ]
|>\
\>", "Input",
 PageWidth:>-10000.,ExpressionUUID->"74e68133-c884-4e02-a1ee-f11508c746d6"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Options", "Subsection",
 TaggingRules->{},
 CellLabel->"In[4]:=",
 CellID->11220552,ExpressionUUID->"5c7dd5c9-f495-4efd-b591-fc804e476abd"],

Cell[CellGroupData[{

Cell["CachePersistence", "Subsubsection",
 TaggingRules->{},
 CellChangeTimes->{{3.8278369016433644`*^9, 3.8278369060562134`*^9}},
 CellLabel->"In[1]:=",
 CellID->425325526,ExpressionUUID->"2e518c73-63cb-4098-bd26-52f589b011fc"],

Cell[TextData[{
 "With ",
 Cell[BoxData[
  RowBox[{
   TagBox[
    ButtonBox[
     StyleBox["CachePersistence", "SymbolsRefLink",
      ShowStringCharacters->True,
      FontFamily->"Source Sans Pro"],
     BaseStyle->Dynamic[
       FEPrivate`If[
        CurrentValue["MouseOver"], {
        "Link", FontColor -> RGBColor[0.854902, 0.396078, 0.145098]}, {
        "Link"}]],
     ButtonData->"paclet:ref/CachePersistence",
     ContentPadding->False],
    MouseAppearanceTag["LinkHand"]], "\[Rule]", 
   TagBox[
    ButtonBox[
     StyleBox["None", "SymbolsRefLink",
      ShowStringCharacters->True,
      FontFamily->"Source Sans Pro"],
     BaseStyle->Dynamic[
       FEPrivate`If[
        CurrentValue["MouseOver"], {
        "Link", FontColor -> RGBColor[0.854902, 0.396078, 0.145098]}, {
        "Link"}]],
     ButtonData->"paclet:ref/None",
     ContentPadding->False],
    MouseAppearanceTag["LinkHand"]]}]], "InlineFormula",
  FontFamily->"Source Sans Pro",ExpressionUUID->
  "2f776bbc-8148-4e02-adb2-299219ba9796"],
 ", ",
 Cell[BoxData["ReadableForm"], "InlineFormula",
  FontFamily->"Source Sans Pro",ExpressionUUID->
  "cf78af52-6ea5-4342-9e2e-b0fed703e706"],
 " will not use any caching, which reduces overall memory usage but is the \
slowest method:"
}], "Text",
 TaggingRules->{},
 CellChangeTimes->{{3.827838158150044*^9, 3.8278382406966367`*^9}},
 CellID->509733795,ExpressionUUID->"c64b3c19-62e5-4540-ad79-94d180eda3fc"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"First", "[", 
  RowBox[{"RepeatedTiming", "[", 
   RowBox[{"ToString", "[", 
    RowBox[{"ReadableForm", "[", 
     RowBox[{
      InterpretationBox[
       DynamicModuleBox[{Typeset`open = False}, 
        TemplateBox[{"Expression", 
          RowBox[{"Hold", "[", 
            DynamicBox[
             FEPrivate`FrontEndResource["FEBitmaps", "IconizeEllipsis"]], 
            "]"}], 
          GridBox[{{
             RowBox[{
               TagBox["\"Byte count: \"", "IconizedLabel"], 
               "\[InvisibleSpace]", 
               TagBox["1640", "IconizedItem"]}]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
          Dynamic[Typeset`open]},
         "IconizedObject"]],
       Hold[Condition[
           $CellContext`PositionLargest[
            Pattern[RH`ReadableForm`list, 
             Blank[List]]], 
           AllTrue[RH`ReadableForm`list, NumericQ]] := First[
           FirstPosition[RH`ReadableForm`list, 
            Max[RH`ReadableForm`list]]]; Condition[
           $CellContext`PositionLargest[
            Pattern[RH`ReadableForm`list, 
             Blank[List]], 
            Pattern[RH`ReadableForm`n, 
             Alternatives[
              Blank[Integer], 
              HoldPattern[UpTo][
               Blank[Integer]]]]], 
           AllTrue[RH`ReadableForm`list, NumericQ]] := Take[
           Flatten[
            Map[Position[RH`ReadableForm`list, #]& , 
             DeleteDuplicates[
              TakeLargest[RH`ReadableForm`list, RH`ReadableForm`n]]]], 
           RH`ReadableForm`n]],
       SelectWithContents->True,
       Selectable->False], ",", 
      RowBox[{"CachePersistence", "\[Rule]", "None"}]}], "]"}], "]"}], "]"}], 
  "]"}]], "Input",
 TaggingRules->{},
 CellChangeTimes->{{3.8278377271898623`*^9, 3.827837776004394*^9}, {
   3.827837821679037*^9, 3.827837823077014*^9}, {3.8278379052465754`*^9, 
   3.8278379119993544`*^9}, {3.827838058678997*^9, 3.8278380671327467`*^9}, 
   3.827838144758441*^9},
 CellLabel->"In[1]:=",
 CellID->347107363,ExpressionUUID->"eb06929c-36b8-45f3-80fa-0a2ccb3e6fd4"],

Cell[BoxData["0.019280475`"], "Output",
 TaggingRules->{},
 CellChangeTimes->{
  3.8278377596788983`*^9, {3.8278378068005*^9, 3.8278378304777765`*^9}, 
   3.827837921382093*^9, 3.827837984730215*^9, 3.827838072367591*^9, 
   3.827838253152265*^9, 3.8278383483504353`*^9},
 CellLabel->"Out[1]=",
 CellID->124305374,ExpressionUUID->"2545ec03-1f3d-4f22-b27a-a0ad5723aced"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 InterpretationBox[Cell[
  "\t", "ExampleDelimiter",ExpressionUUID->
   "8cd75a66-66ab-4295-b63a-055668e94c1a"],
  $Line = 0; Null]], "ExampleDelimiter",
 TaggingRules->{},
 CellID->507829534,ExpressionUUID->"5d0a1479-9ed1-41c1-89f9-01b0ee4272e9"],

Cell[TextData[{
 "With the default behavior of ",
 Cell[BoxData[
  RowBox[{
   TagBox[
    ButtonBox[
     StyleBox["CachePersistence", "SymbolsRefLink",
      ShowStringCharacters->True,
      FontFamily->"Source Sans Pro"],
     BaseStyle->Dynamic[
       FEPrivate`If[
        CurrentValue["MouseOver"], {
        "Link", FontColor -> RGBColor[0.854902, 0.396078, 0.145098]}, {
        "Link"}]],
     ButtonData->"paclet:ref/CachePersistence",
     ContentPadding->False],
    MouseAppearanceTag["LinkHand"]], "\[Rule]", 
   TagBox[
    ButtonBox[
     StyleBox["Automatic", "SymbolsRefLink",
      ShowStringCharacters->True,
      FontFamily->"Source Sans Pro"],
     BaseStyle->Dynamic[
       FEPrivate`If[
        CurrentValue["MouseOver"], {
        "Link", FontColor -> RGBColor[0.854902, 0.396078, 0.145098]}, {
        "Link"}]],
     ButtonData->"paclet:ref/Automatic",
     ContentPadding->False],
    MouseAppearanceTag["LinkHand"]]}]], "InlineFormula",
  FontFamily->"Source Sans Pro",ExpressionUUID->
  "beb8fbcc-3c0b-4e80-b947-12201d3ea980"],
 ", ",
 Cell[BoxData["ReadableForm"], "InlineFormula",
  FontFamily->"Source Sans Pro",ExpressionUUID->
  "0f5c2262-b948-40d4-9f6b-6c76cee81b32"],
 " will remember some values between evaluations to gain a modest performance \
boost:"
}], "Text",
 TaggingRules->{},
 CellChangeTimes->{{3.827838261471999*^9, 3.827838337173751*^9}},
 CellID->136179796,ExpressionUUID->"c860c280-b30f-47c9-922b-249bd590f77b"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"First", "[", 
  RowBox[{"RepeatedTiming", "[", 
   RowBox[{"ToString", "[", 
    RowBox[{"ReadableForm", "[", 
     RowBox[{
      InterpretationBox[
       DynamicModuleBox[{Typeset`open = False}, 
        TemplateBox[{"Expression", 
          RowBox[{"Hold", "[", 
            DynamicBox[
             FEPrivate`FrontEndResource["FEBitmaps", "IconizeEllipsis"]], 
            "]"}], 
          GridBox[{{
             RowBox[{
               TagBox["\"Byte count: \"", "IconizedLabel"], 
               "\[InvisibleSpace]", 
               TagBox["1640", "IconizedItem"]}]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
          Dynamic[Typeset`open]},
         "IconizedObject"]],
       Hold[Condition[
           $CellContext`PositionLargest[
            Pattern[RH`ReadableForm`list, 
             Blank[List]]], 
           AllTrue[RH`ReadableForm`list, NumericQ]] := First[
           FirstPosition[RH`ReadableForm`list, 
            Max[RH`ReadableForm`list]]]; Condition[
           $CellContext`PositionLargest[
            Pattern[RH`ReadableForm`list, 
             Blank[List]], 
            Pattern[RH`ReadableForm`n, 
             Alternatives[
              Blank[Integer], 
              HoldPattern[UpTo][
               Blank[Integer]]]]], 
           AllTrue[RH`ReadableForm`list, NumericQ]] := Take[
           Flatten[
            Map[Position[RH`ReadableForm`list, #]& , 
             DeleteDuplicates[
              TakeLargest[RH`ReadableForm`list, RH`ReadableForm`n]]]], 
           RH`ReadableForm`n]],
       SelectWithContents->True,
       Selectable->False], ",", 
      RowBox[{"CachePersistence", "\[Rule]", "Automatic"}]}], "]"}], "]"}], 
   "]"}], "]"}]], "Input",
 TaggingRules->{},
 CellChangeTimes->{{3.827837923936*^9, 3.827837928116894*^9}, {
   3.827838075009531*^9, 3.8278380782824354`*^9}, 3.827838146356412*^9},
 CellLabel->"In[1]:=",
 CellID->22030816,ExpressionUUID->"4f49bd00-a51e-4b61-88d0-6dcd875aa837"],

Cell[BoxData["0.0112234578125`"], "Output",
 TaggingRules->{},
 CellChangeTimes->{3.827837929393855*^9, 3.827837989435055*^9, 
  3.827838080462351*^9, 3.827838350101366*^9},
 CellLabel->"Out[1]=",
 CellID->110333847,ExpressionUUID->"dbbca86a-ed7f-4ca4-80a8-d70f50af9638"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 InterpretationBox[Cell[
  "\t", "ExampleDelimiter",ExpressionUUID->
   "6c63d2d7-6b06-4e25-a2f9-658ed3e65273"],
  $Line = 0; Null]], "ExampleDelimiter",
 TaggingRules->{},
 CellID->314169455,ExpressionUUID->"0f4f8d9a-fae5-4707-b680-1543e083c580"],

Cell[TextData[{
 "Using ",
 Cell[BoxData[
  RowBox[{
   TagBox[
    ButtonBox[
     StyleBox["CachePersistence", "SymbolsRefLink",
      ShowStringCharacters->True,
      FontFamily->"Source Sans Pro"],
     BaseStyle->Dynamic[
       FEPrivate`If[
        CurrentValue["MouseOver"], {
        "Link", FontColor -> RGBColor[0.854902, 0.396078, 0.145098]}, {
        "Link"}]],
     ButtonData->"paclet:ref/CachePersistence",
     ContentPadding->False],
    MouseAppearanceTag["LinkHand"]], "\[Rule]", 
   TagBox[
    ButtonBox[
     StyleBox["Full", "SymbolsRefLink",
      ShowStringCharacters->True,
      FontFamily->"Source Sans Pro"],
     BaseStyle->Dynamic[
       FEPrivate`If[
        CurrentValue["MouseOver"], {
        "Link", FontColor -> RGBColor[0.854902, 0.396078, 0.145098]}, {
        "Link"}]],
     ButtonData->"paclet:ref/Full",
     ContentPadding->False],
    MouseAppearanceTag["LinkHand"]]}]], "InlineFormula",
  FontFamily->"Source Sans Pro",ExpressionUUID->
  "3b951d9b-fae7-40e4-84a5-df96b22f08bc"],
 " will give the fastest performance, but the extra memory used is not \
released for the remainder of the kernel session:"
}], "Text",
 TaggingRules->{},
 CellChangeTimes->{{3.8278383675778646`*^9, 3.82783837896451*^9}, {
  3.8278384102405815`*^9, 3.827838520533332*^9}},
 CellID->43938649,ExpressionUUID->"d38dbe93-7e23-4402-b9ee-cd7096d6b34a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"First", "[", 
  RowBox[{"RepeatedTiming", "[", 
   RowBox[{"ToString", "[", 
    RowBox[{"ReadableForm", "[", 
     RowBox[{
      InterpretationBox[
       DynamicModuleBox[{Typeset`open = False}, 
        TemplateBox[{"Expression", 
          RowBox[{"Hold", "[", 
            DynamicBox[
             FEPrivate`FrontEndResource["FEBitmaps", "IconizeEllipsis"]], 
            "]"}], 
          GridBox[{{
             RowBox[{
               TagBox["\"Byte count: \"", "IconizedLabel"], 
               "\[InvisibleSpace]", 
               TagBox["1640", "IconizedItem"]}]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
          Dynamic[Typeset`open]},
         "IconizedObject"]],
       Hold[Condition[
           $CellContext`PositionLargest[
            Pattern[RH`ReadableForm`list, 
             Blank[List]]], 
           AllTrue[RH`ReadableForm`list, NumericQ]] := First[
           FirstPosition[RH`ReadableForm`list, 
            Max[RH`ReadableForm`list]]]; Condition[
           $CellContext`PositionLargest[
            Pattern[RH`ReadableForm`list, 
             Blank[List]], 
            Pattern[RH`ReadableForm`n, 
             Alternatives[
              Blank[Integer], 
              HoldPattern[UpTo][
               Blank[Integer]]]]], 
           AllTrue[RH`ReadableForm`list, NumericQ]] := Take[
           Flatten[
            Map[Position[RH`ReadableForm`list, #]& , 
             DeleteDuplicates[
              TakeLargest[RH`ReadableForm`list, RH`ReadableForm`n]]]], 
           RH`ReadableForm`n]],
       SelectWithContents->True,
       Selectable->False], ",", 
      RowBox[{"CachePersistence", "\[Rule]", "Full"}]}], "]"}], "]"}], "]"}], 
  "]"}]], "Input",
 TaggingRules->{},
 CellChangeTimes->{{3.8278380894421015`*^9, 3.8278380905080514`*^9}, 
   3.827838147520359*^9},
 CellLabel->"In[1]:=",
 CellID->50090550,ExpressionUUID->"9af05da4-5c10-4cb6-8365-6a30ba63297b"],

Cell[BoxData["0.00014226064453125`"], "Output",
 TaggingRules->{},
 CellChangeTimes->{3.827838093911974*^9, 3.827838523732215*^9},
 CellLabel->"Out[1]=",
 CellID->536478240,ExpressionUUID->"1547226c-3716-4f5d-a7f2-a9e65df6c327"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["DynamicAlignment", "Subsubsection",
 TaggingRules->{},
 CellChangeTimes->{{3.827836917031909*^9, 3.8278369199398212`*^9}},
 CellLabel->"In[9]:=",
 CellID->32477363,ExpressionUUID->"f207432a-6966-45c4-a955-c02f32f6fe53"],

Cell[TextData[{
 Cell[BoxData["ReadableForm"], "InlineFormula",
  FontFamily->"Source Sans Pro",ExpressionUUID->
  "e186259a-789f-4cc8-a4ad-419230b86bff"],
 " can adjust indentation of certain parts of code in order to obtain \
alignment across lines when using a monospace font. Here is a helper function \
to display monospaced results:"
}], "Text",
 TaggingRules->{},
 CellChangeTimes->{{3.827838700415968*^9, 3.8278388064208193`*^9}, {
  3.8278388765147357`*^9, 3.8278388791506767`*^9}},
 CellID->158976119,ExpressionUUID->"b9b98be0-66f0-4b20-82f6-fd1e178cdfdc"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"showMonospace", "[", "expr_", "]"}], ":=", 
   RowBox[{"Style", "[", 
    RowBox[{
     RowBox[{"ToString", "[", "expr", "]"}], ",", 
     RowBox[{"PrivateFontOptions", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"\"\<OperatorSubstitution\>\"", "\[Rule]", "False"}], "}"}]}], 
     ",", 
     RowBox[{"FontFamily", "\[Rule]", "\"\<Source Code Pro\>\""}]}], "]"}]}], 
  ";"}]], "Input",
 TaggingRules->{},
 CellChangeTimes->{3.827838811912674*^9},
 CellLabel->"In[1]:=",
 CellID->71976042,ExpressionUUID->"f7ee70e6-6c72-41de-b315-779017f3c293"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"showMonospace", "[", 
  RowBox[{"expr", "=", 
   InterpretationBox[
    DynamicModuleBox[{Typeset`open = False}, 
     TemplateBox[{"Expression", 
       RowBox[{"Hold", "[", 
         DynamicBox[
          FEPrivate`FrontEndResource["FEBitmaps", "IconizeEllipsis"]], "]"}], 
       GridBox[{{
          RowBox[{
            TagBox["\"Byte count: \"", "IconizedLabel"], "\[InvisibleSpace]", 
            TagBox["1216", "IconizedItem"]}]}}, 
        GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
        "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
       Dynamic[Typeset`open]},
      "IconizedObject"]],
    Hold[$CellContext`myFunction[] := 
     Module[{$CellContext`result, $CellContext`anotherResult, \
$CellContext`test}, $CellContext`result = If[
          $CellContext`thisThing[], 
          $CellContext`thenDoThatThing[], 
          If[
           $CellContext`thisThing[], 
           $CellContext`thenDoThatThing[], 
           $CellContext`otherwiseDoSomethingElse[]]]; \
$CellContext`anotherResult = If[
          $CellContext`thisThing[], 
          $CellContext`thenDoThatThing[], $CellContext`result = If[
            $CellContext`thisThing[], 
            $CellContext`thenDoThatThing[], 
            $CellContext`otherwiseDoSomethingElse[]]]; \
$CellContext`otherFunction[$CellContext`result, $CellContext`anotherResult, \
$CellContext`test]]],
    SelectWithContents->True,
    Selectable->False]}], "]"}]], "Input",
 TaggingRules->{},
 CellChangeTimes->{{3.827838984251536*^9, 3.8278390040249667`*^9}, 
   3.8600642039450397`*^9},
 CellLabel->"In[2]:=",
 CellID->7392070,ExpressionUUID->"1ee7ed65-f09b-45d6-b0a6-207d142976ee"],

Cell[BoxData[
 StyleBox["\<\"Hold[myFunction[] := Module[{result, anotherResult, test}, \
result = If[thisThing[], thenDoThatThing[], If[thisThing[], \
thenDoThatThing[], otherwiseDoSomethingElse[]]]; anotherResult = \
If[thisThing[], thenDoThatThing[], result = If[thisThing[], \
thenDoThatThing[], otherwiseDoSomethingElse[]]]; otherFunction[result, \
anotherResult, test]]]\"\>",
  StripOnInput->False,
  FontFamily->"Source Code Pro",
  PrivateFontOptions->{"OperatorSubstitution"->False}]], "Output",
 TaggingRules->{},
 CellChangeTimes->{{3.827838987389461*^9, 3.82783902448734*^9}, 
   3.8600641281988707`*^9, 3.8600642097253475`*^9, 3.8600643795043344`*^9},
 CellLabel->"Out[2]=",ExpressionUUID->"828cd06d-ff8a-4d2d-9a45-f95243f1ed98"]
}, Open  ]],

Cell[TextData[{
 "By default, ",
 Cell[BoxData["ReadableForm"], "InlineFormula",
  FontFamily->"Source Sans Pro",ExpressionUUID->
  "e59cc9a9-22a3-47e4-ad68-9c3e6427dae9"],
 " will only indent one step at a time:"
}], "Text",
 TaggingRules->{},
 CellChangeTimes->{{3.8278385713058033`*^9, 3.8278386528153973`*^9}, 
   3.8278388256902475`*^9},
 CellID->1550097,ExpressionUUID->"1f263634-f9f3-4ed7-85f4-443f862a56fd"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"ReadableForm", "[", "expr", "]"}], "//", 
  "showMonospace"}]], "Input",
 TaggingRules->{},
 CellChangeTimes->{{3.827838560147152*^9, 3.8278385676499314`*^9}, {
  3.8278386610001388`*^9, 3.82783866420406*^9}, {3.827838831137103*^9, 
  3.8278388614631834`*^9}, {3.827839011014762*^9, 3.827839011582724*^9}},
 CellLabel->"In[3]:=",
 CellID->357882985,ExpressionUUID->"36751c0c-c4f1-4d2b-a8ec-b045473e2306"],

Cell[BoxData[
 StyleBox["\<\"Hold[\\n    myFunction[ ] := \\n        Module[ { result, \
anotherResult, test },\\n            \\n            result = \\n              \
  If[ thisThing[ ],\\n                    thenDoThatThing[ ],\\n              \
      If[ thisThing[ ],\\n                        thenDoThatThing[ ],\\n      \
                  otherwiseDoSomethingElse[ ]\\n                    ]\\n      \
          ];\\n\\n            \\n            anotherResult = \\n              \
  If[ thisThing[ ],\\n                    thenDoThatThing[ ],\\n              \
      result = \\n                        If[ thisThing[ ],\\n                \
            thenDoThatThing[ ],\\n                            \
otherwiseDoSomethingElse[ ]\\n                        ]\\n                \
];\\n\\n            otherFunction[ result, anotherResult, test ]\\n        \
]\\n]\"\>",
  StripOnInput->False,
  FontFamily->"Source Code Pro",
  PrivateFontOptions->{"OperatorSubstitution"->False}]], "Output",
 TaggingRules->{},
 CellChangeTimes->{
  3.8278386819345407`*^9, {3.827838834146016*^9, 3.8278388628941407`*^9}, 
   3.827839027141281*^9, 3.8600641282098703`*^9, 3.860064215213518*^9, 
   3.8600643795143356`*^9},
 CellLabel->"Out[3]=",ExpressionUUID->"c7cc4b56-eff5-47ad-a0db-7df396c38a3d"]
}, Open  ]],

Cell[TextData[{
 "Use the setting ",
 Cell[BoxData[
  RowBox[{"\"\<DynamicAlignment\>\"", "\[Rule]", 
   TagBox[
    ButtonBox[
     StyleBox["True", "SymbolsRefLink",
      ShowStringCharacters->True,
      FontFamily->"Source Sans Pro"],
     BaseStyle->Dynamic[
       FEPrivate`If[
        CurrentValue["MouseOver"], {
        "Link", FontColor -> RGBColor[0.854902, 0.396078, 0.145098]}, {
        "Link"}]],
     ButtonData->"paclet:ref/True",
     ContentPadding->False],
    MouseAppearanceTag["LinkHand"]]}]], "InlineFormula",
  FontFamily->"Source Sans Pro",ExpressionUUID->
  "eacb5c3a-2d58-40a3-b04b-3dc6a3e9f291"],
 " to perform additional alignment heuristics:"
}], "Text",
 TaggingRules->{},
 CellChangeTimes->{{3.8278389115916944`*^9, 3.827838953029484*^9}},
 CellID->189287641,ExpressionUUID->"7ed0887c-94ae-40f1-a65f-4f56066e4765"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"ReadableForm", "[", 
   RowBox[{"expr", ",", 
    RowBox[{"\"\<DynamicAlignment\>\"", "\[Rule]", "True"}]}], "]"}], "//", 
  "showMonospace"}]], "Input",
 TaggingRules->{},
 CellChangeTimes->{{3.8278388990940833`*^9, 3.827838904946912*^9}, {
  3.827838958824291*^9, 3.8278389702309523`*^9}, {3.8278390163356037`*^9, 
  3.8278390170755777`*^9}},
 CellLabel->"In[4]:=",
 CellID->347494776,ExpressionUUID->"286efdd2-99cb-4e0c-8ef5-8a5781159470"],

Cell[BoxData[
 StyleBox["\<\"Hold[\\n    myFunction[ ] := \\n        Module[ { result, \
anotherResult, test },\\n            \\n            result = If[ thisThing[ \
],\\n                         thenDoThatThing[ ],\\n                         \
If[ thisThing[ ],\\n                             thenDoThatThing[ ],\\n       \
                      otherwiseDoSomethingElse[ ]\\n                         \
]\\n                     ];\\n\\n            \\n            anotherResult = \
If[ thisThing[ ],\\n                                thenDoThatThing[ ],\\n    \
                            result = If[ thisThing[ ],\\n                     \
                        thenDoThatThing[ ],\\n                                \
             otherwiseDoSomethingElse[ ]\\n                                   \
      ]\\n                            ];\\n\\n            otherFunction[ \
result, anotherResult, test ]\\n        ]\\n]\"\>",
  StripOnInput->False,
  FontFamily->"Source Code Pro",
  PrivateFontOptions->{"OperatorSubstitution"->False}]], "Output",
 TaggingRules->{},
 CellChangeTimes->{3.8278390302581697`*^9, 3.8600641332319126`*^9, 
  3.8600642189143257`*^9, 3.860064379524335*^9},
 CellLabel->"Out[4]=",ExpressionUUID->"d4f46019-ee56-4ff9-bd34-1dfda3c2380f"]
}, Open  ]],

Cell["Align associations:", "Text",
 CellChangeTimes->{{3.8600643570143204`*^9, 
  3.8600643641856637`*^9}},ExpressionUUID->"0588570a-332c-4d9e-b82f-\
d474996b9848"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"ReadableForm", "[", 
   RowBox[{
    InterpretationBox[
     RowBox[{
      TagBox["TestResultObject",
       "SummaryHead"], "[", 
      DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = 
       "Ready"}, 
       TemplateBox[{
         PaneSelectorBox[{False -> GridBox[{{
               PaneBox[
                ButtonBox[
                 DynamicBox[
                  FEPrivate`FrontEndResource[
                  "FEBitmaps", "SquarePlusIconMedium"]], 
                 ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                 None, Evaluator -> Automatic, Method -> "Preemptive"], 
                Alignment -> {Center, Center}, ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
               GraphicsBox[{
                 InsetBox[
                  BoxData[
                   FormBox[
                    PaneBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "MUnitExpressions", "MessageFailureIcon"]], Alignment -> 
                    Center, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], TraditionalForm]]]}, 
                PlotRange -> {{0, 1}, {0, 1}}, Background -> GrayLevel[0.93], 
                Axes -> False, AspectRatio -> 1, ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], Frame -> True, FrameTicks -> None, 
                FrameStyle -> Directive[
                  Thickness[Tiny], 
                  GrayLevel[0.55]]], 
               GridBox[{{
                  RowBox[{
                    TagBox["\"Outcome: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"MessagesFailure\"", "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Test ID: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["None", "SummaryItem"]}]}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                GridBoxSpacings -> {
                 "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                BaseStyle -> {
                 ShowStringCharacters -> False, NumberMarks -> False, 
                  PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
             GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             BaselinePosition -> {1, 1}], True -> GridBox[{{
               PaneBox[
                ButtonBox[
                 DynamicBox[
                  FEPrivate`FrontEndResource[
                  "FEBitmaps", "SquareMinusIconMedium"]], 
                 ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                 None, Evaluator -> Automatic, Method -> "Preemptive"], 
                Alignment -> {Center, Center}, ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
               GraphicsBox[{
                 InsetBox[
                  BoxData[
                   FormBox[
                    PaneBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "MUnitExpressions", "MessageFailureIcon"]], Alignment -> 
                    Center, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], TraditionalForm]]]}, 
                PlotRange -> {{0, 1}, {0, 1}}, Background -> GrayLevel[0.93], 
                Axes -> False, AspectRatio -> 1, ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], Frame -> True, FrameTicks -> None, 
                FrameStyle -> Directive[
                  Thickness[Tiny], 
                  GrayLevel[0.55]]], 
               GridBox[{{
                  RowBox[{
                    TagBox["\"Outcome: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"MessagesFailure\"", "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Test ID: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["None", "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Input: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    PaneBox[
                    TagBox[
                    FractionBox["1", "0"], Short[#, 
                    Rational[2, 3]]& ], ImageSize -> {{1, 500}, Automatic}, 
                    BaselinePosition -> Baseline, ContentPadding -> False, 
                    FrameMargins -> 0, StripOnInput -> True], 
                    "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Expected output: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    PaneBox[
                    TagBox["ComplexInfinity", Short[#, 
                    Rational[2, 3]]& ], ImageSize -> {{1, 500}, Automatic}, 
                    BaselinePosition -> Baseline, ContentPadding -> False, 
                    FrameMargins -> 0, StripOnInput -> True], 
                    "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Actual output: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    PaneBox[
                    TagBox["ComplexInfinity", Short[#, 
                    Rational[2, 3]]& ], ImageSize -> {{1, 500}, Automatic}, 
                    BaselinePosition -> Baseline, ContentPadding -> False, 
                    FrameMargins -> 0, StripOnInput -> True], 
                    "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox[
                    "\"Expected messages: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    PaneBox[
                    TagBox[
                    RowBox[{"{", "}"}], Short[#, 
                    Rational[2, 3]]& ], ImageSize -> {{1, 500}, Automatic}, 
                    BaselinePosition -> Baseline, ContentPadding -> False, 
                    FrameMargins -> 0, StripOnInput -> True], 
                    "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Actual messages: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    PaneBox[
                    TagBox[
                    RowBox[{"{", 
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"Power", "::", "infy"}], "MessageName"], ",", 
                    FractionBox["1", "0"]}], "]"}], "}"}], Short[#, 
                    Rational[2, 3]]& ], ImageSize -> {{1, 500}, Automatic}, 
                    BaselinePosition -> Baseline, ContentPadding -> False, 
                    FrameMargins -> 0, StripOnInput -> True], 
                    "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Time Taken: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    PaneBox[
                    TagBox[
                    
                    TemplateBox[{
                    "0``7.1505149978319915", "\"s\"", "seconds", 
                    "\"Seconds\""}, "Quantity", SyntaxForm -> Mod], Short[#, 
                    Rational[2, 3]]& ], ImageSize -> {{1, 500}, Automatic}, 
                    BaselinePosition -> Baseline, ContentPadding -> False, 
                    FrameMargins -> 0, StripOnInput -> True], 
                    "SummaryItem"]}]}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                GridBoxSpacings -> {
                 "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                BaseStyle -> {
                 ShowStringCharacters -> False, NumberMarks -> False, 
                  PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
             GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             BaselinePosition -> {1, 1}]}, 
          Dynamic[Typeset`open$$], ImageSize -> Automatic]},
        "SummaryPanel"],
       DynamicModuleValues:>{}], "]"}],
     TestResultObject[<|
      "TestClass" -> None, "TestIndex" -> 1, "TestID" -> None, "Outcome" -> 
       "MessagesFailure", "Input" -> HoldForm[1/0], "ExpectedOutput" -> 
       HoldForm[
         DirectedInfinity[]], "ActualOutput" -> HoldForm[
         DirectedInfinity[]], "ExpectedMessages" -> {}, "ActualMessages" -> {
         HoldForm[
          Message[
           MessageName[Power, "infy"], 
           HoldForm[0^(-1)]]]}, "AbsoluteTimeUsed" -> 
       Quantity[0``7.1505149978319915, "Seconds"], "CPUTimeUsed" -> 
       Quantity[0., "Seconds"], "MemoryUsed" -> Quantity[1136, "Bytes"]|>],
     Editable->False,
     SelectWithContents->True,
     Selectable->False], ",", 
    RowBox[{"\"\<DynamicAlignment\>\"", "->", "True"}], ",", 
    RowBox[{"PageWidth", "->", "150"}]}], "]"}], "//", 
  "showMonospace"}]], "Input",
 CellChangeTimes->{{3.860064315860055*^9, 3.860064337728551*^9}},
 CellLabel->"In[5]:=",ExpressionUUID->"a381c2ae-2dbf-40e3-8a84-13a88723b1bc"],

Cell[BoxData[
 StyleBox["\<\"TestResultObject @ <|\\n    \\\"TestClass\\\"        -> \
None,\\n    \\\"TestIndex\\\"        -> 1,\\n    \\\"TestID\\\"           -> \
None,\\n    \\\"Outcome\\\"          -> \\\"MessagesFailure\\\",\\n    \
\\\"Input\\\"            -> HoldForm[ 1 / 0 ],\\n    \\\"ExpectedOutput\\\"   \
-> HoldForm @ DirectedInfinity[ ],\\n    \\\"ActualOutput\\\"     -> HoldForm \
@ DirectedInfinity[ ],\\n    \\\"ExpectedMessages\\\" -> { },\\n    \
\\\"ActualMessages\\\"   -> { HoldForm @ Message[ Power::infy, HoldForm[ \
0^(-1) ] ] },\\n    \\\"AbsoluteTimeUsed\\\" -> Quantity[ 0., \\\"Seconds\\\" \
],\\n    \\\"CPUTimeUsed\\\"      -> Quantity[ 0., \\\"Seconds\\\" ],\\n    \
\\\"MemoryUsed\\\"       -> Quantity[ 1136, \\\"Bytes\\\" ]\\n|>\"\>",
  StripOnInput->False,
  FontFamily->"Source Code Pro",
  PrivateFontOptions->{"OperatorSubstitution"->False}]], "Output",
 CellChangeTimes->{{3.8600643237226715`*^9, 3.8600643384680347`*^9}, 
   3.860064379534335*^9},
 CellLabel->"Out[5]=",ExpressionUUID->"1fcdc794-dba2-4259-ae88-af13b26cd944"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["FormatHeads", "Subsubsection",
 TaggingRules->{},
 CellChangeTimes->{{3.7434489559107666`*^9, 3.7434489574877186`*^9}},
 CellLabel->"In[6]:=",
 CellID->42870696,ExpressionUUID->"93849c0b-0b74-4dcc-a628-42d87fb8446d"],

Cell[TextData[{
 "By default, some expressions are formatted in ",
 Cell[BoxData[
  TagBox[
   ButtonBox[
    StyleBox["StandardForm", "SymbolsRefLink",
     ShowStringCharacters->True,
     FontFamily->"Source Sans Pro"],
    BaseStyle->Dynamic[
      FEPrivate`If[
       CurrentValue["MouseOver"], {
       "Link", FontColor -> RGBColor[0.854902, 0.396078, 0.145098]}, {
       "Link"}]],
    ButtonData->"paclet:ref/StandardForm",
    ContentPadding->False],
   MouseAppearanceTag["LinkHand"]]], "InlineFormula",
  FontFamily->"Source Sans Pro",
  FontSize->0.9428571428571428 Inherited,ExpressionUUID->
  "27706a08-91b8-4622-a402-7b84bea06837"],
 " in order to enhance readability:"
}], "Text",
 TaggingRules->{},
 CellChangeTimes->{{3.7434489667674437`*^9, 3.7434490009534206`*^9}},
 CellID->204161005,ExpressionUUID->"80af6861-cb77-41fc-a858-37a34acbc79c"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"data", "=", 
   RowBox[{"<|", 
    RowBox[{
     RowBox[{"\"\<Image\>\"", "\[Rule]", 
      RowBox[{"RandomImage", "[", 
       RowBox[{"1", ",", 
        RowBox[{"{", 
         RowBox[{"5", ",", "5"}], "}"}]}], "]"}]}], ",", 
     RowBox[{"\"\<Time\>\"", "\[Rule]", "Now"}], ",", 
     RowBox[{"\"\<Graphics\>\"", "\[Rule]", 
      GraphicsBox[
       {RGBColor[0, 1, 0], Thickness[Large], RectangleBox[{0, -1}, {2, 1}], 
        {RGBColor[1, 0, 0], DiskBox[{0, 0}]}, 
        {RGBColor[0, 0, 1], CircleBox[{2, 0}]}, 
        {RGBColor[1, 1, 0], PolygonBox[{{2, 0}, {4, 1}, {4, -1}}]}, 
        {RGBColor[0.5, 0, 0.5], Arrowheads[Large], 
         ArrowBox[
          NCache[{{4, Rational[3, 2]}, {0, Rational[3, 2]}, {0, 0}}, {{
            4, 1.5}, {0, 1.5}, {0, 0}}]], 
         {GrayLevel[0], Dashing[{Small, Small}], 
          LineBox[{{-1, 0}, {4, 0}}]}}}]}]}], "|>"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"ReadableForm", "[", "data", "]"}]}], "Input",
 TaggingRules->{},
 CellChangeTimes->{
  3.70999648737139*^9, {3.7434488410241966`*^9, 3.74344893838129*^9}, {
   3.7434491214178233`*^9, 3.7434491306405463`*^9}, {3.7434491900327735`*^9, 
   3.7434491904237614`*^9}, {3.7483686677433367`*^9, 
   3.7483687543838434`*^9}, {3.748368796450639*^9, 3.7483687998445463`*^9}},
 CellLabel->"In[1]:=",
 CellID->14908789,ExpressionUUID->"af0f2798-a1aa-4fd1-a7df-eb37b282d225"],

Cell[BoxData[
 StyleBox[
  RowBox[{"<|", "\n", "    ", 
   RowBox[{
    RowBox[{"\"\<Image\>\"", " ", "->", " ", 
     GraphicsBox[
      TagBox[
       RasterBox[
        RawArray["Real32",{{0.6815774440765381, 0.4268433153629303, 
         0.8914299011230469, 0.9185726046562195, 0.010012984275817871`}, {
         0.7445506453514099, 0.8001440763473511, 0.5290024280548096, 
         0.2822057604789734, 0.7459142804145813}, {0.9721683859825134, 
         0.8695762157440186, 0.6079633235931396, 0.7278478741645813, 
         0.8575581908226013}, {0.8204365372657776, 0.018276268616318703`, 
         0.7087141871452332, 0.36673474311828613`, 0.5702375173568726}, {
         0.05011846125125885, 0.7711220383644104, 0.20703662931919098`, 
         0.5129642486572266, 0.620474636554718}}], {{0, 5.}, {5., 0}}, {0., 
        1.},
        ColorFunction->GrayLevel],
       BoxForm`ImageTag[
       "Real32", ColorSpace -> Automatic, Interleaving -> None],
       Selectable->False],
      DefaultBaseStyle->"ImageGraphics",
      ImageSizeRaw->{5., 5.},
      PlotRange->{{0, 5.}, {0, 5.}}]}], ",", "\n", "    ", 
    RowBox[{"\"\<Time\>\"", " ", "->", " ", 
     TemplateBox[{
       RowBox[{"\"Wed 27 Apr 2022 12:06:38\"", 
         StyleBox[
          RowBox[{"\"GMT\"", "\[InvisibleSpace]", 
            StyleBox[
             RowBox[{"-", "4"}], NumberMarks -> False, StripOnInput -> 
             False]}], FontColor -> GrayLevel[0.5]]}], 
       RowBox[{"DateObject", "[", 
         RowBox[{
           RowBox[{"{", 
             
             RowBox[{"2022", ",", "4", ",", "27", ",", "12", ",", "6", ",", 
               "38.2625574`9.335348879631393"}], "}"}], ",", "\"Instant\"", 
           ",", "\"Gregorian\"", ",", 
           RowBox[{"-", "4.`"}]}], "]"}]},
      "DateObject",
      Editable->False]}], ",", "\n", "    ", 
    RowBox[{"\"\<Graphics\>\"", " ", "->", "\n", "        ", 
     RowBox[{"Graphics", " ", "@", " ", 
      RowBox[{"{", "\n", "            ", 
       RowBox[{
        RowBox[{"RGBColor", "[", " ", 
         RowBox[{"0", ",", " ", "1", ",", " ", "0"}], " ", "]"}], ",", "\n", 
        "            ", 
        RowBox[{"Thickness", " ", "@", " ", "Large"}], ",", "\n", 
        "            ", 
        RowBox[{"Rectangle", "[", " ", 
         RowBox[{
          RowBox[{"{", " ", 
           RowBox[{"0", ",", " ", 
            RowBox[{"-", "1"}]}], " ", "}"}], ",", " ", 
          RowBox[{"{", " ", 
           RowBox[{"2", ",", " ", "1"}], " ", "}"}]}], " ", "]"}], ",", "\n", 
        "            ", 
        RowBox[{"{", " ", 
         RowBox[{
          RowBox[{"RGBColor", "[", " ", 
           RowBox[{"1", ",", " ", "0", ",", " ", "0"}], " ", "]"}], ",", " ", 
          RowBox[{"Disk", " ", "@", " ", 
           RowBox[{"{", " ", 
            RowBox[{"0", ",", " ", "0"}], " ", "}"}]}]}], " ", "}"}], ",", 
        "\n", "            ", 
        RowBox[{"{", " ", 
         RowBox[{
          RowBox[{"RGBColor", "[", " ", 
           RowBox[{"0", ",", " ", "0", ",", " ", "1"}], " ", "]"}], ",", " ", 
          RowBox[{"Circle", " ", "@", " ", 
           RowBox[{"{", " ", 
            RowBox[{"2", ",", " ", "0"}], " ", "}"}]}]}], " ", "}"}], ",", 
        "\n", "            ", 
        RowBox[{"{", " ", 
         RowBox[{
          RowBox[{"RGBColor", "[", " ", 
           RowBox[{"1", ",", " ", "1", ",", " ", "0"}], " ", "]"}], ",", " ", 
          RowBox[{"Polygon", " ", "@", " ", 
           RowBox[{"{", " ", 
            RowBox[{
             RowBox[{"{", " ", 
              RowBox[{"2", ",", " ", "0"}], " ", "}"}], ",", " ", 
             RowBox[{"{", " ", 
              RowBox[{"4", ",", " ", "1"}], " ", "}"}], ",", " ", 
             RowBox[{"{", " ", 
              RowBox[{"4", ",", " ", 
               RowBox[{"-", "1"}]}], " ", "}"}]}], " ", "}"}]}]}], " ", "}"}],
         ",", "\n", "            ", 
        RowBox[{"{", "\n", "                ", 
         RowBox[{
          RowBox[{"RGBColor", "[", " ", 
           RowBox[{"0.5", ",", " ", "0", ",", " ", "0.5"}], " ", "]"}], ",", 
          "\n", "                ", 
          RowBox[{"Arrowheads", " ", "@", " ", "Large"}], ",", "\n", 
          "                ", 
          RowBox[{"Arrow", " ", "@", " ", 
           RowBox[{"{", " ", 
            RowBox[{
             RowBox[{"{", " ", 
              RowBox[{"4", ",", " ", 
               RowBox[{"3", " ", "/", " ", "2"}]}], " ", "}"}], ",", " ", 
             RowBox[{"{", " ", 
              RowBox[{"0", ",", " ", 
               RowBox[{"3", " ", "/", " ", "2"}]}], " ", "}"}], ",", " ", 
             RowBox[{"{", " ", 
              RowBox[{"0", ",", " ", "0"}], " ", "}"}]}], " ", "}"}]}], ",", 
          "\n", "                ", 
          RowBox[{"{", "\n", "                    ", 
           RowBox[{
            RowBox[{"GrayLevel", "[", " ", "0", " ", "]"}], ",", "\n", 
            "                    ", 
            RowBox[{"Dashing", " ", "@", " ", 
             RowBox[{"{", " ", 
              RowBox[{"Small", ",", " ", "Small"}], " ", "}"}]}], ",", "\n", 
            "                    ", 
            RowBox[{"Line", " ", "@", " ", 
             RowBox[{"{", " ", 
              RowBox[{
               RowBox[{"{", " ", 
                RowBox[{
                 RowBox[{"-", "1"}], ",", " ", "0"}], " ", "}"}], ",", " ", 
               RowBox[{"{", " ", 
                RowBox[{"4", ",", " ", "0"}], " ", "}"}]}], " ", "}"}]}]}], 
           "\n", "                ", "}"}]}], "\n", "            ", "}"}]}], 
       "\n", "        ", "}"}]}]}]}], "\n", "|>"}], "Input",
  StripOnInput->True,
  ShowAutoStyles->True,
  ShowStringCharacters->True]], "Output",
 TaggingRules->{},
 CellChangeTimes->{{3.7434488903307233`*^9, 3.743448939605253*^9}, 
   3.7434491355704*^9, {3.743449191977714*^9, 3.7434492027113934`*^9}, {
   3.748368650294814*^9, 3.748368674091152*^9}, {3.748368709878128*^9, 
   3.748368721316789*^9}, 3.748368756123791*^9, 3.748368803261449*^9, 
   3.748371480816306*^9, 3.82753034204813*^9, 3.8277029460510316`*^9, 
   3.8277032531929126`*^9, 3.82770374106542*^9, 3.860064398293558*^9},
 CellLabel->"Out[2]=",ExpressionUUID->"5931539b-b919-4d69-a213-78506bd18621"]
}, Open  ]],

Cell[TextData[{
 "Use ",
 Cell[BoxData["\"\<FormatHeads\>\""], "InlineFormula",
  FontFamily->"Source Sans Pro",
  FontSize->0.9428571428571428 Inherited,ExpressionUUID->
  "06ba4c26-8a1e-4996-990a-ef2b752498fc"],
 " to control which expressions are formatted in ",
 Cell[BoxData[
  TagBox[
   ButtonBox[
    StyleBox["StandardForm", "SymbolsRefLink",
     ShowStringCharacters->True,
     FontFamily->"Source Sans Pro"],
    BaseStyle->Dynamic[
      FEPrivate`If[
       CurrentValue["MouseOver"], {
       "Link", FontColor -> RGBColor[0.854902, 0.396078, 0.145098]}, {
       "Link"}]],
    ButtonData->"paclet:ref/StandardForm",
    ContentPadding->False],
   MouseAppearanceTag["LinkHand"]]], "InlineFormula",
  FontFamily->"Source Sans Pro",
  FontSize->0.9428571428571428 Inherited,ExpressionUUID->
  "923be4c2-9f1e-433a-abba-fb8302b30dc2"],
 ":"
}], "Text",
 TaggingRules->{},
 CellChangeTimes->{{3.743449215527012*^9, 3.743449245860106*^9}},
 CellID->154049771,ExpressionUUID->"44cdf2f6-a203-4170-87f6-39d7bf7ffcfb"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ReadableForm", "[", 
  RowBox[{"data", ",", 
   RowBox[{"\"\<FormatHeads\>\"", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"Image", ",", "Graphics"}], "}"}]}]}], "]"}]], "Input",
 TaggingRules->{},
 CellChangeTimes->{
  3.70999648737139*^9, {3.7434491591596975`*^9, 3.743449197864541*^9}, {
   3.748368676328082*^9, 3.748368676686058*^9}, {3.748368761618642*^9, 
   3.748368764359555*^9}, {3.748368808856282*^9, 3.7483688101042547`*^9}},
 CellLabel->"In[3]:=",
 CellID->266949608,ExpressionUUID->"fd751fe8-fce9-4e39-9228-ed35a54b12a6"],

Cell[BoxData[
 StyleBox[
  RowBox[{"<|", "\n", "    ", 
   RowBox[{
    RowBox[{"\"\<Image\>\"", " ", "->", " ", 
     GraphicsBox[
      TagBox[
       RasterBox[
        RawArray["Real32",{{0.6815774440765381, 0.4268433153629303, 
         0.8914299011230469, 0.9185726046562195, 0.010012984275817871`}, {
         0.7445506453514099, 0.8001440763473511, 0.5290024280548096, 
         0.2822057604789734, 0.7459142804145813}, {0.9721683859825134, 
         0.8695762157440186, 0.6079633235931396, 0.7278478741645813, 
         0.8575581908226013}, {0.8204365372657776, 0.018276268616318703`, 
         0.7087141871452332, 0.36673474311828613`, 0.5702375173568726}, {
         0.05011846125125885, 0.7711220383644104, 0.20703662931919098`, 
         0.5129642486572266, 0.620474636554718}}], {{0, 5.}, {5., 0}}, {0., 
        1.},
        ColorFunction->GrayLevel],
       BoxForm`ImageTag[
       "Real32", ColorSpace -> Automatic, Interleaving -> None],
       Selectable->False],
      DefaultBaseStyle->"ImageGraphics",
      ImageSizeRaw->{5., 5.},
      PlotRange->{{0, 5.}, {0, 5.}}]}], ",", "\n", "    ", 
    RowBox[{"\"\<Time\>\"", " ", "->", "\n", "        ", 
     RowBox[{"DateObject", "[", "\n", "            ", 
      RowBox[{
       RowBox[{"{", " ", 
        RowBox[{
        "2022", ",", " ", "4", ",", " ", "27", ",", " ", "12", ",", " ", "6", 
         ",", " ", "38.2625574"}], " ", "}"}], ",", "\n", "            ", 
       "\"\<Instant\>\"", ",", "\n", "            ", "\"\<Gregorian\>\"", ",",
        "\n", "            ", 
       RowBox[{"-", "4."}]}], "\n", "        ", "]"}]}], ",", "\n", "    ", 
    RowBox[{"\"\<Graphics\>\"", " ", "->", " ", 
     GraphicsBox[
      {RGBColor[0, 1, 0], Thickness[Large], RectangleBox[{0, -1}, {2, 1}], 
       {RGBColor[1, 0, 0], DiskBox[{0, 0}]}, 
       {RGBColor[0, 0, 1], CircleBox[{2, 0}]}, 
       {RGBColor[1, 1, 0], PolygonBox[{{2, 0}, {4, 1}, {4, -1}}]}, 
       {RGBColor[0.5, 0, 0.5], Arrowheads[Large], 
        ArrowBox[
         NCache[{{4, Rational[3, 2]}, {0, Rational[3, 2]}, {0, 0}}, {{
           4, 1.5}, {0, 1.5}, {0, 0}}]], 
        {GrayLevel[0], Dashing[{Small, Small}], 
         LineBox[{{-1, 0}, {4, 0}}]}}}]}]}], "\n", "|>"}], "Input",
  StripOnInput->True,
  ShowAutoStyles->True,
  ShowStringCharacters->True]], "Output",
 TaggingRules->{},
 CellChangeTimes->{{3.7434491757682*^9, 3.743449206999267*^9}, 
   3.748368679068984*^9, 3.748368768488454*^9, 3.7483688116482124`*^9, 
   3.7483714849631863`*^9, 3.8275303469689837`*^9, 3.8277029498239193`*^9, 
   3.8277032572297926`*^9, 3.827703743909314*^9, 3.860064405895399*^9},
 CellLabel->"Out[3]=",ExpressionUUID->"ab7ffacb-652a-498a-8c81-289ef3679b52"]
}, Open  ]],

Cell[TextData[{
 "Use ",
 Cell[BoxData[
  TagBox[
   ButtonBox[
    StyleBox["Automatic", "SymbolsRefLink",
     ShowStringCharacters->True,
     FontFamily->"Source Sans Pro"],
    BaseStyle->Dynamic[
      FEPrivate`If[
       CurrentValue["MouseOver"], {
       "Link", FontColor -> RGBColor[0.854902, 0.396078, 0.145098]}, {
       "Link"}]],
    ButtonData->"paclet:ref/Automatic",
    ContentPadding->False],
   MouseAppearanceTag["LinkHand"]]], "InlineFormula",
  FontFamily->"Source Sans Pro",
  FontSize->0.9428571428571428 Inherited,ExpressionUUID->
  "e9eebbac-3fb9-421a-a926-cef05d5011e4"],
 " to include the defaults:"
}], "Text",
 TaggingRules->{},
 CellChangeTimes->{{3.7483714968428545`*^9, 3.748371509517491*^9}},
 CellID->211804948,ExpressionUUID->"2c34642f-ed44-45c6-8850-086c3bb57670"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ReadableForm", "[", 
  RowBox[{"data", ",", 
   RowBox[{"\"\<FormatHeads\>\"", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"Automatic", ",", "Graphics"}], "}"}]}]}], "]"}]], "Input",
 TaggingRules->{},
 CellChangeTimes->{{3.74837151236341*^9, 3.748371513363373*^9}},
 CellLabel->"In[4]:=",
 CellID->5653279,ExpressionUUID->"de5778ee-02f2-4035-80f3-7de310f95f66"],

Cell[BoxData[
 StyleBox[
  RowBox[{"<|", " ", 
   RowBox[{
    RowBox[{"\"\<Image\>\"", " ", "->", " ", 
     GraphicsBox[
      TagBox[
       RasterBox[
        RawArray["Real32",{{0.6815774440765381, 0.4268433153629303, 
         0.8914299011230469, 0.9185726046562195, 0.010012984275817871`}, {
         0.7445506453514099, 0.8001440763473511, 0.5290024280548096, 
         0.2822057604789734, 0.7459142804145813}, {0.9721683859825134, 
         0.8695762157440186, 0.6079633235931396, 0.7278478741645813, 
         0.8575581908226013}, {0.8204365372657776, 0.018276268616318703`, 
         0.7087141871452332, 0.36673474311828613`, 0.5702375173568726}, {
         0.05011846125125885, 0.7711220383644104, 0.20703662931919098`, 
         0.5129642486572266, 0.620474636554718}}], {{0, 5.}, {5., 0}}, {0., 
        1.},
        ColorFunction->GrayLevel],
       BoxForm`ImageTag[
       "Real32", ColorSpace -> Automatic, Interleaving -> None],
       Selectable->False],
      DefaultBaseStyle->"ImageGraphics",
      ImageSizeRaw->{5., 5.},
      PlotRange->{{0, 5.}, {0, 5.}}]}], ",", " ", 
    RowBox[{"\"\<Time\>\"", " ", "->", " ", 
     TemplateBox[{
       RowBox[{"\"Wed 27 Apr 2022 12:06:38\"", 
         StyleBox[
          RowBox[{"\"GMT\"", "\[InvisibleSpace]", 
            StyleBox[
             RowBox[{"-", "4"}], NumberMarks -> False, StripOnInput -> 
             False]}], FontColor -> GrayLevel[0.5]]}], 
       RowBox[{"DateObject", "[", 
         RowBox[{
           RowBox[{"{", 
             
             RowBox[{"2022", ",", "4", ",", "27", ",", "12", ",", "6", ",", 
               "38.2625574`9.335348879631393"}], "}"}], ",", "\"Instant\"", 
           ",", "\"Gregorian\"", ",", 
           RowBox[{"-", "4.`"}]}], "]"}]},
      "DateObject",
      Editable->False]}], ",", " ", 
    RowBox[{"\"\<Graphics\>\"", " ", "->", " ", 
     GraphicsBox[
      {RGBColor[0, 1, 0], Thickness[Large], RectangleBox[{0, -1}, {2, 1}], 
       {RGBColor[1, 0, 0], DiskBox[{0, 0}]}, 
       {RGBColor[0, 0, 1], CircleBox[{2, 0}]}, 
       {RGBColor[1, 1, 0], PolygonBox[{{2, 0}, {4, 1}, {4, -1}}]}, 
       {RGBColor[0.5, 0, 0.5], Arrowheads[Large], 
        ArrowBox[
         NCache[{{4, Rational[3, 2]}, {0, Rational[3, 2]}, {0, 0}}, {{
           4, 1.5}, {0, 1.5}, {0, 0}}]], 
        {GrayLevel[0], Dashing[{Small, Small}], 
         LineBox[{{-1, 0}, {4, 0}}]}}}]}]}], " ", "|>"}], "Input",
  StripOnInput->True,
  ShowAutoStyles->True,
  ShowStringCharacters->True]], "Output",
 TaggingRules->{},
 CellChangeTimes->{3.748371515085306*^9, 3.8275303519778347`*^9, 
  3.827702952899827*^9, 3.8277032602707024`*^9, 3.8277037468312283`*^9, 
  3.8600644125024447`*^9},
 CellLabel->"Out[4]=",ExpressionUUID->"9ad518f0-8bd2-4d67-becd-c7e7bba63b4f"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["IndentSize", "Subsubsection",
 TaggingRules->{},
 CellChangeTimes->{{3.7434489559107666`*^9, 3.7434489574877186`*^9}, {
  3.743449295271632*^9, 3.7434492970395913`*^9}},
 CellLabel->"In[5]:=",
 CellID->610460523,ExpressionUUID->"ea435ed8-77f0-4f81-aeea-85ae31bb5fe3"],

Cell["Change the size of indentation in the output:", "Text",
 TaggingRules->{},
 CellChangeTimes->{{3.7434493007114663`*^9, 3.7434493083192415`*^9}},
 CellID->707096380,ExpressionUUID->"daa5690a-89fa-4e25-855a-14b5be7efb33"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ReadableForm", "[", 
  RowBox[{
   RowBox[{"SystemInformation", "[", "\"\<Small\>\"", "]"}], ",", 
   RowBox[{"\"\<IndentSize\>\"", "\[Rule]", "1"}], ",", 
   RowBox[{"\"\<FormatHeads\>\"", "\[Rule]", "None"}]}], "]"}]], "Input",
 TaggingRules->{},
 CellChangeTimes->{
  3.70999648737139*^9, {3.74344931142415*^9, 3.7434493335114884`*^9}, {
   3.7483688893939705`*^9, 3.7483688928918505`*^9}, {3.748368943173425*^9, 
   3.748368943537425*^9}},
 CellLabel->"In[1]:=",
 CellID->447912699,ExpressionUUID->"4e197c9c-7378-4edc-abf4-16f3b342a201"],

Cell[BoxData[
 StyleBox[
  RowBox[{"{", "\n", " ", 
   RowBox[{
    RowBox[{"\"\<Kernel\>\"", " ", "->", " ", 
     RowBox[{"{", "\n", "  ", 
      RowBox[{
       RowBox[{"\"\<SystemID\>\"", " ", "->", " ", "\"\<Windows-x86-64\>\""}],
        ",", "\n", "  ", 
       RowBox[{
       "\"\<ReleaseID\>\"", " ", "->", " ", 
        "\"\<13.1.0.0 (7716157, 2022042613717)\>\""}], ",", "\n", "  ", 
       RowBox[{"\"\<CreationDate\>\"", " ", "->", "\n", "   ", 
        RowBox[{"DateObject", "[", " ", 
         RowBox[{
          RowBox[{"{", " ", 
           RowBox[{
           "2022", ",", " ", "4", ",", " ", "26", ",", " ", "4", ",", " ", 
            "0", ",", " ", "38"}], " ", "}"}], ",", " ", "\"\<Instant\>\"", 
          ",", " ", "\"\<Gregorian\>\"", ",", " ", 
          RowBox[{"-", "4."}]}], " ", "]"}]}]}], "\n", " ", "}"}]}], ",", 
    "\n", " ", 
    RowBox[{"\"\<FrontEnd\>\"", " ", "->", " ", 
     RowBox[{"{", "\n", "  ", 
      RowBox[{
       RowBox[{"\"\<OperatingSystem\>\"", " ", "->", " ", "\"\<Windows\>\""}],
        ",", "\n", "  ", 
       RowBox[{
       "\"\<ReleaseID\>\"", " ", "->", " ", 
        "\"\<13.1.0.0 (7716157, 202204267844)\>\""}], ",", "\n", "  ", 
       RowBox[{"\"\<CreationDate\>\"", " ", "->", "\n", "   ", 
        RowBox[{"DateObject", "[", " ", 
         RowBox[{
          RowBox[{"{", " ", 
           RowBox[{
           "2022", ",", " ", "4", ",", " ", "26", ",", " ", "3", ",", " ", 
            "24", ",", " ", "56"}], " ", "}"}], ",", " ", "\"\<Instant\>\"", 
          ",", " ", "\"\<Gregorian\>\"", ",", " ", 
          RowBox[{"-", "4."}]}], " ", "]"}]}]}], "\n", " ", "}"}]}]}], "\n", 
   "}"}], "Input",
  StripOnInput->True,
  ShowAutoStyles->True,
  ShowStringCharacters->True]], "Output",
 TaggingRules->{},
 CellChangeTimes->{3.743449335865418*^9, 3.748368822170905*^9, 
  3.748368893529858*^9, 3.7483689441494083`*^9, 3.8275303581076746`*^9, 
  3.827531074326397*^9, 3.827531179826273*^9, 3.8277029592446423`*^9, 
  3.827703263087596*^9, 3.82770375012313*^9, 3.860064438637554*^9},
 CellLabel->"Out[1]=",ExpressionUUID->"6189507c-9697-4264-b8cb-7edc16cc1ebc"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["InitialIndent", "Subsubsection",
 TaggingRules->{},
 CellChangeTimes->{{3.8278369312824836`*^9, 3.8278369348743563`*^9}},
 CellLabel->"In[2]:=",
 CellID->319301273,ExpressionUUID->"f13aec22-46d6-4928-b008-c0cf2d1ac5c7"],

Cell["\<\
Specify an amount of additional indentation to apply to every line:\
\>", "Text",
 TaggingRules->{},
 CellChangeTimes->{{3.827839078266766*^9, 3.8278391085418444`*^9}},
 CellID->27829269,ExpressionUUID->"24115cbd-ddc3-4f7c-ab9d-e9a72fa18148"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ReadableForm", "[", 
  RowBox[{
   RowBox[{"<|", 
    RowBox[{
     RowBox[{"\"\<Test1\>\"", "\[Rule]", 
      RowBox[{"<|", 
       RowBox[{
        RowBox[{"\"\<Name\>\"", "\[Rule]", "\"\<First\>\""}], ",", 
        RowBox[{"\"\<Data\>\"", "\[Rule]", 
         RowBox[{"Range", "[", "10", "]"}]}]}], "|>"}]}], ",", 
     RowBox[{"\"\<Test2\>\"", "\[Rule]", 
      RowBox[{"<|", 
       RowBox[{
        RowBox[{"\"\<Name\>\"", "\[Rule]", "\"\<Second\>\""}], ",", 
        RowBox[{"\"\<Data\>\"", "\[Rule]", 
         RowBox[{"{", "}"}]}]}], "|>"}]}]}], "|>"}], ",", 
   RowBox[{"\"\<InitialIndent\>\"", "\[Rule]", "8"}]}], "]"}]], "Input",
 TaggingRules->{},
 CellChangeTimes->{{3.8278390698690147`*^9, 3.827839074715868*^9}, 
   3.827839111314781*^9, {3.8278393492717705`*^9, 3.827839446232869*^9}},
 CellLabel->"In[1]:=",
 CellID->326761339,ExpressionUUID->"f4e23fd7-b1b2-4d96-bc06-bd4688e87a7d"],

Cell[BoxData[
 StyleBox[
  RowBox[{"                                ", 
   RowBox[{"<|", "\n", "                                    ", 
    RowBox[{
     RowBox[{"\"\<Test1\>\"", " ", "->", " ", 
      RowBox[{"<|", "\n", "                                        ", 
       RowBox[{
        RowBox[{"\"\<Name\>\"", " ", "->", " ", "\"\<First\>\""}], ",", "\n", 
        "                                        ", 
        RowBox[{"\"\<Data\>\"", " ", "->", " ", 
         RowBox[{"{", " ", 
          RowBox[{
          "1", ",", " ", "2", ",", " ", "3", ",", " ", "4", ",", " ", "5", 
           ",", " ", "6", ",", " ", "7", ",", " ", "8", ",", " ", "9", ",", 
           " ", "10"}], " ", "}"}]}]}], "\n", 
       "                                    ", "|>"}]}], ",", "\n", 
     "                                    ", 
     RowBox[{"\"\<Test2\>\"", " ", "->", " ", 
      RowBox[{"<|", " ", 
       RowBox[{
        RowBox[{"\"\<Name\>\"", " ", "->", " ", "\"\<Second\>\""}], ",", " ", 
        RowBox[{"\"\<Data\>\"", " ", "->", " ", 
         RowBox[{"{", " ", "}"}]}]}], " ", "|>"}]}]}], "\n", 
    "                                ", "|>"}]}], "Input",
  StripOnInput->True,
  ShowAutoStyles->True,
  ShowStringCharacters->True]], "Output",
 TaggingRules->{},
 CellChangeTimes->{
  3.8278391138727045`*^9, {3.8278393454598813`*^9, 3.8278393867666535`*^9}, {
   3.8278394309303403`*^9, 3.8278394471378593`*^9}, 3.860064445264411*^9},
 CellLabel->"Out[1]=",ExpressionUUID->"c6ec9e2f-30f8-40ab-91f5-421783475458"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["PageWidth", "Subsubsection",
 TaggingRules->{},
 CellChangeTimes->{{3.7434489559107666`*^9, 3.7434489574877186`*^9}, {
  3.743449295271632*^9, 3.7434492970395913`*^9}, {3.7434500317306376`*^9, 
  3.7434500333685865`*^9}},
 CellLabel->"In[2]:=",
 CellID->317390140,ExpressionUUID->"adea9cb4-a07b-43aa-a020-4806acaa9502"],

Cell["Set a desired page width to control line breaks:", "Text",
 TaggingRules->{},
 CellChangeTimes->{{3.743449371855344*^9, 3.743449381415058*^9}},
 CellID->31707840,ExpressionUUID->"772ab056-c266-400a-8c2f-310be2eaab59"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ReadableForm", "[", 
  RowBox[{
   RowBox[{"SystemInformation", "[", "\"\<Small\>\"", "]"}], ",", 
   RowBox[{"\"\<PageWidth\>\"", "\[Rule]", "60"}], ",", 
   RowBox[{"\"\<FormatHeads\>\"", "\[Rule]", "None"}]}], "]"}]], "Input",
 TaggingRules->{},
 CellChangeTimes->{
  3.70999648737139*^9, {3.743449384487967*^9, 3.743449392529726*^9}, {
   3.7434494227048244`*^9, 3.7434494492060337`*^9}, {3.7483688414403276`*^9, 
   3.748368864990678*^9}, {3.7483689526761627`*^9, 3.748368964046837*^9}},
 CellLabel->"In[1]:=",
 CellID->11030316,ExpressionUUID->"b28aac1c-ec4b-4649-ac54-e0f0b02e5286"],

Cell[BoxData[
 StyleBox[
  RowBox[{"{", "\n", "    ", 
   RowBox[{
    RowBox[{"\"\<Kernel\>\"", " ", "->", " ", 
     RowBox[{"{", "\n", "        ", 
      RowBox[{
       RowBox[{"\"\<SystemID\>\"", " ", "->", " ", "\"\<Windows-x86-64\>\""}],
        ",", "\n", "        ", 
       RowBox[{
       "\"\<ReleaseID\>\"", " ", "->", " ", 
        "\"\<13.1.0.0 (7716157, 2022042613717)\>\""}], ",", "\n", "        ", 
       RowBox[{"\"\<CreationDate\>\"", " ", "->", "\n", "            ", 
        RowBox[{"DateObject", "[", "\n", "                ", 
         RowBox[{
          RowBox[{"{", " ", 
           RowBox[{
           "2022", ",", " ", "4", ",", " ", "26", ",", " ", "4", ",", " ", 
            "0", ",", " ", "38"}], " ", "}"}], ",", "\n", "                ", 
          "\"\<Instant\>\"", ",", "\n", "                ", 
          "\"\<Gregorian\>\"", ",", "\n", "                ", 
          RowBox[{"-", "4."}]}], "\n", "            ", "]"}]}]}], "\n", 
      "    ", "}"}]}], ",", "\n", "    ", 
    RowBox[{"\"\<FrontEnd\>\"", " ", "->", " ", 
     RowBox[{"{", "\n", "        ", 
      RowBox[{
       RowBox[{"\"\<OperatingSystem\>\"", " ", "->", " ", "\"\<Windows\>\""}],
        ",", "\n", "        ", 
       RowBox[{
       "\"\<ReleaseID\>\"", " ", "->", " ", 
        "\"\<13.1.0.0 (7716157, 202204267844)\>\""}], ",", "\n", "        ", 
       RowBox[{"\"\<CreationDate\>\"", " ", "->", "\n", "            ", 
        RowBox[{"DateObject", "[", "\n", "                ", 
         RowBox[{
          RowBox[{"{", " ", 
           RowBox[{
           "2022", ",", " ", "4", ",", " ", "26", ",", " ", "3", ",", " ", 
            "24", ",", " ", "56"}], " ", "}"}], ",", "\n", 
          "                ", "\"\<Instant\>\"", ",", "\n", 
          "                ", "\"\<Gregorian\>\"", ",", "\n", 
          "                ", 
          RowBox[{"-", "4."}]}], "\n", "            ", "]"}]}]}], "\n", 
      "    ", "}"}]}]}], "\n", "}"}], "Input",
  StripOnInput->True,
  ShowAutoStyles->True,
  ShowStringCharacters->True]], "Output",
 TaggingRules->{},
 CellChangeTimes->{{3.743449394482668*^9, 3.7434494508289847`*^9}, {
   3.7483688442892733`*^9, 3.74836886556466*^9}, {3.7483689541891193`*^9, 
   3.748368964820815*^9}, 3.8275312031785574`*^9, 3.8277029628155146`*^9, 
   3.827703266098507*^9, 3.8277037551189814`*^9, 3.8600644545831256`*^9},
 CellLabel->"Out[1]=",ExpressionUUID->"f0d2435e-bc8b-414f-82b9-2cb24648c3e1"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["PerformanceGoal", "Subsubsection",
 TaggingRules->{},
 CellChangeTimes->{{3.8278369447960625`*^9, 3.8278369473889847`*^9}},
 CellLabel->"In[2]:=",
 CellID->67588983,ExpressionUUID->"1a10f3c8-9a85-4858-b418-aa95f9f278e9"],

Cell[TextData[{
 "By default, ",
 Cell[BoxData["ReadableForm"], "InlineFormula",
  FontFamily->"Source Sans Pro",ExpressionUUID->
  "95380c3c-7541-44f5-8347-37f593134c6b"],
 " will traverse expressions as deep as possible to apply formatting:"
}], "Text",
 TaggingRules->{},
 CellChangeTimes->{{3.827839851677827*^9, 3.8278398785630283`*^9}, 
   3.827842019419471*^9},
 CellID->33715389,ExpressionUUID->"7eb12d8e-9460-4b42-8aac-e5809874a27d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"RepeatedTiming", "[", 
  RowBox[{"ToString", "[", 
   RowBox[{"ReadableForm", "[", 
    RowBox[{
     RowBox[{"Unevaluated", "[", 
      InterpretationBox[
       DynamicModuleBox[{Typeset`open = False}, 
        TemplateBox[{"Expression", 
          RowBox[{"CompoundExpression", "[", 
            DynamicBox[
             FEPrivate`FrontEndResource["FEBitmaps", "IconizeEllipsis"]], 
            "]"}], 
          GridBox[{{
             RowBox[{
               TagBox["\"Byte count: \"", "IconizedLabel"], 
               "\[InvisibleSpace]", 
               TagBox["1592", "IconizedItem"]}]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
          Dynamic[Typeset`open]},
         "IconizedObject"]],
       Condition[
          $CellContext`PositionLargest[
           Pattern[$CellContext`list, 
            Blank[List]]], 
          AllTrue[$CellContext`list, NumericQ]] := First[
          FirstPosition[$CellContext`list, 
           Max[$CellContext`list]]]; Condition[
          $CellContext`PositionLargest[
           Pattern[$CellContext`list, 
            Blank[List]], 
           Pattern[$CellContext`n, 
            Alternatives[
             Blank[Integer], 
             HoldPattern[UpTo][
              Blank[Integer]]]]], 
          AllTrue[$CellContext`list, NumericQ]] := Take[
          Flatten[
           Map[Position[$CellContext`list, #]& , 
            DeleteDuplicates[
             
             TakeLargest[$CellContext`list, $CellContext`n]]]], \
$CellContext`n],
       SelectWithContents->True,
       Selectable->False], "]"}], ",", 
     RowBox[{"CachePersistence", "\[Rule]", "None"}]}], "]"}], "]"}], 
  "]"}]], "Input",
 TaggingRules->{},
 CellChangeTimes->{{3.8278395125019007`*^9, 3.827839552200743*^9}, {
  3.8278395984843473`*^9, 3.827839638629154*^9}, {3.8278397854838104`*^9, 
  3.8278397908306503`*^9}},
 CellLabel->"In[1]:=",
 CellID->395632439,ExpressionUUID->"7b8d1e5a-2088-4892-bddb-bf7a57097590"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.002674651171875`", 
   ",", "\<\"PositionLargest[ list_List ] /; AllTrue[ list, NumericQ ] := \\n \
   First @ FirstPosition[ list, Max @ list ];\\n\\nPositionLargest[ \
list_List, n: _Integer | HoldPattern[ UpTo ][ _Integer ] ] /;\\n    AllTrue[ \
list, NumericQ ] := \\n    Take[\\n        Flatten[\\n            (Position[ \
list, #1 ] &) /@ DeleteDuplicates @ TakeLargest[ list, n ]\\n        ],\\n    \
    n\\n    ]\"\>"}], "}"}]], "Output",
 TaggingRules->{},
 CellChangeTimes->{
  3.827839689476663*^9, {3.8278397658273754`*^9, 3.827839793058567*^9}, 
   3.827840106985243*^9, 3.827840164754526*^9, 3.860064468305827*^9},
 CellLabel->"Out[1]=",ExpressionUUID->"0ca0c641-151d-4bd3-b8b0-5907f2f90b04"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 InterpretationBox[Cell[
  "\t", "ExampleDelimiter",ExpressionUUID->
   "c713a091-29a1-4374-b9f9-175956aa6a49"],
  $Line = 0; Null]], "ExampleDelimiter",
 TaggingRules->{},
 CellID->171708891,ExpressionUUID->"82253793-8303-4662-a635-4f876b898129"],

Cell[TextData[{
 "With ",
 Cell[BoxData[
  RowBox[{
   TagBox[
    ButtonBox[
     StyleBox["PerformanceGoal", "SymbolsRefLink",
      ShowStringCharacters->True,
      FontFamily->"Source Sans Pro"],
     BaseStyle->Dynamic[
       FEPrivate`If[
        CurrentValue["MouseOver"], {
        "Link", FontColor -> RGBColor[0.854902, 0.396078, 0.145098]}, {
        "Link"}]],
     ButtonData->"paclet:ref/PerformanceGoal",
     ContentPadding->False],
    MouseAppearanceTag["LinkHand"]], "\[Rule]", "\"\<Speed\>\""}]], 
  "InlineFormula",
  FontFamily->"Source Sans Pro",ExpressionUUID->
  "213fdebb-1252-4213-8393-3f451948301f"],
 ", ",
 Cell[BoxData["ReadableForm"], "InlineFormula",
  FontFamily->"Source Sans Pro",ExpressionUUID->
  "9113c166-25d6-41b2-b079-16da0418737d"],
 " traverses only deep enough to format lines and uses ",
 Cell[BoxData[
  TagBox[
   ButtonBox[
    StyleBox["InputForm", "SymbolsRefLink",
     ShowStringCharacters->True,
     FontFamily->"Source Sans Pro"],
    BaseStyle->Dynamic[
      FEPrivate`If[
       CurrentValue["MouseOver"], {
       "Link", FontColor -> RGBColor[0.854902, 0.396078, 0.145098]}, {
       "Link"}]],
    ButtonData->"paclet:ref/InputForm",
    ContentPadding->False],
   MouseAppearanceTag["LinkHand"]]], "InlineFormula",
  FontFamily->"Source Sans Pro",ExpressionUUID->
  "66792555-e33d-476c-b0de-a899064ab79e"],
 " to handle the rest:"
}], "Text",
 TaggingRules->{},
 CellChangeTimes->{{3.8278398865648117`*^9, 3.8278400959515915`*^9}},
 CellID->21523871,ExpressionUUID->"a221d0ab-0f62-4fe2-aeb3-0626e134260c"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"RepeatedTiming", "[", 
  RowBox[{"ToString", "[", 
   RowBox[{"ReadableForm", "[", 
    RowBox[{
     RowBox[{"Unevaluated", "[", 
      InterpretationBox[
       DynamicModuleBox[{Typeset`open = False}, 
        TemplateBox[{"Expression", 
          RowBox[{"CompoundExpression", "[", 
            DynamicBox[
             FEPrivate`FrontEndResource["FEBitmaps", "IconizeEllipsis"]], 
            "]"}], 
          GridBox[{{
             RowBox[{
               TagBox["\"Byte count: \"", "IconizedLabel"], 
               "\[InvisibleSpace]", 
               TagBox["1592", "IconizedItem"]}]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
          Dynamic[Typeset`open]},
         "IconizedObject"]],
       Condition[
          $CellContext`PositionLargest[
           Pattern[$CellContext`list, 
            Blank[List]]], 
          AllTrue[$CellContext`list, NumericQ]] := First[
          FirstPosition[$CellContext`list, 
           Max[$CellContext`list]]]; Condition[
          $CellContext`PositionLargest[
           Pattern[$CellContext`list, 
            Blank[List]], 
           Pattern[$CellContext`n, 
            Alternatives[
             Blank[Integer], 
             HoldPattern[UpTo][
              Blank[Integer]]]]], 
          AllTrue[$CellContext`list, NumericQ]] := Take[
          Flatten[
           Map[Position[$CellContext`list, #]& , 
            DeleteDuplicates[
             
             TakeLargest[$CellContext`list, $CellContext`n]]]], \
$CellContext`n],
       SelectWithContents->True,
       Selectable->False], "]"}], ",", 
     RowBox[{"CachePersistence", "\[Rule]", "None"}], ",", 
     RowBox[{"PerformanceGoal", "\[Rule]", "\"\<Speed\>\""}]}], "]"}], "]"}], 
  "]"}]], "Input",
 TaggingRules->{},
 CellChangeTimes->{{3.827839632630351*^9, 3.8278396415630856`*^9}, {
  3.827839771846218*^9, 3.827839811540018*^9}},
 CellLabel->"In[1]:=",
 CellID->130791984,ExpressionUUID->"bf81c36e-78a4-4545-9efb-ec962c52158f"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.0013311685546875`", 
   ",", "\<\"PositionLargest[list_List] /; AllTrue[list, NumericQ] := \\n    \
First @ FirstPosition[list, Max[list]];\\n\\nPositionLargest[list_List, \
n:_Integer | HoldPattern[UpTo][_Integer]] /;\\n    AllTrue[list, NumericQ] := \
\\n    Take[\\n        Flatten[\\n            (Position[list, #1] &) /@ \
DeleteDuplicates @ TakeLargest[list, n]\\n        ],\\n        n\\n    \
]\"\>"}], "}"}]], "Output",
 TaggingRules->{},
 CellChangeTimes->{{3.8278397821168923`*^9, 3.827839813802951*^9}, 
   3.8278401082142243`*^9, 3.8278401712333345`*^9, 3.860064484036373*^9},
 CellLabel->"Out[1]=",ExpressionUUID->"f1f93f03-c5bd-4808-b055-8864a0727086"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["PrefixForm", "Subsubsection",
 TaggingRules->{},
 CellChangeTimes->{{3.8278369548647623`*^9, 3.827836956525735*^9}},
 CellLabel->"In[2]:=",
 CellID->385140593,ExpressionUUID->"6eef0e7d-2713-49aa-9a6c-9df9fc999582"],

Cell[TextData[{
 "By default, ",
 Cell[BoxData["ReadableForm"], "InlineFormula",
  FontFamily->"Source Sans Pro",ExpressionUUID->
  "81234912-3832-4b07-be89-fe93aa425f31"],
 " will use ",
 Cell[BoxData[
  TagBox[
   ButtonBox[
    StyleBox["Prefix", "SymbolsRefLink",
     ShowStringCharacters->True,
     FontFamily->"Source Sans Pro"],
    BaseStyle->Dynamic[
      FEPrivate`If[
       CurrentValue["MouseOver"], {
       "Link", FontColor -> RGBColor[0.854902, 0.396078, 0.145098]}, {
       "Link"}]],
    ButtonData->"paclet:ref/Prefix",
    ContentPadding->False],
   MouseAppearanceTag["LinkHand"]]], "InlineFormula",
  FontFamily->"Source Sans Pro",ExpressionUUID->
  "9739456a-cdf2-4f37-96dc-ea61c334e17f"],
 " formatting (",
 Cell[BoxData[
  RowBox[{
   StyleBox["f", "TI"], "@", 
   StyleBox["expr", "TI"]}]], "InlineFormula",
  FontFamily->"Source Sans Pro",ExpressionUUID->
  "7db5e488-a105-4804-bba0-043bbf3bebfa"],
 ") for some expressions:"
}], "Text",
 TaggingRules->{},
 CellChangeTimes->{{3.8278402323695173`*^9, 3.8278402768351994`*^9}},
 CellID->164788580,ExpressionUUID->"75d4f76e-6812-4bae-a3fd-a5ac98005081"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ReadableForm", "[", 
  RowBox[{"Unevaluated", "[", 
   InterpretationBox[
    DynamicModuleBox[{Typeset`open = False}, 
     TemplateBox[{"Expression", 
       RowBox[{"CompoundExpression", "[", 
         DynamicBox[
          FEPrivate`FrontEndResource["FEBitmaps", "IconizeEllipsis"]], "]"}], 
       GridBox[{{
          RowBox[{
            TagBox["\"Byte count: \"", "IconizedLabel"], "\[InvisibleSpace]", 
            TagBox["1592", "IconizedItem"]}]}}, 
        GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
        "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
       Dynamic[Typeset`open]},
      "IconizedObject"]],
    Condition[
       $CellContext`PositionLargest[
        Pattern[$CellContext`list, 
         Blank[List]]], 
       AllTrue[$CellContext`list, NumericQ]] := First[
       FirstPosition[$CellContext`list, 
        Max[$CellContext`list]]]; Condition[
       $CellContext`PositionLargest[
        Pattern[$CellContext`list, 
         Blank[List]], 
        Pattern[$CellContext`n, 
         Alternatives[
          Blank[Integer], 
          HoldPattern[UpTo][
           Blank[Integer]]]]], 
       AllTrue[$CellContext`list, NumericQ]] := Take[
       Flatten[
        Map[Position[$CellContext`list, #]& , 
         DeleteDuplicates[
          TakeLargest[$CellContext`list, $CellContext`n]]]], $CellContext`n],
    SelectWithContents->True,
    Selectable->False], "]"}], "]"}]], "Input",
 TaggingRules->{},
 CellChangeTimes->{3.8278402114721394`*^9},
 CellLabel->"In[1]:=",
 CellID->625851451,ExpressionUUID->"96501524-74bb-414c-a19b-d930f9fba203"],

Cell[BoxData[{
 StyleBox[
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"PositionLargest", "[", " ", "list_List", " ", "]"}], " ", "/;",
       " ", 
      RowBox[{"AllTrue", "[", " ", 
       RowBox[{"list", ",", " ", "NumericQ"}], " ", "]"}]}], " ", ":=", " ", 
     "\n", "    ", 
     RowBox[{"First", " ", "@", " ", 
      RowBox[{"FirstPosition", "[", " ", 
       RowBox[{"list", ",", " ", 
        RowBox[{"Max", " ", "@", " ", "list"}]}], " ", "]"}]}]}], ";"}], 
   "\n"}], "Input",
  StripOnInput->True,
  ShowAutoStyles->True,
  ShowStringCharacters->True], "\n", 
 StyleBox[
  RowBox[{
   RowBox[{
    RowBox[{"PositionLargest", "[", " ", 
     RowBox[{"list_List", ",", " ", 
      RowBox[{"n", ":", " ", 
       RowBox[{"_Integer", " ", "|", " ", 
        RowBox[{
         RowBox[{"HoldPattern", "[", " ", "UpTo", " ", "]"}], "[", " ", 
         "_Integer", " ", "]"}]}]}]}], " ", "]"}], " ", "/;", "\n", "    ", 
    RowBox[{"AllTrue", "[", " ", 
     RowBox[{"list", ",", " ", "NumericQ"}], " ", "]"}]}], " ", ":=", " ", 
   "\n", "    ", 
   RowBox[{"Take", "[", "\n", "        ", 
    RowBox[{
     RowBox[{"Flatten", "[", "\n", "            ", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"Position", "[", " ", 
          RowBox[{"list", ",", " ", "#1"}], " ", "]"}], " ", "&"}], ")"}], 
       " ", "/@", " ", 
       RowBox[{"DeleteDuplicates", " ", "@", " ", 
        RowBox[{"TakeLargest", "[", " ", 
         RowBox[{"list", ",", " ", "n"}], " ", "]"}]}]}], "\n", "        ", 
      "]"}], ",", "\n", "        ", "n"}], "\n", "    ", "]"}]}], "Input",
  StripOnInput->True,
  ShowAutoStyles->True,
  ShowStringCharacters->True]}], "Output",
 TaggingRules->{},
 CellChangeTimes->{3.827840215404044*^9, 3.8600645374815784`*^9},
 CellLabel->"Out[1]=",ExpressionUUID->"f3a12e2c-f2c9-43a4-8298-8b63ed3a1827"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 InterpretationBox[Cell[
  "\t", "ExampleDelimiter",ExpressionUUID->
   "8a7c1dd1-914c-401b-888c-90a9d5756200"],
  $Line = 0; Null]], "ExampleDelimiter",
 TaggingRules->{},
 CellID->73244284,ExpressionUUID->"2d7cfaad-b3f2-43f8-ba4d-9be3fc4f7b60"],

Cell[TextData[{
 "Disable ",
 Cell[BoxData[
  TagBox[
   ButtonBox[
    StyleBox["Prefix", "SymbolsRefLink",
     ShowStringCharacters->True,
     FontFamily->"Source Sans Pro"],
    BaseStyle->Dynamic[
      FEPrivate`If[
       CurrentValue["MouseOver"], {
       "Link", FontColor -> RGBColor[0.854902, 0.396078, 0.145098]}, {
       "Link"}]],
    ButtonData->"paclet:ref/Prefix",
    ContentPadding->False],
   MouseAppearanceTag["LinkHand"]]], "InlineFormula",
  FontFamily->"Source Sans Pro",ExpressionUUID->
  "ad38cbf9-e9e8-413a-9c39-7ef2f6122803"],
 " formatting:"
}], "Text",
 TaggingRules->{},
 CellChangeTimes->{{3.8278402881888824`*^9, 3.82784029527765*^9}},
 CellID->74207143,ExpressionUUID->"1c95463b-b022-402c-83be-afac7f096440"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ReadableForm", "[", 
  RowBox[{
   RowBox[{"Unevaluated", "[", 
    InterpretationBox[
     DynamicModuleBox[{Typeset`open = False}, 
      TemplateBox[{"Expression", 
        RowBox[{"CompoundExpression", "[", 
          DynamicBox[
           FEPrivate`FrontEndResource["FEBitmaps", "IconizeEllipsis"]], "]"}], 
        GridBox[{{
           RowBox[{
             TagBox["\"Byte count: \"", "IconizedLabel"], "\[InvisibleSpace]", 
             TagBox["1592", "IconizedItem"]}]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
        Dynamic[Typeset`open]},
       "IconizedObject"]],
     Condition[
        $CellContext`PositionLargest[
         Pattern[$CellContext`list, 
          Blank[List]]], 
        AllTrue[$CellContext`list, NumericQ]] := First[
        FirstPosition[$CellContext`list, 
         Max[$CellContext`list]]]; Condition[
        $CellContext`PositionLargest[
         Pattern[$CellContext`list, 
          Blank[List]], 
         Pattern[$CellContext`n, 
          Alternatives[
           Blank[Integer], 
           HoldPattern[UpTo][
            Blank[Integer]]]]], 
        AllTrue[$CellContext`list, NumericQ]] := Take[
        Flatten[
         Map[Position[$CellContext`list, #]& , 
          DeleteDuplicates[
           TakeLargest[$CellContext`list, $CellContext`n]]]], $CellContext`n],
     SelectWithContents->True,
     Selectable->False], "]"}], ",", 
   RowBox[{"\"\<PrefixForm\>\"", "\[Rule]", "False"}]}], "]"}]], "Input",
 TaggingRules->{},
 CellChangeTimes->{{3.827840221869849*^9, 3.8278402257017403`*^9}},
 CellLabel->"In[1]:=",
 CellID->38598217,ExpressionUUID->"ebb4958a-7fc5-49e5-8324-4b9ef0e928fd"],

Cell[BoxData[{
 StyleBox[
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"PositionLargest", "[", " ", "list_List", " ", "]"}], " ", "/;",
       " ", 
      RowBox[{"AllTrue", "[", " ", 
       RowBox[{"list", ",", " ", "NumericQ"}], " ", "]"}]}], " ", ":=", " ", 
     "\n", "    ", 
     RowBox[{"First", "[", " ", 
      RowBox[{"FirstPosition", "[", " ", 
       RowBox[{"list", ",", " ", 
        RowBox[{"Max", "[", " ", "list", " ", "]"}]}], " ", "]"}], " ", 
      "]"}]}], ";"}], "\n"}], "Input",
  StripOnInput->True,
  ShowAutoStyles->True,
  ShowStringCharacters->True], "\n", 
 StyleBox[
  RowBox[{
   RowBox[{
    RowBox[{"PositionLargest", "[", " ", 
     RowBox[{"list_List", ",", " ", 
      RowBox[{"n", ":", " ", 
       RowBox[{"_Integer", " ", "|", " ", 
        RowBox[{
         RowBox[{"HoldPattern", "[", " ", "UpTo", " ", "]"}], "[", " ", 
         "_Integer", " ", "]"}]}]}]}], " ", "]"}], " ", "/;", "\n", "    ", 
    RowBox[{"AllTrue", "[", " ", 
     RowBox[{"list", ",", " ", "NumericQ"}], " ", "]"}]}], " ", ":=", " ", 
   "\n", "    ", 
   RowBox[{"Take", "[", "\n", "        ", 
    RowBox[{
     RowBox[{"Flatten", "[", "\n", "            ", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"Position", "[", " ", 
          RowBox[{"list", ",", " ", "#1"}], " ", "]"}], " ", "&"}], ")"}], 
       " ", "/@", " ", 
       RowBox[{"DeleteDuplicates", "[", " ", 
        RowBox[{"TakeLargest", "[", " ", 
         RowBox[{"list", ",", " ", "n"}], " ", "]"}], " ", "]"}]}], "\n", 
      "        ", "]"}], ",", "\n", "        ", "n"}], "\n", "    ", "]"}]}], 
  "Input",
  StripOnInput->True,
  ShowAutoStyles->True,
  ShowStringCharacters->True]}], "Output",
 TaggingRules->{},
 CellChangeTimes->{3.8278402265547085`*^9, 3.8278402992205553`*^9, 
  3.8600645637412744`*^9},
 CellLabel->"Out[1]=",ExpressionUUID->"abf7042d-2c3b-495f-830e-4d9cef1b3dbf"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["RealAccuracy", "Subsubsection",
 TaggingRules->{},
 CellChangeTimes->{{3.827836960331625*^9, 3.8278369626215334`*^9}},
 CellLabel->"In[2]:=",
 CellID->125385219,ExpressionUUID->"57ebf526-e0ef-4696-a175-ae5875bcbf0c"],

Cell[TextData[{
 "By default, ",
 Cell[BoxData["ReadableForm"], "InlineFormula",
  FontFamily->"Source Sans Pro",ExpressionUUID->
  "fd078061-f5fc-4e1c-ae43-9a8871d97475"],
 " displays real numbers with all available digits:"
}], "Text",
 TaggingRules->{},
 CellChangeTimes->{{3.8278403702684226`*^9, 3.82784039649866*^9}},
 CellID->236126788,ExpressionUUID->"937b241b-25ff-4e69-b8ff-1252ebc44383"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ReadableForm", "[", 
  RowBox[{"RandomReal", "[", 
   RowBox[{"1000", ",", "5"}], "]"}], "]"}]], "Input",
 TaggingRules->{},
 CellChangeTimes->{{3.8278403570818143`*^9, 3.8278403603247366`*^9}, 
   3.827840434659528*^9},
 CellLabel->"In[1]:=",
 CellID->59058187,ExpressionUUID->"1a2c6ee0-05b9-41a3-bb26-f2bdba11bd0f"],

Cell[BoxData[
 StyleBox[
  RowBox[{"{", "\n", "    ", 
   RowBox[{
   "124.36079976848669", ",", "\n", "    ", "443.2298161259396", ",", "\n", 
    "    ", "677.682966867234", ",", "\n", "    ", "954.2450596728177", ",", 
    "\n", "    ", "840.0355668065201"}], "\n", "}"}], "Input",
  StripOnInput->True,
  ShowAutoStyles->True,
  ShowStringCharacters->True]], "Output",
 TaggingRules->{},
 CellChangeTimes->{3.82784036090471*^9, 3.8278404383724174`*^9, 
  3.8600645726694984`*^9},
 CellLabel->"Out[1]=",ExpressionUUID->"00268763-4f28-42e7-8f77-c6df6d5a32de"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 InterpretationBox[Cell[
  "\t", "ExampleDelimiter",ExpressionUUID->
   "5d7eee4a-21a5-4fab-9fc7-3621d42eeeb0"],
  $Line = 0; Null]], "ExampleDelimiter",
 TaggingRules->{},
 CellID->524098393,ExpressionUUID->"3e55907f-db21-4976-a14f-0478bf8fb242"],

Cell["Specify a maximum number of digits to display:", "Text",
 TaggingRules->{},
 CellChangeTimes->{{3.827840415000111*^9, 3.827840428836707*^9}},
 CellID->20694304,ExpressionUUID->"b604f9be-13fe-44b0-882b-24af15fb7f94"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ReadableForm", "[", 
  RowBox[{
   RowBox[{"RandomReal", "[", 
    RowBox[{"1000", ",", "5"}], "]"}], ",", 
   RowBox[{"\"\<RealAccuracy\>\"", "\[Rule]", "3"}]}], "]"}]], "Input",
 TaggingRules->{},
 CellChangeTimes->{{3.8278404025544806`*^9, 3.827840406621343*^9}, 
   3.827840442301302*^9},
 CellLabel->"In[1]:=",
 CellID->46185815,ExpressionUUID->"925f3b33-2895-466d-9ad6-0901b8b0814d"],

Cell[BoxData[
 StyleBox[
  RowBox[{"{", " ", 
   RowBox[{
   "373.0", ",", " ", "715.0", ",", " ", "267.0", ",", " ", "942.0", ",", " ",
     "298.0"}], " ", "}"}], "Input",
  StripOnInput->True,
  ShowAutoStyles->True,
  ShowStringCharacters->True]], "Output",
 TaggingRules->{},
 CellChangeTimes->{
  3.8278404075703144`*^9, {3.827840446861149*^9, 3.8278404570228453`*^9}, 
   3.860064572687749*^9},
 CellLabel->"Out[1]=",ExpressionUUID->"c5d30485-6fcf-4927-a44b-3fd955d0c0c6"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["RelativeWidth", "Subsubsection",
 TaggingRules->{},
 CellChangeTimes->{{3.7434489559107666`*^9, 3.7434489574877186`*^9}, {
  3.743449295271632*^9, 3.7434492970395913`*^9}, {3.7434500359145126`*^9, 
  3.7434500380334487`*^9}},
 CellLabel->"In[2]:=",
 CellID->36296171,ExpressionUUID->"aa33b506-f32b-4dc5-8d95-28780abf7f98"],

Cell[TextData[{
 "By default, measuring ",
 Cell[BoxData["\"\<PageWidth\>\""], "InlineFormula",
  FontFamily->"Source Sans Pro",
  FontSize->0.9428571428571428 Inherited,ExpressionUUID->
  "430e0cd9-8d95-4dba-ba15-26b4cd88a1a2"],
 " per line includes the leading whitespace:"
}], "Text",
 TaggingRules->{},
 CellChangeTimes->{{3.743450044216264*^9, 3.7434500743823614`*^9}},
 CellID->91130773,ExpressionUUID->"63ee1bb4-abb9-41a5-a4c6-00f788d8b758"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"expr", "=", 
   RowBox[{"<|", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"\"\<Test1\>\"", "\[Rule]", 
      RowBox[{"<|", 
       RowBox[{
        RowBox[{"\"\<Name\>\"", "\[Rule]", "\"\<First\>\""}], ",", 
        RowBox[{"\"\<Data\>\"", "\[Rule]", 
         RowBox[{"Range", "[", "10", "]"}]}]}], "|>"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<Test2\>\"", "\[Rule]", 
      RowBox[{"<|", 
       RowBox[{
        RowBox[{"\"\<Name\>\"", "\[Rule]", "\"\<Second\>\""}], ",", 
        RowBox[{"\"\<Data\>\"", "\[Rule]", 
         RowBox[{"{", "}"}]}]}], "|>"}]}]}], "\[IndentingNewLine]", "|>"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"ReadableForm", "[", 
  RowBox[{"expr", ",", 
   RowBox[{"\"\<IndentSize\>\"", "\[Rule]", "12"}], ",", 
   RowBox[{"\"\<PageWidth\>\"", "\[Rule]", "45"}]}], "]"}]}], "Input",
 TaggingRules->{},
 CellChangeTimes->{
  3.70999648737139*^9, {3.743449636254448*^9, 3.7434496576018095`*^9}, {
   3.7434496951446886`*^9, 3.7434496953796816`*^9}, {3.743450003376484*^9, 
   3.7434500041154613`*^9}, {3.7434501688945413`*^9, 3.743450187481985*^9}, {
   3.743450242489357*^9, 3.74345033230366*^9}, 3.827531243017374*^9},
 CellLabel->"In[1]:=",
 CellID->75382914,ExpressionUUID->"3fbe6e79-18d2-429c-bd8c-0a669c7f003c"],

Cell[BoxData[
 StyleBox[
  RowBox[{"<|", "\n", "            ", 
   RowBox[{
    RowBox[{"\"\<Test1\>\"", " ", "->", " ", 
     RowBox[{"<|", "\n", "                        ", 
      RowBox[{
       RowBox[{"\"\<Name\>\"", " ", "->", " ", "\"\<First\>\""}], ",", "\n", 
       "                        ", 
       RowBox[{"\"\<Data\>\"", " ", "->", " ", 
        RowBox[{"{", "\n", "                                    ", 
         RowBox[{
         "1", ",", "\n", "                                    ", "2", ",", 
          "\n", "                                    ", "3", ",", "\n", 
          "                                    ", "4", ",", "\n", 
          "                                    ", "5", ",", "\n", 
          "                                    ", "6", ",", "\n", 
          "                                    ", "7", ",", "\n", 
          "                                    ", "8", ",", "\n", 
          "                                    ", "9", ",", "\n", 
          "                                    ", "10"}], "\n", 
         "                        ", "}"}]}]}], "\n", "            ", 
      "|>"}]}], ",", "\n", "            ", 
    RowBox[{"\"\<Test2\>\"", " ", "->", " ", 
     RowBox[{"<|", "\n", "                        ", 
      RowBox[{
       RowBox[{"\"\<Name\>\"", " ", "->", " ", "\"\<Second\>\""}], ",", "\n", 
       "                        ", 
       RowBox[{"\"\<Data\>\"", " ", "->", " ", 
        RowBox[{"{", " ", "}"}]}]}], "\n", "            ", "|>"}]}]}], "\n", 
   "|>"}], "Input",
  StripOnInput->True,
  ShowAutoStyles->True,
  ShowStringCharacters->True]], "Output",
 TaggingRules->{},
 CellChangeTimes->{{3.7434496464401436`*^9, 3.7434496589677677`*^9}, {
   3.7434496890518703`*^9, 3.7434496966766424`*^9}, 3.7434499228038893`*^9, 
   3.743450080946165*^9, {3.7434501763093185`*^9, 3.743450189817915*^9}, {
   3.7434503175501003`*^9, 3.743450333771617*^9}, 3.7483689785864224`*^9, {
   3.8275312222570095`*^9, 3.827531250270177*^9}, 3.8277029667314205`*^9, 
   3.827703269932393*^9, 3.827703763462755*^9, 3.8600645801697226`*^9},
 CellLabel->"Out[2]=",ExpressionUUID->"2f404963-ee49-4fdc-9306-3186c7817252"]
}, Open  ]],

Cell[TextData[{
 "Set ",
 Cell[BoxData["\"\<RelativeWidth\>\""], "InlineFormula",
  FontFamily->"Source Sans Pro",
  FontSize->0.9428571428571428 Inherited,ExpressionUUID->
  "db50f608-5111-49eb-bdb1-32d0456e904a"],
 " to ",
 Cell[BoxData[
  TagBox[
   ButtonBox[
    StyleBox["True", "SymbolsRefLink",
     ShowStringCharacters->True,
     FontFamily->"Source Sans Pro"],
    BaseStyle->Dynamic[
      FEPrivate`If[
       CurrentValue["MouseOver"], {
       "Link", FontColor -> RGBColor[0.854902, 0.396078, 0.145098]}, {
       "Link"}]],
    ButtonData->"paclet:ref/True",
    ContentPadding->False],
   MouseAppearanceTag["LinkHand"]]], "InlineFormula",
  FontFamily->"Source Sans Pro",
  FontSize->0.9428571428571428 Inherited,ExpressionUUID->
  "41f87202-6331-4cd6-a044-9c9be57afe5d"],
 " if you don't want to count the leading whitespace:"
}], "Text",
 TaggingRules->{},
 CellChangeTimes->{{3.7434500900878944`*^9, 3.743450141226366*^9}},
 CellID->455792447,ExpressionUUID->"c804d872-38ae-49a2-9a94-274e91f5cb97"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ReadableForm", "[", 
  RowBox[{"expr", ",", 
   RowBox[{"\"\<IndentSize\>\"", "\[Rule]", "12"}], ",", 
   RowBox[{"\"\<PageWidth\>\"", "\[Rule]", "45"}], ",", 
   RowBox[{"\"\<RelativeWidth\>\"", "\[Rule]", "True"}]}], "]"}]], "Input",
 TaggingRules->{},
 CellChangeTimes->{
  3.70999648737139*^9, {3.7434499557199063`*^9, 3.7434499616677275`*^9}, {
   3.743450205483447*^9, 3.7434502160471315`*^9}, {3.7434503462682424`*^9, 
   3.7434503510760994`*^9}, 3.8275312461253004`*^9},
 CellLabel->"In[3]:=",
 CellID->57152793,ExpressionUUID->"93a5c9bd-c269-4102-9450-e6e3b535a3e8"],

Cell[BoxData[
 StyleBox[
  RowBox[{"<|", "\n", "            ", 
   RowBox[{
    RowBox[{"\"\<Test1\>\"", " ", "->", " ", 
     RowBox[{"<|", "\n", "                        ", 
      RowBox[{
       RowBox[{"\"\<Name\>\"", " ", "->", " ", "\"\<First\>\""}], ",", "\n", 
       "                        ", 
       RowBox[{"\"\<Data\>\"", " ", "->", " ", 
        RowBox[{"{", " ", 
         RowBox[{
         "1", ",", " ", "2", ",", " ", "3", ",", " ", "4", ",", " ", "5", ",",
           " ", "6", ",", " ", "7", ",", " ", "8", ",", " ", "9", ",", " ", 
          "10"}], " ", "}"}]}]}], "\n", "            ", "|>"}]}], ",", "\n", 
    "            ", 
    RowBox[{"\"\<Test2\>\"", " ", "->", " ", 
     RowBox[{"<|", " ", 
      RowBox[{
       RowBox[{"\"\<Name\>\"", " ", "->", " ", "\"\<Second\>\""}], ",", " ", 
       RowBox[{"\"\<Data\>\"", " ", "->", " ", 
        RowBox[{"{", " ", "}"}]}]}], " ", "|>"}]}]}], "\n", "|>"}], "Input",
  StripOnInput->True,
  ShowAutoStyles->True,
  ShowStringCharacters->True]], "Output",
 TaggingRules->{},
 CellChangeTimes->{
  3.743449965935601*^9, 3.743450217114098*^9, 3.7434503527190485`*^9, 
   3.7483689828763027`*^9, {3.8275312315437365`*^9, 3.8275312538200703`*^9}, 
   3.8277029711952844`*^9, 3.8277032731793194`*^9, 3.8277037662726507`*^9, 
   3.860064584810342*^9},
 CellLabel->"Out[3]=",ExpressionUUID->"816172e1-edb8-4efe-948a-c0fadc3b0fbd"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Applications", "Subsection",
 TaggingRules->{},
 CellLabel->"In[4]:=",
 CellID->91221735,ExpressionUUID->"7ad7367b-5c1f-4195-b09a-85bf21eb37b3"],

Cell[CellGroupData[{

Cell["Copy Formatted Expressions", "Subsubsection",
 CellChangeTimes->{{3.860066660743928*^9, 
  3.860066666682889*^9}},ExpressionUUID->"80bc1139-700a-4b0e-951f-\
89aa02ff6220"],

Cell["\<\
Copy expressions to the clipboard that will be formatted nicely when pasting \
into email, etc.:\
\>", "Text",
 TaggingRules->{},
 CellChangeTimes->{{3.7434476563575773`*^9, 3.743447676101987*^9}, 
   3.763315097367962*^9},
 CellID->174724155,ExpressionUUID->"fa4a8cfc-e5a9-459b-8e7c-abc4a68f3244"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"SystemInformation", "[", "\"\<Small\>\"", "]"}], "//", 
    "ReadableForm"}], "//", "CopyToClipboard"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"Paste", "[", "]"}]}], "Input",
 TaggingRules->{},
 CellChangeTimes->{
  3.70999648737139*^9, {3.7434476793798885`*^9, 3.743447691606524*^9}, {
   3.7483689923240213`*^9, 3.748368992824011*^9}},
 CellLabel->"In[1]:=",
 CellID->45656822,ExpressionUUID->"8ad6cd2d-bd18-447c-bdc0-de02cfeb2291"],

Cell["\<\
{
    \"Kernel\" -> {
        \"SystemID\" -> \"Windows-x86-64\",
        \"ReleaseID\" -> \"13.1.0.0 (7716157, 2022042613717)\",
        \"CreationDate\" ->
            DateObject[ { 2022, 4, 26, 4, 0, 38 }, \"Instant\", \
\"Gregorian\", -4. ]
    },
    \"FrontEnd\" -> {
        \"OperatingSystem\" -> \"Windows\",
        \"ReleaseID\" -> \"13.1.0.0 (7716157, 202204267844)\",
        \"CreationDate\" ->
            DateObject[ { 2022, 4, 26, 3, 24, 56 }, \"Instant\", \
\"Gregorian\", -4. ]
    }
}\
\>", "Input",
 PageWidth:>-10000.,ExpressionUUID->"fec8927c-10f9-4657-95ab-9371ca3517b7"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Readable Log Files", "Subsubsection",
 CellChangeTimes->{{3.8600666533329787`*^9, 
  3.8600666556285305`*^9}},ExpressionUUID->"e7399675-d8bc-4d99-a683-\
0fb0a309acfa"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"DeleteFile", "[", "\"\<log.txt\>\"", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"$Line", "=", "0"}], ";"}]}], "Input", "Excluded",
 CellChangeTimes->{{3.860064695683805*^9, 3.860064703152935*^9}},
 CellLabel->"In[1]:=",ExpressionUUID->"e23108b7-8e9f-4353-8d6f-7b587eccdbfa"],

Cell["Create readable log files with lots of metadata:", "Text",
 TaggingRules->{},
 CellChangeTimes->{{3.743447443853924*^9, 3.7434474521416745`*^9}, {
  3.7434487559187393`*^9, 3.743448767989377*^9}},
 CellID->929202039,ExpressionUUID->"0a0c94ee-20d2-4633-83c3-d3e790fb5c8e"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"logEvent", "[", "event_", "]"}], ":=", "\[IndentingNewLine]", 
   RowBox[{"PutAppend", "[", 
    RowBox[{
     RowBox[{"ReadableForm", "[", 
      RowBox[{
       RowBox[{"<|", 
        RowBox[{
         RowBox[{"\"\<Time\>\"", "\[Rule]", 
          RowBox[{"DateString", "[", "]"}]}], ",", 
         RowBox[{"\"\<Event\>\"", "\[Rule]", "event"}], ",", 
         RowBox[{"\"\<Metadata\>\"", "\[Rule]", 
          RowBox[{
           RowBox[{
           "ResourceFunction", "[", "\"\<SessionInformation\>\"", "]"}], "[", 
           "]"}]}]}], "|>"}], ",", 
       RowBox[{"\"\<FormatHeads\>\"", "\[Rule]", "None"}], ",", 
       RowBox[{"PageWidth", "->", "70"}]}], "]"}], ",", "\"\<log.txt\>\""}], 
    "]"}]}], ";"}]], "Input",
 TaggingRules->{},
 CellChangeTimes->{
  3.70999648737139*^9, {3.743447402260165*^9, 3.7434474768619375`*^9}, {
   3.7434475264874563`*^9, 3.7434475318062973`*^9}, {3.7483690241621113`*^9, 
   3.7483690265040493`*^9}, {3.827531318491132*^9, 3.827531407774499*^9}, {
   3.8275314439084463`*^9, 3.827531444067442*^9}, {3.860064669293832*^9, 
   3.860064692226153*^9}},
 CellLabel->"In[1]:=",
 CellID->56575402,ExpressionUUID->"4823d885-c654-43e3-aafd-e90597c828ce"],

Cell[BoxData[
 RowBox[{"logEvent", "[", "\"\<A thing just happened\>\"", "]"}]], "Input",
 TaggingRules->{},
 CellChangeTimes->{
  3.70999648737139*^9, {3.7434475015402007`*^9, 3.7434475093029685`*^9}},
 CellLabel->"In[2]:=",
 CellID->690300149,ExpressionUUID->"22b97632-ec04-4665-b48e-9a948cd3c88a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FilePrint", "[", "\"\<log.txt\>\"", "]"}]], "Input",
 TaggingRules->{},
 CellChangeTimes->{
  3.70999648737139*^9, {3.7434473418509693`*^9, 3.7434473457658525`*^9}},
 CellLabel->"In[3]:=",
 CellID->1043120432,ExpressionUUID->"e02498e0-b715-4ae9-85c1-46b32326db21"],

Cell["\<\
<|
    \"Time\" -> \"Wed 27 Apr 2022 12:11:49\",
    \"Event\" -> \"A thing just happened\",
    \"Metadata\" -> <|
        \"$ByteOrdering\" -> -1,
        \"$CloudBase\" -> \"https://www.wolframcloud.com/\",
        \"$CloudVersion\" -> \"1.62 (April 8, 2022)\",
        \"$CommandLine\" -> {
            \"WolframKernel\",
            \"-wstp\",
            \"-noicon\",
            \"-linkprotocol\",
            \"SharedMemory\",
            \"-linkmode\",
            \"connect\",
            \"-linkname\",
            \"rn3uy_shm\"
        },
        \"$Context\" -> \"Global`\",
        \"$ContextPath\" -> {
            \"DocumentationSearch`\",
            \"ResourceLocator`\",
            \"RH`\",
            \"RHLoader`\",
            \"NaturalLanguageProcessingLoader`\",
            \"System`\",
            \"Global`\"
        },
        \"$CreationDate\" ->
            DateObject[
                { 2022, 4, 26, 4, 0, 38 },
                \"Instant\",
                \"Gregorian\",
                -4.
            ],
        \"$EvaluationCloudObject\" -> None,
        \"$EvaluationEnvironment\" -> \"Session\",
        \"$KernelID\" -> 0,
        \"$Line\" -> 2,
        \"$MachineName\" -> \"galapagos\",
        \"$MachineType\" -> \"PC\",
        \"$MessageList\" -> { },
        \"$Notebooks\" -> True,
        \"$OperatingSystem\" -> \"Windows\",
        \"$ParentLink\" -> LinkObject[ \"rn3uy_shm\", 3, 1 ],
        \"$ParentProcessID\" -> 0,
        \"$ProcessID\" -> 28540,
        \"$ProcessorType\" -> \"x86-64\",
        \"$ReleaseNumber\" -> 0,
        \"$RequesterAddress\" -> None,
        \"$RequesterWolframID\" -> \"richardh@wolfram.com\",
        \"$RequesterWolframUUID\" -> \"fae3ac93-4e18-4708-9aba-2dfa705f2337\",
        \"$SessionID\" -> 34028886145147528536,
        \"$System\" -> \"Microsoft Windows (64-bit)\",
        \"$SystemCharacterEncoding\" -> \"WindowsANSI\",
        \"$SystemID\" -> \"Windows-x86-64\",
        \"$UserAgentString\" -> None,
        \"$UserName\" -> \"rhennigan\",
        \"$Version\" -> \"13.1.0 for Microsoft Windows (64-bit) (April 26, \\
2022)\",
        \"$VersionNumber\" -> 13.1,
        \"$WolframID\" -> \"richardh@wolfram.com\",
        \"$WolframUUID\" -> \"fae3ac93-4e18-4708-9aba-2dfa705f2337\",
        \"DefinitionCreationDate\" ->
            DateObject[
                { 2018, 10, 11, 22, 14, 23.1626366 },
                \"Instant\",
                \"Gregorian\",
                0.
            ],
        \"HTTPRequestData\" -> None,
        \"NotebookInformation\" -> {
            \"FileName\" ->
                FrontEnd`FileName[
                    {
                        $RootDirectory,
                        \"H:\",
                        \"Documents\",
                        \"ResourceFunctions\",
                        \"Definitions\",
                        \"ReadableForm\"
                    },
                    \"Examples.nb\",
                    CharacterEncoding -> \"UTF-8\"
                ],
            \"FileModificationTime\" -> 3.860063169*^9,
            \"WindowTitle\" -> \"Examples.nb\",
            \"MemoryModificationTime\" -> 3.860064707128766*^9,
            \"ModifiedInMemory\" -> True,
            \"StorageSystem\" -> \"Local\",
            \"DocumentType\" -> \"Notebook\",
            \"MIMEType\" -> \"application/vnd.wolfram.nb\",
            \"StyleDefinitions\" -> {
                NotebookObject[
                    FrontEndObject @ LinkObject[ \"rn3uy_shm\", 3, 1 ],
                    21
                ]
            },
            \"ExpressionUUID\" -> \"0c95abc5-f093-4791-9e3f-7a08a3411123\"
        },
        \"NotebookTaggingRules\" -> <|
            \"InformationPopupMenuItemAdded\" -> True,
            \"AutoUpdate\" -> True,
            \"NotebookIndexQ\" -> True,
            \"NotebookLastIndexed\" ->
                DateObject[
                    { 2022, 4, 27, 12, 2, 11.3449166 },
                    \"Instant\",
                    \"Gregorian\",
                    -4.
                ],
            \"NotebookUUID\" -> \"0c95abc5-f093-4791-9e3f-7a08a3411123\"
        |>,
        \"SessionTime\" -> Quantity[ 0.41221083333333336, \"Hours\" ],
        \"Stack\" -> {
            StackComplete,
            logEvent,
            PutAppend,
            ReadableForm,
            Association,
            List,
            Rule,
            \\
FunctionRepository`$8d26141d7e37414189b2e4b3b7bcfd3a`SessionInformation
        },
        \"Timestamp\" ->
            DateObject[
                { 2022, 4, 27, 16, 11, 49.057183 },
                \"Instant\",
                \"Gregorian\",
                0.
            ]
    |>
|>\
\>", "Print",
 TaggingRules->{},
 CellChangeTimes->{
  3.8277030321594553`*^9, 3.8600646216646585`*^9, {3.860064684278085*^9, 
   3.860064709073184*^9}},
 CellLabel->
  "During evaluation of \
In[3]:=",ExpressionUUID->"5861f3d7-46e0-4887-aa5b-764f793b5d8f"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Generate Formatted Packages", "Subsubsection",
 CellChangeTimes->{{3.860066683995502*^9, 3.860066687975517*^9}},
 CellLabel->"In[2]:=",ExpressionUUID->"1fdf99ee-f70e-4fbd-a2df-6cf466dfc92f"],

Cell[TextData[{
 Cell[BoxData["ReadableForm"], "InlineFormula",
  FontFamily->"Source Sans Pro",ExpressionUUID->
  "5441a9e3-6774-450d-9d0f-d43f9a3d7909"],
 " can be used to convert a ",
 Cell[BoxData[
  TagBox[
   ButtonBox[
    StyleBox["FullDefinition", "SymbolsRefLink",
     ShowStringCharacters->True,
     FontFamily->"Source Sans Pro"],
    BaseStyle->Dynamic[
      FEPrivate`If[
       CurrentValue["MouseOver"], {
       "Link", FontColor -> RGBColor[0.854902, 0.396078, 0.145098]}, {
       "Link"}]],
    ButtonData->"paclet:ref/FullDefinition",
    ContentPadding->False],
   MouseAppearanceTag["LinkHand"]]], "InlineFormula",
  FontFamily->"Source Sans Pro",ExpressionUUID->
  "90204491-3c48-44da-b592-8a4aa5599196"],
 " into a formatted package notebook. Here's an example from a resource \
function:"
}], "Text",
 TaggingRules->{},
 CellChangeTimes->{{3.827840564502653*^9, 3.8278405746783504`*^9}, {
   3.827840693497822*^9, 3.8278406956647797`*^9}, {3.827841458067139*^9, 
   3.8278414747436485`*^9}, {3.827841776912674*^9, 3.827841841195763*^9}, 
   3.8278420250122995`*^9},
 CellID->299842480,ExpressionUUID->"ce254912-b194-47e2-bcf8-5a5c72e9f355"],

Cell[BoxData[
 RowBox[{
  RowBox[{"defString", "=", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"$ContextPath", "=", 
       RowBox[{"Prepend", "[", 
        RowBox[{"$ContextPath", ",", 
         RowBox[{"ResourceFunction", "[", 
          RowBox[{"\"\<Stereogram3D\>\"", ",", "\"\<Context\>\""}], "]"}]}], 
        "]"}]}], "}"}], ",", 
     RowBox[{"ToString", "[", 
      RowBox[{
       RowBox[{"FullDefinition", "[", 
        RowBox[{"ResourceFunction", "[", "\"\<Stereogram3D\>\"", "]"}], "]"}],
        ",", "InputForm"}], "]"}]}], "]"}]}], ";"}]], "Input",
 TaggingRules->{},
 CellChangeTimes->{{3.827841679329571*^9, 3.8278417652480154`*^9}, {
   3.8278418124456177`*^9, 3.8278418140955477`*^9}, 3.860074000455683*^9},
 CellLabel->"In[1]:=",
 CellID->624632003,ExpressionUUID->"188c597c-d41c-4ada-b3b5-3ff9ab713c11"],

Cell["View the default formatting:", "Text",
 TaggingRules->{},
 CellChangeTimes->{{3.8278418614611416`*^9, 3.8278418708998594`*^9}},
 CellID->309368586,ExpressionUUID->"e2f57641-675d-4f3a-9d29-20f5ec70a070"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Snippet", "[", 
  RowBox[{"defString", ",", "20"}], "]"}]], "Input",
 TaggingRules->{},
 CellLabel->"In[2]:=",
 CellID->504190528,ExpressionUUID->"2af524f5-2322-4106-936a-7dd54358e3fd"],

Cell[BoxData["\<\"Stereogram3D[gfx_, opts:OptionsPattern[{Stereogram3D, \
Graphics3D, Rasterize,\\nGeoGraphics}]] := Stereogram3D[gfx, Automatic, opts]\
\\n \\nStereogram3D[Graphics3D[items_, gfxOpts___], \
form_,\\nopts:OptionsPattern[{Stereogram3D, Graphics3D, Rasterize, \
GeoGraphics}]] :=\\nStereogram3D[Flatten[{items}], form, opts, gfxOpts]\\n \
\\nStereogram3D[items_List, form_, opts:OptionsPattern[{Stereogram3D, \
Graphics3D,\\nRasterize, GeoGraphics}]] := Module[{vp, va, vv, vc, div, size, \
view, res}, vp =\\ntoViewPoint[OptionValue[ViewPoint]]; va = \
toViewAngle[OptionValue[ViewAngle]];\\nvv = \
toViewVertical[OptionValue[ViewVertical]]; vc \
=\\ntoViewCenter[OptionValue[ViewCenter]]; div \
=\\ntoDivergence[OptionValue[Divergence]]; size \
=\\ntoImageSize[OptionValue[ImageSize]]; view = Sequence[vp, va, vv, vc, div, \
size];\\nres = Catch[stereogram3D[form, items, view, opts], $tag]; res /; res \
=!= $fail]\\n \\nStereogram3D[other_, form_, \
opts:OptionsPattern[{Stereogram3D, Graphics3D,\\nRasterize, GeoGraphics}]] := \
Module[{tryShow}, tryShow = Quiet[Show[other]];\\nIf[MatchQ[tryShow, \
Blank[Graphics3D]], Stereogram3D[tryShow, form, \
opts],\\nStereogram3D[Graphics3D[other], form, opts]]]\"\>"], "Output",
 TaggingRules->{},
 CellChangeTimes->{3.827841873336788*^9, 3.8278419137905865`*^9, 
  3.860064746457588*^9, 3.86007400649755*^9},
 CellLabel->"Out[2]=",ExpressionUUID->"68ecc43e-a582-44c3-acf0-abd130855af2"]
}, Open  ]],

Cell[TextData[{
 "Create formatted cells using ",
 Cell[BoxData["ReadableForm"], "InlineFormula",
  FontFamily->"Source Sans Pro",ExpressionUUID->
  "98b93272-a595-4443-a5f6-1db38eea2879"],
 ":"
}], "Text",
 TaggingRules->{},
 CellChangeTimes->{{3.827841896518099*^9, 3.8278419081757708`*^9}},
 CellID->62365808,ExpressionUUID->"1a18f1c6-f960-44e1-b990-b816494ba2a1"],

Cell[BoxData[
 RowBox[{
  RowBox[{"cells", "=", 
   RowBox[{"Cases", "[", 
    RowBox[{
     RowBox[{"ToExpression", "[", 
      RowBox[{"defString", ",", "InputForm", ",", "HoldComplete"}], "]"}], 
     ",", 
     RowBox[{
      RowBox[{"e", ":", 
       RowBox[{"Except", "[", "Null", "]"}]}], "\[RuleDelayed]", 
      RowBox[{"Cell", "[", 
       RowBox[{
        RowBox[{"BoxData", "[", 
         RowBox[{"ToBoxes", "[", 
          RowBox[{"ReadableForm", "[", 
           RowBox[{"Unevaluated", "[", "e", "]"}], "]"}], "]"}], "]"}], ",", 
        "\"\<Code\>\""}], "]"}]}]}], "]"}]}], ";"}]], "Input",
 TaggingRules->{},
 CellChangeTimes->{{3.8278410439944344`*^9, 3.827841073673552*^9}},
 CellLabel->"In[3]:=",
 CellID->22359161,ExpressionUUID->"87815a85-bf62-4c98-9e09-e499227d3306"],

Cell["Display in a package notebook:", "Text",
 TaggingRules->{},
 CellChangeTimes->{{3.827841919366421*^9, 3.827841923175308*^9}},
 CellID->60680049,ExpressionUUID->"8b6f14bd-2986-4676-8997-018389a16301"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"NotebookPut", "@", 
  RowBox[{"Notebook", "[", 
   RowBox[{"cells", ",", 
    RowBox[{"StyleDefinitions", "\[Rule]", "\"\<Package.nb\>\""}]}], 
   "]"}]}]], "Input",
 TaggingRules->{},
 CellChangeTimes->{{3.827840705133477*^9, 3.8278407433873396`*^9}, 
   3.8278410864931717`*^9},
 CellLabel->"In[4]:=",
 CellID->223900780,ExpressionUUID->"7cba6660-dcb1-46c9-9cab-3d3f4a920392"],

Cell[BoxData[
 TemplateBox[{
   FrontEndObject[
    LinkObject["hwsf4_shm", 3, 1]], 284, 
   "FrontEndObject[LinkObject[\"hwsf4_shm\", 3, 1]]", "284", 
   "\"Untitled-25\""},
  "NotebookObjectUnsaved"]], "Output",
 TaggingRules->{},
 CellChangeTimes->{3.827840751577096*^9, 3.8278411135553493`*^9, 
  3.8278413173683233`*^9, 3.827841484376341*^9, 3.82784193049909*^9, 
  3.8600647559430265`*^9, 3.8600740124153566`*^9},
 CellLabel->"Out[4]=",ExpressionUUID->"3eb51a83-c8ea-4054-a17e-63041e888d41"]
}, Open  ]],

Cell[BoxData[
 PanelBox[
  GraphicsBox[
   TagBox[RasterBox[CompressedData["
1:eJzsvQdcXEt2Jj5re/Y/43UYe5I967U9a689Xttje3bsmTfvSe8pknNqgshJ
iCQkgXIWCBACASJnBBJIIBAgEEiIDAIEiIzIOTahyfn/3VvQajXdDUpPT7z6
fkfohrp165yqOueruvdW/9zYTtX8977zne8c+R7+qBo57XJwMDqh9gPsaNge
OWhha2YqY3vUzMLM4bfGv4+DlUg7gX/MtpahqaqekdoBKlSoUKFChQqVT1LA
ZFg+Y7hfWVNalUOFChUqVKhQofIpCpgM+Ay4DbZl1bX5IrcFkaVChQoVKlSo
UPlmCJgMma4RojTSGjqbykcvPBUqVKhQoUKFChFxlEZFRUNVWZ0RsqGmqaqm
tbarQo6rf/TCU6FChQoVKlSoEBGiNHLs/AzoSsVffL/hR9+t/dEf1P3w9+t/
9v3aP/oOBBvYrfvRH+BUxU+/r6asLq2huy2fQMnROSgqVKhQoUJlXRS09BS0
dIX+yn+AWIn4uzEEy2vqbuVacZSm4Ud/0Pkn32n/4e91/Pi7zd/5zpC2wpCu
EjY6fvwHHT/8PZxq/OHv8ykN7rVObHQk31cgJbm7lozYxBycFaWsrqCyQrsi
jcMvEjbW7S+inDJqHGk1GEFHTp2zT0ldWu2tqkNDB7UsqKM8U+kS7C/BAm8m
QrbdYmI5tsBonHIChYRV2eb62kEqVKhQofLtFMTHHdIKO2UUXxNpxT2Kau93
BgC5IU+EYMEYjYNfySnLqHE2vVwcpan9yX9v+5Pfa/ubP519Vsh1vrw0PLQ0
OsK9cmmmtKjt53/W9se/V/fj7xJKI6/O2S2nIqXGzmyoaX4lq7yRDKAkMjio
prlDSmE/s8Fhy6ajrGMgNtxr6Kro6AvFaATf/Yqqe5Q0SahldpXIrmiT4riU
ouqX8qqyDOvT3iOvtFtRk5TzS6FyqnHktQ4oax+QVdXcr6qjf9BGVVNH5o1Z
jY6sqsYXUgqMNdYKoP2VjMIeZS0hbiAjYAGFd6MNxLZy6lo7pRT2qXI2JSGg
K/IanN3yKtJslcGeO6QVd0gp8q/F330KKmiuX0grSqnS98CpUKFC5dsrcuzQ
W1XXMCQqJigiKjgimkhgeGRI1K2jp8/tUVCT19jSFMrm92L5zJGTZ81sDoPD
EFaDUf8+ZY0r7tdVdA1FTnQIijhKUwdK873vtP70e3NV5dNp9xe7Oxe7OqZS
E+ZeVLT+7Ps4Vf8TltKoa+9XNzjlek1fT3efioactuXV69fVORwZDPM1+bNS
OoraBkocbVntg36REYZ6urJa+ioc7X0c87T8QjtjvT0q2oocdqKAKKWpJ6+m
rmx8MacgXZujsl9NZ+24OufzvTL6DmcdDh/aq6QJLoTdA4fJroaIUK6hu19B
Rd/psqvzRVlF1d3K2kev+Jx2stmtoCrHsb7m66WpjXKys2ecA7tl5I94RafG
hXyxR/56XMajxBg9bR0ZdrKCTEMxumgyxImZ6lnfZWcz1o6DNcmqqMuZHAuN
DNfX5exX1QZz2Kuic8Uv+ridKXiXIjMZspZYkaOvrK27V90wKbfouJXxXlUd
RS1dksnanAm7vX4vXXau6ZWJBMtDspLSMPWOiLIw0t+nwlEgN2Ln7tYmWwQa
jJSC0g5FXccLV7R1tfcqaujYnw2Oiom4FWpieGCvMkdBU2efopblSbeQyKjo
8GDdAzp7VbTpXA0VKlSofGOFPKkRkveY+R4FVQu7o/eSHmgamprZOpgcsjOx
ttc1PXjmytXwmDtfSMkj4ryve+1VUre0O5qTl29kZbtLXgU5fymrFBl7JzLm
9n5ljU2H2KIpjZpWzR/+twGFLxd7uhfaW4ePWg072uDvyOkjCx1ti709A8q7
6/7wO2pqWjLqWl9pmKUVFR8z0/9KXlnO8FRlTbmhnsYX0kq75JR2Sstj7P/5
PtVrt7I8Thv8p4zhjWB/eTnVq1GZnmcM/kPGIKe8wsH0wC4FtZ3SCrhECjRA
U2ePvMoXe/ft4ZwuLs/WYSgN87QIfEZaQ985JLl7bPq298kvZFTktAycg5O7
R6fveJ/8XFZNQXO9Bvm1qaErpaCgcdS3riqXo67wO3m9Jx0zdY9Cv9jxle7Z
kLrnORrKsjtklL+UUfxKQWOXjLzjzbjH94J+t98ouzhXTWH/53Jqu2QVv5RV
kVLV/EpGEcl2KWqAR+2WU/pSThkFRrH3KpANDeaOGroyikpyh6+vrK7GX3f6
Qk5dTkVF6ZDr9OpqlJvNDhmVPbhQRnGvstYX+5Quhab7O1v+6x6trPLKIyac
X++W3a2oIQdGqqqxU0phh7SilJq2jIo6qvJLWcUd0kr7lNS/lFFgpk1A8NTW
yrNXWfOLfYoXgh8GXLX61V5td39/Y4MDIJZfMVOCCshQSkl1p4zSDhklMtkC
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
TSltu9THj80NtfYoa+5TNo54XJL74LYmR11KXUdGVUtaVVNBx8TQ8tARl7An
mYmaGmrM0y76Og0VKlSofMOEsBrhD5FkFL+UVXqft2ApTWBY5Fdyyso6+gpa
uoocvf3KmpaHj30ISiOjxkH5Y+7E+4eEHTC3yssvMLay5b8tLFkkvR78/e+0
/uS/g8Csrq6O3XAd872GjcWOttaf/n/814NlNXV2KOjGF1T7nbH65Wdfco4H
VhQmy6nrPS6rdDDW3qlpmfu83FhLN/Dh84CLxv8uY5BfWUF2A5ldw5xnRUeO
XimqKHewNtYwtFBQ03GLzc665/Or33yu6RTUXFvA0VDcKcu87rJbUUNeS+9L
KeUroSmRfhcIpSG7UX4Xdwg8eNotp7STTS9Lpt1U1fdr2z6taq17nqmpLKtx
1KNhYCwvznevikXBi0oHc+1ffrbnVFhqcpi7rUv448SQXYoHHxfkcJT22XvH
ZSdH/fp3UmFPGpJuHv4/O7WL62qsjE1u5Zd52Jv/Wk7vfkn5NXuzX8vqYsPV
1pxQGrVTfuU5SVIyarGFDT1NpdpKylciHntdsfO49zwt6Njf79Asrq87qKfr
mVAa7WH9L7s1s8orT1sZfqZk+Ki4xOnoxdzyilOHzVQNLDQ4WsbOQYVZ96V3
7jJyDSMbptfC0+7dCrxTmBZ28u9/p15YX2+tr3stviTG0+6fd2lklpSccLqc
XVJsbaT2m90ySjYejS8rVXb/6qDnvcKM2L37FeSYN5B15NTU92nZPnyabWms
+ZkMJyS1MD7wyq9+u/NzaWVQF9UDRkocfXkNrd/s3LlT51x1XamxrvJeVfo1
NxUqVKh8E0V+/TMQQXlfUzSy65TG0v6YT0Dwv3+xa5e8CqFMv9klrWduFRge
9d4pzX5ljajYO+HRMbgXmIyZzeGcvHxTa/t9SuqbPk2T9BH3HzMfcc8U5g47
Oiy0tSx0tA0fdZgpymv733/O/4hbRlNPSkFZ5+jV1Kws75tBaVmPLzpafKFi
kl5QbGfA2alhnlFYbM5RP+geW5L7wMruSHJugaW2xkG39d2cfEs97aM3Ex4m
RfuEx189Z7P3wNHHhWUhISFhCXl1pY80NVRkNA8oajFvCKOOvpJWuRCQEOx9
dqcsQ2m+klbGboj3OezyXw8mnwjx1/+R19DeIaseldtS8Shir5TMbo1Dz7u4
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
xZjve5KRJyJbtmCTNWl7pVXdUDJ3j7q+6eXlV/NR4gb0i4vLIu7CXthSmlXd
OsFeK3QxG3IWev2djjtedvNwd7nsGT4ryMpWx0x1lMo6B44YyWe2Tm/IgQ1Y
S/2BJ04cvXAVZT188VrP5NJG4iNk/yXGdJOW2jIZbXPreQ4dMzcr7pkV1FTC
3NEiyzrCzltoWp2CkeLSK1ZFTzYxcbXmwXWOw1WyJ3hK0ERdVU/L6rmrqzOO
5qa57VMr4g0uYkaFzXa5u1hORsHDw8PW0jg4vVLg5ErjI19N24ts3a6sHQIJ
rMl99qKPvXVOac0Ao+/i2k1f8T5RWGIz8T2i45lSwyQeKNr9pVRhN0M4HwWd
Oe9z+9qpIw9rRwQ0XJsLIlWXG+J48BTTfeYXFtdLuLXZTlKk3lITy5N9hK3w
6g+bHWyeZIj9epLlzvxIVXNH5lavsqWTUBQUFBTCEElpuh+HGp4OW0+yMDA0
vDjTZ22uX8ll9vva2zoGxjdmRdx479MIg5Mh/GP4N97b3tLeE3PVwTe+cm56
fHRisqMwSE7OoKZncHllcSOlmaxPMjRxnGSC7MIsb6SlvZtf2Lbmls5+LolM
Q51tHX1jbJkXluenenr7mvOC5eT0XnQPLAllyxZspPD2gWM3BQs8N8HMJk2x
oQPBaHlhpqdvcHoW+8uDnW1dwwzf6G9r6RmZIulH+9qbmlqmcfs53hUTGSfv
9GHerNDzJ5bBLQecPngm6OnaoeUFpsBLU60trZMst7K3NKjqGTpvfyCnk5n2
EsyAfXC25H/i4En/x/ziz7OvVkyODg6OTa8uzbY0NbWz9l+an8eVE4NdrR3d
bBZTJ+yMsxt6W9o659gbjwwNTc8zN58d7W1paR1nj3a0tLT3Dm+M7iT43zhi
GV4+QY5MT8+sVcvSwuT07MrSbGtTU2vPMA41ZPhZnvddWlyYmWHm3JYW5mbm
mGmN8YHOpqZmHky4MHXDTsnG+e7wxDR3eGhqjrHy4tQQDD7OztItzKOlrQx2
tfeszcC8DrYlLDZlaZmcYrZa0uTVzAZm59qa6pu7BpkD2aFmp66xJptubWkZ
mwUPnPY7omZxNqZvYDDgqMrBC7ED7PzYWH9HW+fgmo6Tg80tLdypOaG7LS8x
xatIcDN2QgtZ6Xoa9Mu//j++j1px8LKlemhe+zh3eHJmYXFpeWl2oqW1g53B
YUw+zxi2PSfG5dTVRJJVXwfO9zOnF2Zn5hfYSUfm3RhU8szs9Pzi64YnlKar
SNvwKJccWWi20jOoH2c7zkBXS1sPk+ezOONjl9EGlpdXp0f7UL9f0+NVCgoK
ik8KIilNf16Ussnppqamxtaexdn+I/Y2zQN99mbaTbOrz5K8j524esLJKam8
fXUtgq+BMIfBwhhl45O4tqm1C443PzXEysbRw89b4bP/DM4ZaEj3PRuYkBNz
6jef7fW4nTbLDK4FnyuxlKYhydD8zNLqigPnd7aX/D3OmNl73l1anAxxPePm
6+vo4je1tFqa6nfsuPOpYw6ptf3tj313KagExSXG3LD97e/2ut1KmVl+PVu2
YGNl95QNjtVBqcY2xPnqpwn2tvYeHh5mxodquCttGT57FBT8EzKqH9+SltH0
9/c+ZGZw+rS7r5eHoZFBWlXfylTbTR+fsGDXk27RvP4aY5nfqJmcyK7tWV57
yrOmAENouJVamka9KMES89YoirI03upy8th1Lw/7S/5jM7NHzHUruobO2ug8
7Xid0rBTDUvDpVoqxv0MlZlobmrqYyL+wmmT/dpHndOeNT/PTfQJDTvheDi9
omeqPmX3bjnv8HC348Z27hErq8tHOb8xPuXlccVO9ZgX6M5Ze8OyoZWa3LhD
Nkc9PK6GJ+clB3s4e3qfdPHuGJ5fL+8aCKXxczI/HZaF2hsY510/YRia24Yk
6UGnr4Q+anie4R0cdsbJ/mFFV8fTIFv3iMrscLur0biq8K6bg/f9ldkRfx/v
sDCvY5eCxkeabZU/l9NzyK5quepkkdMz3/n8kd2hQ4zBDcyedc1yS2P2yMgF
BfoaG+gkVfQIvz60Rmke65ifwdHZF3e1TY9lFz7xDwo9f9w+ubSjryTa4Pj1
lZVRzzNH3Dy9Dp+/0TvUfkx9p7SWw73UNCftL2Q4NillHdX5dw87nHE+4RiW
XTfUUnb+5HE/Hw+vGGaG8LWXc1YY5Re687V0LUC4Il2On7lw0u5qxOrKkKmm
4eDCqucJk9zWsUAnJR0HFw/X40YnPJCspeS+1UFbD4+bRjI7bK49BMGJcDl9
8hLO254NuD/eXmhqdQr5JjrrqTvdgRKnDllXDi6sVbOAmqu9zzQ4ZsUgna2t
LS8yDmge6FpcbSmNd3A463r6WFBW3Vj1fX2na3PDtfK797gEhHlccrA84z6y
wHBNOldDQUFBwYdISjNcHPvZbmVEH8/wlOnpPgtj/Ybe3qM25uU1hXqqapXd
g/X3r+zWcmJGtssLAu6ZfcmhNO6z3UrXrl3zikmfH282UudUs4P+a5bKfpl9
dQ9cbLxTVifLzCzPsteImqUBpTE7gw1Tuf+634L/B7X19Bt66s2kpB41ssPt
4XJVBZXSzoHmlKvy5m4F929q27syxzuzDlqJypYtGK8q6Ytd8u7QKjiBN956
UEvrWR9zu9yQU0f9sxuzvNUOOWO3K91PVuc4NjqSXL5UtMdGS9K1A06Bq8sz
FUVZYSFev/nt3o7l1VR3y6BMZgS9MRDPtaYZGR4dZx6nLCwuYGS9nOJta3A6
bHhkyE5td0ja84tHzco7B0RSGvxZaH9kZnJkDJdPdAZ6Oe+T1mwcmXDU2Z/Q
wEwWDQ+2Pky4ddZcwfBq8mR98ldyhjzmylkbbY3C9sEz+rtCS3FgQV9brXZg
7Iy1Xl5j4zmLA4X9jAWWJ18a79t7t6KL2FroiRl58BR43EDZ/ASq70n9QEuG
j+6xYGR+xMiktG+BN9r1MDHmopWKwZWE9uJbdu7hZY8Czc6HIKOcWxcsXGKg
+ovSp5Ghfjt/s6NqejU/6LDb3UbkaW+smdfcct5MO72eUaE60d3iSkL389j9
qmbYbUpx0zvFzJ4tC76aTh48dRbs3rX/mofHURvbjKq+yfGejPuxV2w1tM/G
dpXftXUOKErx0rB2HxwePq+363pme+Wdc1eiynBhuo+dW1zD6uqEgZJU0oue
gYpYaa1DqbFeuvonhmdFPxJitZ89ZqT7sPT5lZPnWtprnI6cK85NMrVlnq+d
NFd90sJ1t9zn+rANu4cM1ApaOi5baCa8YMx//6rFMd+nXSUxupYubGZzx4z0
s2peXnKwLu8ZizqppWXh1d/6zOawC1vfS4Jsm9kefC6zZ+85dDdPTw/no7vl
DoxMTxzmSMWUdA423N+raFGQm3rwtMd0X/m+PUqt7AzRRTPNsIL21fVHZhQU
FBQUq2IoTU92hPHp9YdHcz1WFmZNvT0njtjkFSQr75G96e/n6+sd9zCPvPwr
RGl6c6JMzoSvZd732IBzlMzy33W1DX7YWf/Q46h/2nJPloHZKcY3i6I0vIZk
Y8vzyyvLRw7qV3BXF5eH7cx0KidWZzqLnM/am54MednwSO4raW9/f19vr3uZ
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
dtz7Ra6QQ+pERETgkmVlZYlsn2EYhmHeYVjSvBaUz8uP4m/QzpHLLB7bG3lb
mfhY42Pqa/PQ0xwaSXw+ErbPMAzDMO8yLGlKB9X+3rwbseUa2kPT/9/HzM/Z
YxiGYd55WNK8FSjUr+/ORamQs4ZhGIZhmOdhScMwDMMwTBmAJQ3DMAzDMGUA
ljTMP4LWvl53Kt56yuSqYcFMKd/InMrl8qLqMFfvQnlnd+sh1/SsjKJ+ejeL
5U2GJc0bi1J9N/dLjBD9ErXBYrp0iZKEeSko8yhhqgr2MJSvV5E2xJyjpoTx
I5hMJntRnLisqm4QfSGuhsaxb3HviAwpCssUAU/Zv82dVGlVTzN4Udm+RqQB
Lt9IJ1VvJP5fFIFm6/h3lbyYQflNgy7xf7nW1IeUsDN5A5FKoCSBkUfqnd7i
juMVwJLmzUTjMTUvp2EWbOAlaQiK52/OAl5eXrjor64RlSTm5+5/f6uac1GJ
lbwLvnC9UNNHkfH/E09NE0pBR0lO96p5uaMSVRX0cubm5qjGYoGKhNO5urri
p9dbvV/i4S/ldBgCrKysoqOj/3uExfDfr/XLTRvFFhQUZGRklJ7+3Fv2yJGQ
kGBhYYHx7qWf+lVE+O7AkqY0gT6huqp4/t5thVotiHkChp7OF5YYuef+cedg
9YP4lDQF/ttu89zhdCNU0a2AfkJfPXPmTG1tbfz19PQU87oRTeuNmCddLl++
vG7dOpoCSKAA69evX6VKlcTERClazZmRZquXJtdSZyXNNCVrhpub26BBg3r3
7t2jR48FCxZQqjTnpJIFhk6B7mXRokVJSUlSzHCgcs6bNy88PJw8pXMVmirJ
R5q6SnM6zcPJ4ePjs379epyx+CczS/FfvHjx4MGD+Tw1gqn+OvmkT13j126s
e79pnmdvx6gvpcr/+PXoJbsDUd5inoqQLB4FTR9ICB1FBh9yUOrkGhVB5al8
7td87nxQbFJVwkkLtb3gcJWPOhiVrpf/04k/Pmo7xq3vdM8z6kxlPFPorXys
M8G9/Ti3/jO9Dl+KzJEppEIoCVTaqBLz58/v3r378OHDT5w4oVlF811H1Cg6
RHOGTteUQlKVQ+WpVKnS2LFjqRJq1i4MUjVq1GjQoAE6PTHvCmrWwEJrF3ni
2CVLliCd/fv3P3z4cHZ2NjyPHTs2YMCAXr169enTZ+3atVFRUWLJRiuK09/f
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
OWXfD/ISfS/dSwPu9E4rRzvPJ+AeX/bx/Ly7exfNgH5Tgqcsf+DGL3Xpbngo
an4vIaWERKVNPgozQ/A4IvywqxsSbaXkixSb/O1qeDRBypd+csgvLMe/U/Uj
PYJy3/nTuatmQOsRfqIf7FsqeIO8LdkRI/r8XltVP0gu+tqut1YgKJBg4UFp
bt68WdvGDGGWhra10OwKqVk0tlGjRvXs2RO3PvnkkwEDBlhbW2dmZr733nsf
f/xx165daffL8uUV9ujs2bP49/vvv+/bt+/69evJ08nJCZ6fffYZPOfOnQsf
T0/P999/H579+/cHLWnZsiVX+WKUlZUV3IaGhnCHhYVxT9tucuPx5s2bb9q0
ydvbG8Ls3bs3OTmZq30UTP6//fabmZmZ/N0pZOZM7hzpZKA47fhSlV1T6dyS
pKxHsHqDt4+faroYI3oES83JUDSepLJryoqLhqP2zlh2YTPs6dprxrBuabmZ
fQxHw4oddTAftVcHIWEuVXdPW3DWYIJ0D4bqvTBXjqt1Zwi9Ha+goLB582au
0sDRu+3wQbF0795dUokaHhdLg4ISDNqmvsf6OMdTKfw6hLvDuI/YNVXn+HJQ
i8mmi/OK8iEbeA5tdBEoDQiA5kG9zLzHA7aqg6Sdc78+zFgrvygfyUHz0Ork
lStXuJqML8Vw2edW+zVDx+7XncrvSgI1KikvvR1k32W9MkqAPKeYLpLOvUgk
JWUlKDTamjL75KrH+U8e5z0ZbjxpzL6ZKDHNA3N6bR7lEcXv7OLXQNGYIcC5
c+eqC0AFAloycve0voajJxyeN8RoPJjnDX9r/qzg8puBdsg7besFFUGVHbA7
9efKgbZhLk4PPME9aKIGvAuMa/TeGRAVjsXmGyG/XZhr1/UqKBnI2clg+ITD
czNypSwa8eieXNl1vTL8Z5qtSM/JTMvJGLhNXfPgnHln1qJt9N8y9n4KvTpX
6ywN4mGUhuEtBaM0rxukOcABNh9JGDw1CDxh5OxQ2q9LKCkVbz2e2F87uKPq
P288WTo9VpsT1mlcwGi9sNOW0nn4lPSSvhODdp6WDtbKKs+cAeKSi/U2RXXR
COw3OXjV7tjkdCk5CYsqmLI6AmmNnht2z0s6hAQnGTw9pFlnt97aQYhW9LPj
j0O9i0vEB86n9NEIyMgqpQiJ0oRHF6ovDO8yzn/z0YTlO2M1lj6AgVHRCzO/
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
KE18fFJMTFx8fGJcXAK72MUudrGLXexqGFdsbHx6eoarq4uNjY2DgwN+ra2t
PT09BQLQ8ChNbGwCspyfX5CXl88udrGLXexiF7saxpWbm1dYWBgVFWVubu7u
7p6UlIRfEJuG/Y0nZOrf+fgEAwMDAwMDw2sDnRgcFxd348aNjIwMsBpbW9uG
TWnYZysZGBgYGBgaHsBnQELKy8tDQ0MvXbrk4eHh6OhY2EA/W8koDQMDAwMD
Q0MFKE1eXh54S0xMjIWFxcWLF21sbAQOwCgNAwMDAwMDw1sBojT4jYiIcHFx
CQkJAbGhb1kWMErDwMDAwMDA8JZAltLY29vHxMTcu3eP7aUBxGKuvFwiFksk
Mp74B/5vL5AdZKpcJlPl5EM5lVQNL+FRvzIyMDAwMDC8CGQXnnx8fB4+fMi2
B/9HbHiN2XyrCRsDAwMDw38ZoDR0oC4RG1AaNktDCI7Iv26f6R2cW1Yutf3S
2QyxJPNJaUhkQRk/rSFQAjiqTH1IZ3jE/zwlxCmpnBWRpRPSx3lPsaynzIyK
EJ4clJxYJvV/5l4k/0RIMpCb/OHjH5533S7T1T+HfPIKym+7ZFk6PMblEZhb
Wv4Uy0HbyMnJefLkSXFxcV1KjIGBgYGB4V+EQGnwC/d/nNIQYcjKKVOdHy76
yUH0u5Oohb3msgdCgO8HeyvNDpV9RCypGoOcyKs/KK7Js47TRM87m7RqT5yo
hZ3oNyfRjw4DpgUjm7FJxe93chP96kSe7Uf4BUUUIGRJSRl+T548+emnn375
5Ze7du3Cv2VlZc+XHgMDAwMDQz2CUZqnSoOfpjC9+kj05b1Vu2PveWbvP5ey
3SwJTMMrOPeabeY77V26agTecs6ysH+c8aSUSEVaVukNu8fOvjlCPP7382+7
ZMHh6p9j75Utm4SzTzaefZRZylVyEvy4+OZYODyOTy3mZIiKo3f2/9m7CvAo
ri66tPDXS4uW4kXboi0NbkWCB/fiUChairQ4wSW4u7snQIgnG3c34u7uK/Of
mZsdlsiy0BIKfefjCzN3n9yn9zyZ9648TDKySbv+KNk/NLdIprxjlhIZV5CZ
Lb9nmhIZX+xYLlc6e2fdNUuxdcukCaWnkXkWLhm+T3Nt3DLx6xNpWrQQ8qnb
CQbnYqDYlL+CJDXNrxkng9W830baeoQ7hGsORkrqW7Qf4yGTKWVynr0YGBh8
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
uhnr39/XYf2g+Iwkcv80IazDhsGLL68Hv5IGO5+yuoqIEjOTrQMdpp1cOurg
bOhpGWAfkRLNibM9bGsNAwMDA8MbBaM0FYw5Z1f+cnxJobxIKSxFQWIT5Nhu
ra5jiLvoZtWtHZ30h82/sGbBhTV9doyH+yK5bOnVjZDEZyT+vH2cY6j7ccvL
M08vg+Oj/ErQ4NlnVhh5mBXv4y21DYYmUsz8pO3XDbB76gruIZPL1L8Z33x/
P4hWRm4WLTyl52ZOP/VHty0j1981AL/i1KZ9huyZturmjvJSxz7uZmBgYGB4
U2CUpmKgFMx9ak56721j9z05RUKF8KXSNqNDYCkgLaJjcJUxh+cuu7pp+bXN
56Q3aIeM3v5Z150euIR7IYQiWdGM08vEcCDceG9vh/WDVlzfwk+/lDrihgjJ
QdMzveBXXvScYvxJNfLxR+YvurRO1Iq8PHA3mXFq2Q/rBhp6mJFLryi/jhuH
3nZ5JPoV/3p6ekZERHCM1TAwMDAwvCEwSlMxIFLhGu6ts3GIgfGJu27GZn5S
+un3Kxv6bB//xMfaKsA+KSsFkmmnlk4+vsg60NEmyPG87c0CWWFcekLPbWOc
Qj1O21ybfHxxRm7mQIMpj7wtTXysT1ld9Yj0tX/qNnTv9HGHfyPGUoLS0MuS
yxuGH5hlFeBgG+yMv4mZKfRrfEZij62j/ryxzcjT7L6HCTjJIdNzRp7mvjFB
F2xvtV2je9LqCrm0CXIGw9n16Jilv71fTDCnmv8JCQmpUqXK119/HRcXxzFW
w8DAwMDwJsAoTcWAOEZsevyYw3M7bxr+w/qBt1we0k/XnQy7bBreUX9Ynx3j
PYVviB57W/bePhaSjhuH9t05AZRGGuzcdfOItJyMGaf+2PnwKMiGzoYh4Dln
bK63Xt23k/4wnY1DQWks/O05OrKGUypVF18SwcgpyOV3EevrIa7Om/TArPxi
gjjh19yCvF/P/tllk17btf0PmZ2DcPKxRWAyHfWHwuVv51dDbVI1Ji0OrAnR
tV834IgFX9z8ApZSiWrQrVs3iURiaWkJoVzONgwzMDAwMFQ0GKWpMNDMRUJm
soW/XUhihPpUBtiFVYA9KAqnYiBJWalWgQ7OoR5Z+by2MWnx0iAnhVJp/9QV
z+A2Nvwr/9USgrIOdHAIcctUO9amNEBpbIOdbQIdpUHOCAp/ZcJSF0WXkZeF
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
bAkOSZuWNczSAKh70H/58uWgK+V1O2IgKBpGaUqAUZrXDblQ08z8bH9YP9BG
2DYjV8hnn105fP9MPPx2fvWsM8vJ5YKLa3R3T87Ky0b/eMnuNthLVEos/SR+
8WQT5LTyxtZ26wYYPD4uyjVTGpLDymP4SRIMBNB40d/GxMSIo1RQDvQeaLY0
zwD35VEa0CHq2dC60cbR29BPCIdmOXbt2kUPCAdGhCgQJ/Sx6AFoMgTDKERE
e2nQ3vG6YsUKWsGHMYLJgASjMFg0WlMjrWbNmgWCJH5/BDVoUgiaq28PhlnB
SMfExAT2Du0dnQ+8Y6BHM0LqH0pgvAYhXEJIcdEywUtRGuiDvILRoWRq2bfs
uxgrqWa2/XQ0fcTUfIhrS71n24NdfLMlzW30Fvk/skm7Z5Fi6ZhBUzrbT0VL
vjL3C8mVqRGDn8Z7fNnR/trj5HsWqWYOGRbOGWAUrUe4N+znTJ8kmTmkV/rK
/NCVOOhbq7cTiEfP6d41OjqcuctzjPQsWdXODn1n85SpoKhY+ZjEwhqdHNqM
dL9nnrr7bEyl+pb7LsXae2ZJGlkmpBS1G+U+a12wq2+WpLqZo9dzH3l9p+f2
yU/24bEFDfo5Nx5QvPC06kAE1Ja6Z1KmoSWCmZR3Tby4VQCWC4abhLBZqHi0
kQNFduPGDfVyxCCahvNSqXTixIkoR5gPqt6oHpxg+8CIQI1oihJu4BetRqT0
hO7du9erV0/9tQSlEXdHQJ8OHTrAO6xPCf2nTZtGBhE/SVQLT2QBKS5asfX2
9i6vbqgvPMG8wlyiwYJBQQhq1ELAgwcPLl++jJSKCvj4+KARoZnDF0YN1GQM
DQ3ROmjFigDWh4y9efMmqj3oGcw9+nnwBwQFCkG7stWVIUojGmvKc7gEcxO3
4sBwSIRlX7B6NDpwJEo1ZRecEcsqDXKAzrl27doYRpHw6tWrSC/IEgYgUB6v
UBWUFUUP3dDhiJQGRQyXGzZsoIUnIyMjCgFdCmUXVILySKB6IaJSoTJcuXIF
wSJeojSgQAgqV9ibRKtdyBPqypCx8I46A2WojYsFeunSJXoF4SxNaSh1tra2
6GyJBtOGnPLm0klOTBj9lQaXjNKUB0ZpXjeI0tgGu7Rbq7v29i6bQKfNDw60
Wt33qsP9IrlsoMGUuef+kgY5GxifgPCg6Vnytd3okM6GIYYeppYB9tFpcUpO
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
e28f21F/KCSIBZHSKticsyuRS322j0extlnd75DZWQjhGLTnh3UDkNI2a/qt
EfZaFwk138LC4sMPP2zWrJmGL6ApvUhayz97gdXQZFRMWny/HRN0NhYrgLjW
3NrJCZtthu+f2R5x6ev9sG7gSWGP1jajQ02Xd7vp8hDsGqpOO/l7oawQOYA+
bdKkSSjBkydPllmCIqUBcZp1ZrmoDMkt/e11d01GLEgXCoK2S627s7vVqj5d
NumhFiE3aEarzLUnKgUfH5+mTZvGxT2b+qNzqGbMmAHFDhw4oKFqMTAwvBQY
pXndUKo+4rayshKJAfIN+UxfbePZ2trazs5OfYknMTHR1NQUjCUlJQVGgXgR
LCx8hYaG4gG0BNwARYZgITQXAC8JCQniCj48SqVS2pcoAgNGV1dXTotFfDio
WbOmvb09p3EUSeGEJUWa+kphHOkVA2rY3C0PDtoGO4cmRZZwPHv2bBCz2NjY
8tXghWBBdsEuTqEeSrVDUfxjg60DHTCCRox2T11kiuINHhERETAQCxcu5DQZ
CPoyutD+qatjiHuJkTUYiE2QE35VV3Xx4sVgShpmaUQ5qIWp6ktzkajkFOQ6
h3lKg5wSMpLFbBT3PmlQlbyHJ0UhsVn52SGJEY7CclJwQrhlgD3/DXWgI7S1
DXahD5kpZ8z9bGlzkRhCUlIS4vrll180Zguvp2u4F+IS12sgsXvqasN/rO2E
6BBpYDy/AOcR6WsZ4GAT5CgNdrYKsA8XpqQ4YYnKPcLHKtABqqqzAlTyypUr
jxkzhiu/Fom7lFGFxADzi/Lt1RRAXPQpN1c8geMKBWLTEtSrX1Z+jkwusw5w
8IryF6PbuXMncsDNza1MBahEQeHAlKA/p1bKxe0oOw2VEP+SslKJt4CvQhPh
83+fIrmmkxAouvj4eAwNwsLCODVKg78gM1Dshe2LgYFBezBK82ZR5lF7Gubn
Xy1YdXz55ZezZs06f/48SllDsCTX1dVt27bt9evXy5v3KCNqwZzBvLZboyt+
ha1UqeTp6dm5c2eM2W/fvq1Zz7K1KkfPtWvXwmqMHj0aBlR7VctNgqCVv79/
t27dvvnmmytXrryCqlypvKXXzZs3N2rUaNiwYepf1mvj/aVA2m7fvh36Dxo0
iIju69uJWsZEk6CAgYFBkyZNUIvA4v4pBbQPJCYmpm/fvnXr1j148CD3SiWo
zRHE5W4zE9aY0J3269cPFZ5OyyQdUBzIkzp16iB/NITAwMDwsmCUpmKgFK4n
KPEqTsWXvrlAdKDuUd2l6F3+PNTHmGVeiDBjxowePXqMHTuWrjnQTGkwxv/t
t9/09fU1uHwWnRBX8fRCcvScMyvvu5vwX8oonu2DxYjVxMRE85ZjdZQ4Kp9T
O3VfIZyrRoHY2tr6+vq+MDQNwYohq6f9yZMnZIm0UVXMgRJCUWH6CaNy7TeF
ipc1KFSHyFEsz/D8PQK8Amr3PDo6OoJDahORqOdzFyson8UjV/1U3oUItAtF
dEZyZ2dnDw8PLRNbOgPLVIB7Plef80uzKIJjTthIY2xsXOIEy/JQZpV4Fpey
pGKCPgoNR/lRXTpx4sS0adOoxMU6gKb3+PHjlJSXPpOQgYFBMxilYXgjeB0z
7a9pIuItUvWNx/XvVODfsKxTZg78GxRjYHiXwCjNfw0vZVyUandl/lOxaz5l
7tXwOk4te4tU/TfE9a9V4I3TuTJ3179xxRgY3kkwSsPAwMDAwMDwDoBRGgYG
BgYGBoZ3AIzSMDAwMDAwMLwDYJSG4WXxws0RSiUnF061EyEXPhoRfxVOyH2V
qBEOQub/abcTQaks/qeNS8Vr2NpAh6pps59EWc61m8UfNr18fpWIV/O2FqUa
XjaifwQl1KN8E3V75T05tJWlxMeAmt2XVxClXbLNvQwM/zYwSsPw9uKNmBT+
s3QBL7Ro6g7+s3tBtc+uilHmTavAwMDwGsEozVuNEodpFB+gwakdZvLPfViB
YGRyZWGR0js4NzObH/WK9oGflqH5E0ESk1h483FyaBQd5cdLjO3SrVwyFIIz
I+u0nwa5nL+fyAmzLs9C4ANUqk5zfTarI/6Kv+ZOGffMUx9Yptq7ZxbKnh0p
XKyAWlqhG7z8sSus6xiPp5H5QuYoxXAUao5J88TUIv/QXDwjjRryq8yjEcvJ
ruJTo01MTAICAkS5+nFD6gcTFRQUoPWhioqnCdFMxcKFC3V1dZOTk8UwxZ/U
T2VR98IJt1UiXjqrR6G6f9PKyop+pVkL0Qskv/76a/fu3RGR+iVZ6nMjZc6i
vPiwl+fzp7R78Wwl6Obk5CRKwsPDoT86E4SAPOzbt+9ff/2lHoI4/aKeh+oh
008UDvo0GxubEufAlJhAowTCWa9eva5evSoqX155oZNEeeFviXxgnzIxMLxB
MErzX8A/2MduPx1duYl1SrpMlJRYr4EdcPLJlnxtMfnPQJIER+RJmlpPWRVE
r7YeWf3He94wpgsClFypyRYNujYe4CJpaCVpbiNpYNlqsKtPcC7H36L1nA/1
0DYdixo80ycsppjSlA6QZKAxtXo4jlkaUNrB8yHzQYOf7BZQ3hn7opBuHSXM
mDEDzao8mw7MmjWrYcOGpeVr1qwZPXo03WpRemGozNiVwu1U1apVa9OmDVlq
mUzWoEGDtm3bllaAQpg7d27Xrl2hZ7du3TjVxWRlQhsF1H8KCwvbu3fvzp07
6eT/0kcREnR0dKpWrZqenk7y/v37f/nll5mZmZxwY8ioUaM2b94sen8hUxJB
t3YSPv300+PHj3MqllLCO/318vLS09O7c+dOeUkTPY4bN069vBgYGP4NYJTm
7YVMLrMJcqLrbAhOoR4uYV6pOenWAQ5Z+TlhSZFwkKW69KdMKISr/USUacuo
F49NKjS0StVb5C9pZHXufuI98xSPgOKQC2VKS6cMI+vUmCT+giS5QvnNQJd6
fZxz8viB88lb8ZKvzI1t08EcHtqkmjqkG0nTwmOK53Ao8PiUorvmKXbumRSg
uVOGrfAsE4wPGNRds5SktCIE21jX5ZE0bcPRKEk9C905PjTPk5UnN7FLfyxN
S84o1j8msfCOaQrCMbZPLywqNkPRCQX3LFMRoKNXFhzDskHo4Jl14UFipVbS
TpM8H9um3TFLycqRi6lWywT+ff369fXq1Vu0aNH8+fO///57kBaulEml6QJD
Q0O6XMnc3HzmzJl4Pn+ev7LZxMQEzSomJsbCwoIOtoXRh5sOHTrAiD969MjU
1DQiIoITbq2CYycnJ3AnFI16RJDAS0JCAgnDw8NtbW3x7OrqSswBQNRVqlQJ
DQ3lBEsNBbZt28YXVmGhn5+fsbGxp6enujUH6tSp07t3b07oFjjh8GHxBiIb
GxuicAR3d3d0FOpzR6XrFSdciIAwkVeLFy8GoVq2bBlXiphRdoEiQkPkCZ4R
LOjH+PHjOeH8YUtLS6gRFBSkXhBIhY0AutcjMjISGULXwlKAUqk0ODiYLng6
d+7crVu3WrRo8cEHH1CGcAI1ffLkCV29RAHaqkBXTHLCfdkoAkSB8kK5EMVC
Jwk9v/vuuy+++AJCOIiOjhZ1c3Fx0f7EaQYGhn8WjNK8pSC78OvZPwcaTKGb
CqPT4jvpD9tjfDIwLqT7lpHzzq/qtW1Mh/WDpp74PTGzXNOjDcj0w9ZL6ltK
WtlUai2VtLCRVDebuIKfh/EKzGk92JWfPGls9Xk7u4uG/IrSwq2hkvoW7gLn
GbHY/6O2tjn5CpCiKu3tJN9YSeparDAIx09ENi4aJn3UxlbSxFrSyLL/HJ+C
QmXPad7f67mJ6j6SpkoaWAaE5TUb7PrjmOID9n+a6FWzuyN0Aydp1NNR0tAS
OtTu5ACugl/P3kuUVDeXfGuD6Hyf5pIXUBe89prhI2lmDUY0fkUg8qTnNC/J
1xZV2tnyjptbI43eQXQdz3OrCXwO3LlTt25dGNldu3aBscAgVqtWDZaUe35E
T89jxoyBySPrhkb0+eefDxkyJCUl5ZNPPvn555/xF6a2WbNmoCVHjhzB8/vv
vy/OJ9DVP2TlATgGaaGQYT27detG8o8//pgumIZLCpbkS5Ys4YSryelmdqTx
4MGDeKbLEdq1aydGNHDgwOzsbKpLULJ27do9e/YkhfEXnK1p06acMGlTs2bN
rl27csJ1qIMHDybv1atXRyZwpSY06BU5U6tWLVCLvXv3QhnQDwRCEyDqi0Ti
uhgC/PPPP6EJeAKeafWHbp8Hunfvzqm4lr+/PxgFyVu1aoU8MTIywjPkFCYC
AfPU19envA0J4e+7vHbtWqVKlcBGEDv4kpgJy5fzF3CDR3399dckWbNmDYUD
UlS5cuV+/fqBYkEOVob+bc+ePSXK6+jRo8UV7MIFRPH7779z7HJtBoY3AUZp
3lLQLTZPfKzbrdU185Pi+YaT4Y/rB0WnxQUnhPXcOnrA7smGHqZnbK63WdPv
nPSm4OW5PpZMCca/S5cuxfD5jz/+wMO+ffsUavccEdRnaUb97g9WcPZewj3z
FHf/HPzSZbJXpSZWh6/FXzdOrtvN4bMOdkUypYVThuQrc4NzMXDwmY794Pl+
CCEzW/bELv3A5bhKTa1X7Q+nkKMTCj9qb9t5oucjadrKPeGSmmZgIyv2hH/V
2wmEx9guPT658LZpSuU2ttm58kb9nduOdidlanay/2Gsh0yubDbI5dPW0rP3
Ey8ZJX3ezrahrnN+gSI6oeC+RerkPwMrNbAMisijhEDDSl+ZV+vqAN718wxv
SSOriLgCF9/s8/cTQWk0zNJQnvTt23f79u1jx44dOnQoLOnw4cNXr149d+5c
7vmVGsq6b7755scff8QzmhX+4rVjx44wvlWrVoU1hKmFHSR7Sreud+7cGQRJ
fZYGNAasANQIVjUqqvh+asQOX/v373/48CHM+kcffYRGevr0aQgbNGgA5qCj
o/O///0vPT09LS2tSpUqcA9fYDsNGzaEkmgFW7ZsAQFwcHCguSO0d9IZepag
NK1bt27evDkn9BL4iSgNFKZ5D3gEbWjcuHHpBTWy5iNGjAA3QCy6uro//fRT
7969t27dOmnSJK6UuafYoT9ShFdUxQ8//JCmSlxdXU1MTGrUqIH84VSUBvQG
7Ojx48dgKVDm/+xdBXgUV9feIC1QCFA0WPDiwYJLcZfiGvq1tEWDFitWvDht
8baEIsUhxGU1unFPCCSBuG4MiGf+d+Ykw7K7CUHa/tB5nzx57ty599wzZ3bm
vHPtLFq0CPZBAheFBKpAf/DJGzduEKWhHp7ly5cjHRsbS5YH8YBk3EqkXVxc
cIvxH5wEhzShiOE6ZMAbkfPrr7/iXiNx9+7dhIQE3Jdu3brhftlzwG0lC1B1
opQCpREg4J+HQGneW3Dx73Kejju8cOvtQ0gvMdtscm4VEoExYX1+nERRsBMz
Uwbvm37E9hzSBUWa8yfx39zcHK52yJAh+PbHFzEcEHnnsrp0Nh2PEjWXpqbn
02FCSr6ok2LW+pJZKMcvx4kail39Mp/lFFYzcp5iGuIdnC1qJjlzI4Ep7ZMJ
i3wuaiffdCyKZjSArogMpT1m+oxfFjxgob+okXjvuWgz8yT9vq4gG6BPoDen
riXUG+QOWtF+olf1bs4gUTWNXUVNJaAfT+JzRa3lq38qGU1YczASRCUyJocO
d51+ImoiCYt8RuNToDSieo6X7iezp85E6xlIgiNYtvMsp6iKkXM5c2nIGj17
9ty0aRP51h07duzatWv//v1wlEyFKQ3cdKVKlYgFwYfCJ44ePZpqgSA1adJE
2+xoEV4SJAflc3NzUYXGhpjSfhj48StXrujp6SkUCmRu3rwZmTSeghsKngDK
pK+vv3jxYtItJCRkxYoVoDqQA2WuX79OPwY89eAt+CXQXGVkwmuD0tAsXAMD
A+on6dChQ82aNWfPnj1nzpyGDRuCWmiHX6SfFgy1ceNGGAFpUAIQZhCMhQsX
Mlrung6XLl0KspeYmNijRw8QM/ViLVu2BCmi2bwgLVAADG3u3LkzZszAhaMh
KAz+BkI4ffp0qIT32Mcff6xUKk+ePAlroACuBQkieOBmMDVJDg8PhxFoSI7h
gndTLw3Nt4mIiMAh3WJ/f3+UPHfuHJWE9WAT7Z8KzEtjYQIECPjnIVCa9xe0
1umo7fnxR0zC4h8NPzD7uvI+3sN+T4L7/DjxL7d7OPskNXbAnqmHbdhZkRqU
pkQI5yjzSkFfwTpRwG0IA86gZyhNUZUUi0nME3VUzPq+hAzsORctagxKk4X0
uGXBjYa6L9sTUa2TIjL2xeonltK0le88+ZiqXLVO1msigVgrhcpClubolh6d
kGvtpKrVx3Xzicd1ersOWRQwY11onznsoEmbcZ6fdHfuM9dvytIgCzk7Y9Yv
7Cmk8ZRmye5HYEFRcS9Rmnhuhg9DlKaB4z1xGq5ly4nHek0loZHPi4qK45Ly
qpZLaaiXBqxvy5Yt8K34wIfHBBtp27atXC5ndA08TZgwoW7dujTwhAeqVq1a
06ZNw/MCFwlHj0z8IGvXrj127Fia/oHyvJ9VBygNvDZND8YPGDJ5SkN9At7e
3pcvX0bC19cXcsAcUB6UBmKPHDmC9E8//YSzNjY2qBIcHFyjRo1JkyaJxWJQ
MpwFL+Lbaty48fDhw/nDzp07g8AwXKdNnTp1Pv/8c6TBkVq1aiWRSCAQbCog
IED7N0NUZNSoURs2bACtWr16NS4f1WGu+/fvM1oDVVTezs4Oeu7duxca0tAb
T2lAYIhJMtzUoypVquASpFIpdABvCQ0NxcVCOLgHjAPWt3v3bvCNmJiY48eP
QyZuGez8888/U+8TuCVvaj8/Pxjh0KFDdAhKg0NUp8NHjx7xDMfZ2RnpP/74
g+4XCJ76/SJGB1P4+PiUH+NegAABfx8ESvP+gluvzQTFho09vGDlpW0Tjn5J
c2b8n4QM3DN1x90jzuEeP9w62PWHUbYBMkZr4Ik6FszMzOAC8Hlev359JEaO
HFlWLw11dKw/HClqKN51OtpcnOYTko1SXaf5VG4nP32dHXiq3cPZYJgy6yk7
+ebsjQRRG5l+T5eBJv40LyU+Jc9CmvbL1Xi9DorZ68NAYB7H5T54/Fz0mcJo
srelXCX3ytx58olv2NOQiGc1jF0aD3Lbdz7GeI6ffneXxTseQkKjIe69Z/u9
sEARg7aaDFfW7u588X7SH3cTq7SXd5nmk5tX7BWcjbbmbwrTayk7cyOBJtjc
tE+tVN/xtgPbq/DDzyWUBulkVX71Xi4tR3ncsk+9L03THngi34pveTjHU6dO
gdi4u7vDgRIf0DnscunSJRoTwQM1f/58pB0cHPCwwB2PGzdOJpMtXrxYfRrG
1KlTcQq3A2SDBp5AUcAcZs6ciWJXr16lmbqoi0N4Zysrq+bNm4Ph4Gn97bff
4Ig9PT0ZbtQGBWjuDdxrtWrVcGdRkvpS7t69S7QByvTs2RNpugT4a1tbW/wA
jIyMQBXwHmC43oyaNWuam5tDN5SkDqWFCxcifeDAAZABaHXy5EmmDIpy5syZ
rl274j8oHIiHqakpbKLzp0U50BAkAdpWr16dZsXggXVycoKq+H127NgR1ggK
CsLvE1wLbPDKlSv+/v64HdCQ4RgU6sLU27ZtQ6J169YoSXSO5tLweu7YsQOZ
4H729vZDhw6lWUZ4ceFO0V2jSd2JiYm4ETTDh+GGaGHk33//nUSB+1WtWhVk
EiWjo6NJ8vnz51Ee3LWC+ysKECDg3UKgNO81aOmI6eXtHTYN3W95kjL9ngSP
+GnO0H0zBuyeOnDPF4esT+cX5pflR3D78D4PDAzE5zYcRHh4eFlfl0RL3Pyy
GvV3Y6fy1necy00PlnpkGA5xF7WQilrJmg12l3pmUPmH0TmfGLuKGon3nC1Z
DwK2wE4wbicXdVCwfwaSY5fikH/ILK5yRwV7qo1M1FYOgc9yimr1dUU6OS1/
+Z5Hopr2e86yk0nqDnTr+oUPU7pJDjkNc2lagz6u7PTglrIOoz09Atg+olnr
wkSNJOyMX/y1kom6OEMmO8NZ3+GmHevcNx2LEjUQh3GUBtKWoRUUw3W10DE9
mCbQ4rmYNGkSPs/hE+HmTExMHjx4UKy1iyy/jcm3337LzyAltxgREQESwmdC
An6TVP3evXu1atWi/KNHjyJn8uTJIjUYGhrm5uaiRfAEyjEwMLC2tkZJmv1L
lGbNmjU0UMVwTzc4GA7nzp3LXVFRfHw8uAFVp1M08NSiRQv1tmgg5uLFi/Da
OOzduzdIAq3vBlkaMGAAX3L69OmM1qJv3gJoF61s374dJBDsDhRL21wEYkGz
Z8+GzL59+5LAhISEhg0bqisGiyFfoVCAsfCZ1MeyYsUK6kUBHUKiW7duyNy9
ezfSwcHBNP+ZNo3Bb37s2LFU9+OPPyZrQ6boZfz5558pKSnqlAZpsEdS+Nq1
azTHm+elkIwLBPvS19fXHowTIEDAPwCB0rzXoHfmo6THjkFOiZkpdBgQEzp4
77SfrE47h3tEpkS/80YTUvOt5Ow0Wr+wkkXcaVkFtk4qW2eVKot6eEpKipUZ
dx1TE1NLBiaQMJekWcjYvfLw/544lQakgMi4HGQ6uKWnlq7CRtrejd2lBGVu
2qZExbKzO+y4LfvU/QS1lZyeD4EOruk5peu1fUKfQj61hT9rhQoUKCEl74Zt
SlwSO/oQEvHstn3K02cvOmQ8ArPvSdJ09tKow8LCYsmSJatXr8YXOr+Muixb
wb3a2NgQwUAxJKpXrz5v3jyZTKaxKpnhVm1LpVJ7e3uaDAyGibSYA55KuFQa
N8HjiTQk4OmjijExMWgFjx7DTQ6hR5hOBQUF2drakkDiEpmZmRAIxUAbUBK0
AZkuLi4ODg7UFholhQFwXYlEAg29vLw8PDwoE3Lgu1EMDO2VXhvFli1bZmpq
CoIUGxtblrkoE+1CW37hEiick5MTlOQV40/hccYp6MYvuEZdMgLYEQoTwYuM
jMR16VxV7evrC8lxcXF0Kj09nbc2xNrZ2UEyDI7q1GcFa0O++iWA3aGk+iJu
vEJp2k9ZzE2AAAF/KwRK8yGBZtf4RQd3+2HUn84lcySKy9u77kUAnQrGEtI+
r7XV3mt/mZZToyKyNFzH3+dJtHe6e2V5Pk3dDjSQsXLlSu0CFZRc8e2LX6nS
mxV+ewlvj7dkCxXfLbDiQoCzZ8927Nhx4MCBxLsESiNAwD8PgdJ8AGA7+Tk2
wnfafPPH91b+Ynbb2KIyt4F9i+YYih2pGRBBixBRrAE+k6/I/72IX0Cn1CSQ
QL7Wi+AFughQsVZ1Cojw4k9LFLWoLqSoNCZm+W64sLCQtiWsYEQAmlZBDi4p
KWnixInwfSREZ2FeLH/Ixy8ovVgdARE0amnI1OBOfDSEstriy/PV1QMi8ApU
hAPzezlWxFy8bto20TaChqrql8OXLNYKlFC+DbWNoBEHQf0SeN2oLR8fH3d3
9/IvUIAAAX8rBEojQIAAAe8QQv+MAAH/FgRKI0DAPwlhyuiHigoO3QoQIODv
g0BpBAgQIECAAAEfAARKI0CAAAECBAj4ACBQGgH/KRSX/gkQIECAgA8MAqUR
8Lp45eRHWlikvjKpsKiYX9xdzFGKN55xwC9uesP6/yz4lUGvLFnWTiZvPEND
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
y8bGRqlUQivkt2/fftmyZbjSunXr7t69G+QBt4DhJhEZGBhs2bIFJOfBA3aK
O1SCDS9cuAD9QTJhebwGyVYozHADQ9QWzcwBbymL0gB8PprWpjTUUfbrr786
OzujMDQhusJfL/4zpUNX9Evz8fEBL2UESiPgPwmB0ry/KOLWFgfFho09vGDl
pW0Tjn6ZkpVGpxIzUyYd+/I7s01jDy8MjX/E6KI05Gfx+YxXMT4A69evjwS5
DEbnMhDOW68/HClqKN51OtpcnOYTko1SXaf5VG4nP32dHXiq3cPZYJgy6ylL
I87eSBC1ken3dBlo4s+vNrKQpv1yNV6vg2L2+jAQmMdxuQ8ePwd5MJrsbSlX
yb0yd5584hv2NCTiWQ1jl8aD3PadjzGe46ff3eWbUnYx7KvA6kbOog6K43+W
zE0d9U2gqJXs6J+x7gFZ524mnL4ej8wrVkl6DRzviVmDEBkjbhMcwfYR9Z3r
d1ecChaUX1Cckp4PrVBLr5Ni6qoQaBX+JOdZTlGrsZ6V2suPXIxFzrqDkXHJ
eQ+f5IgMpVNMQ8TK9AnLgkRNJGsPshTIyTsTEnrM8K07wO2KZbJXcHbxy7v2
8fM8O3ToAG++YcOG27dv//7770uXLk1JSdGeSYJD/FbhZGmyCr7T4aa7d++O
U99//z1NUIEE8JCmTZvSuh44MuTDU9vb2zs5OcHpw6+BNqB61apVJ0+eDIIR
GxsLCoFiAwcOtLW13bhxI9J79+5F9Xr16g0ZMgQJEIxq1aqBt5Am8+fPx2GV
KlVAFSinXbt2DRs2hB+H3+dng0RHR0M+Cfzll19cXV1xCfiPQ7Cjq1evgg9Q
h1JiYiIYUZ8+faAnmNWuXbto4q72BGk8sLjkTRxwvRACUTScpG0u/MeLCBQL
P2NQOJoVAxuCCeCF1qRJExgT1kA+vL+RkREMe+nSJX9/f3A8WjQEvgQjzJ07
d8eOHRDSpk2bpCR2VtiNGzdwFeCfMBopSSM+YC8uLi6QuX//ftwCaIvq06dP
59dc8zSjc+fOtWvXvnfvHjSBksgkrWhACnajobRDhw6pDzzRXCCQOpgOlgQn
xH1EebyQoRhq4cYRhYMa2dnZpNuff/6JTHBmvMyF1dwC/oMQKM17DfKFppe3
d9g0dL8lO+iAtxixl93mJzpu+nz1lZ3aHpOvy3COwM/PD696fFzjDR8eHl7W
a5BoiZtfVqP+buxU3vqOc7npwVKPDMMh7jQ7t9lgd6lnBpV/GJ3zibGrqJF4
z9mSz/D70jR2gnE7OQgJ+2cgOXaJpSWHzOIqd1Swp9rIRG3lEAhGUauvK9LJ
afnL9zwS1bTfey6ahPxyJV7UWFylq3MIN18Xyvo/eNZlgpeoiZiV3ED8v63s
aNFF8yRRbYe7juyqXiJjRDNycou4RVustpW6OqdnFci9Ml7SqrEEPArl7VzT
Ww9TctOD5SBdD588z8svHrE4kC3cUtZhklfVTopvd7JEa/Aif1wLO+W4s5Oo
gSPYDlM6Z1jNeuxNsbKyatGixbJly7Zt2wY+s2/fPkYXe6TCSqWSpmcAcIs0
kEGUhgAPToMjKI9HFY6M8ps3b45nmUiOOuA0UXjLli18Djw4nguaOjJo0CCG
IycfffQRLXSCYnfv3kWxSpUq0fAWcPjwYZrpitbh92n6Cs3A4QEKoVKpIHnw
4ME4BCkaPnw4EnK5HIVPnDjBz0/mR8E0Fn2TBVC+devW33zzDcy1fPly/Ndp
Lr76vHnzILB3797U2QjXb2BgoK4YCjDcZBiaO0Q4cOAAw/W9II0LAcVCArSH
uH18fDwJoWK079/KlSvV7wJdbJ06daZNm6Z+LZQ4evQoP3MbTBI5NA2bBy3O
AgUFgeQzaXrw+fPnwWRwCBrZsWNHaIJMuik8wJeioqLIMniKIbx69eq00EyY
TiPgvwaB0rzXoNf7o6THjkFOiZkpjNoaz8SMZPtAeXRaHPOuu6ATUvOt5Ko7
jql+YSWLuNOyCmydVLbOKlXWS7uyiJUZIBWJqSWjVEiYS9IsZGngNvh/T5xK
A1JAZFwOMh3c0lMzSmYFIG3PrV1CmZu2KVFxuZSfml4AmZBMnIHaepZbJFVm
3JOkhUc9L+K3+7NNiU/JU9enZB+/wmJn78x7klRrJ1V+QXFaRgGrlfyFVrSU
G8h4Wih2Z9eGQxoJyckrsnNWoS1UhHq0jN3NPwu1UAxCoJtncDajNfbElN6F
uLg4fF8vWbIELhK+tSynQ4Xx9U1rkPnJEhs2bIB/vH37NjJpHzz+jsOBgniA
5OCzHTl4EsVqQD4/GSYyMtLOzo72xKOKCoWCxlnw7EskElpczHA77OGFAD2J
JFBD8JsQiKfp0aNHtIgpNjYW8lER+Q4ODiifm5tL1ZGDtwoOra2tMzJK6C6M
gMLQk7aaKccCKSkpYGIwF4wGU5S13Q0VprVL/HXh3UX9IbwF+FPUgaO+Dh3G
sbGxAa/AHUE+PzYHyUhDLHgLo0YScFHI9PX1pZkwsA8IGA26aeycw3Ar4qEG
FOB7aWAlXit+pRWAbwqIhf352xoSEoLCMBTYpkwmY7gl8KhF1SEW7fKjUVCv
Q4cOXbt25bf1K8u8AgR8kBAozX8cxaX70BJe+Q7UsTxZc6u9136LllOjIrL+
pi/Rv0Psa301axQmUkH9A7Rw5nUFald5A6/39l6y4jr/TZ0Mby/2tYxQwcI6
70XF6+L/H3/80blz5379+mnPoBYg4D8CgdJ8AGCH77XYiM7Md9QcQ1NTNAMi
aLWmM0iB+h9/qqj4RZSBF3VLB4x0CCnSuNjSyAVFLxXTvYsvw4dveCFfp1bF
2gER1K6Ui9rAKV9UWvdlHcqwHrs+iHY1rEhEAD5yARX+7bffxo8fn5iYqB30
sPjlXfrVJ3WoT+1gdO26r36onuYVUG+oqDSiJa+DRlva1YvLCIhQAQr9JubS
ULUsxbRV4vu7tIVo75yjcQnahtJWo7h0+2KdWjG6bo26tamTSvvOUnk/Pz+K
1yBAwH8WAqURIECAgA8JQv+MgP8sBEojQMD7BWGChACdqODYsQABHzAESiNA
gAABAgQI+AAgUBoBAgQIECBAwAcAgdIIECBAgAABAj4ACJRGwOvilXMPaQ2R
+pokbnEQv7SECzf1FgP+UKBkedQbVUe1119o/i6hvaqlLPALnbQlvNmsCe3V
NOWoUayG123onUBDPVrpw6fLV/6V0F709LrVhVm4AgT8f4NAaQS8Ryh+Oy70
94FCB1ZkofFbbgvzYaDi5vr7FPhX2hUgQMDfCoHSvNfgOj+KdB7C+RcVv8sV
EBBTUFicl18cEP4sM7tQx740bM8Je8ju3GuTEhH9IlSlrUu6zDOjiCtmKVcZ
j/e8aM4G0ClU67rhBJboqt6rw8vnryPw4bO7klRX3yw+JCWvwIuNbooYtd1j
+J1DinEJccl5YVHPka8es6CoVAE+h7adKWaYV241o71tS9k2LNnk1t7enqIl
lipWstcr32lA6dzcXDyS+N2q706DtKmp6ejRoyl4JV9eY/sUylHfzwSPM9oN
CgrilQwICJDJZLQ1Mb/DCd//sGTJksGDB48ZM2b79u1M6fb+6n0jGv0kOvdv
eaW5ytpfDqKgm1Kp5HOioqKgP94wkAAbjho1atOmTeoSNDpe1Ht1+KZ5Gpme
nu7k5CSRSCjIo/olaGxfo2FbSkMN3Bqdm9uoP3S8DmXtI1S+rQQIEPBaECjN
B4k3HZN5NQ78HlOljTw1vUCtrZebLmKUgdmiJpIFm8IoJ/wxG3rbZMsDOnT2
zRo9x++GbQpTutWwxnu9HNVT0gumrw4VtZZROCeKZQmWpaGANtjBptLQmTV7
uWw4EvXKKtoSdIK8UlhY2GEOFAuprNEi/P/xxx/56Dz/+9//8KyVs2fsN998
06JFC+38rVu3zpgxIzU1ldHV1aOzdZTB41yvXr2uXbuSewWTMTQ05ENsa0tY
unTpwIEDRVyYS6Y0zqlOVEQB9VORkZHHjh07ePCgq6urdnV+tKtv3776+voU
iYDhIkvWqVMng4uqAB4yffr03bt389VfyZTU8dtvv9WvX58PicW+xF6OM1VW
dT5/0KBBvXr1Kueq/5v9bwIE/LsQKM37i4LCAsUDpX/0i499jwhf9wifQu7V
mleQ7x0VoAhzT8lOK0cI3sP5atDptujdHJecZyFL42I+yszMk+6JUynCEddW
sVSZYSlPi01mYyoVFhW3HufZbITH0+esjzh/K0HUWGzrnF5QWGylYAM5WTqp
omJL+nBIeEJq/l1xqotPyfeyWJnhzKULuC9gMKjb9ikpqvwlux6J6jjM3xiG
tn69EnfyWnyJKYpYBaBecnpJPCllQJazbybYjq2TysUvi2urWOaV8fOVeFF7
+RerQqwUKgh5nlPihiJic+44pnoEvAg5ZOeS7hvK/lQsZWn+4U8ZXayG3NbO
nTubNWtmamq6YsWKzp07U8BBDY9G7tLS0hI+dMGCBWKxePHixUibmZkh397e
Pjs7myIfkQeH00cZY2NjOHErKysHBweK0EQ9PEqlEtxJPe4S4O3tjSoUrxCZ
KO/s7Iw0ShJzAExMTKpWrfroERucPSAgAApQ6Ew85sHBwba2tn5+fnwXB1Vp
2rTp559/zpRGZEDTLi4u9MvhI0MRfHx88PagYA06HTo5/aNHjxoYGCxfvnzV
qlVGRkbr1q1jtIgZmevIkSPQEBeFNPhbzZo1Z8+ejbSHhweFvnrw4IH6jYCG
Tk5O0IriLlF8cDz1fFcJDIIqqA6x7du3v3HjBi4ZvIiCbpPZra2t8Rqkw/T0
dFgbaqMWWqTAVSEhIcjEJbRs2VIul9vY2BAjAvCSQTE3NzeeHUVFReGeIgHz
kt14baEeH3NKgAAB7wQCpXlPQS7guwubxh0xyc5hHW6MKmHA7qm7zU8gHRQb
Nvf0CuOdE/v+OGnkwbmp2enMW3w20vgOPD4bhLqLQq+rk+gzhaie4zwuErd/
2NOuE7xEhjJRK5l+d5dLFqx3WLkvQtRc4sNxHvCH6kbOT3OKQIqq9nBh+1ia
SqifhDpYLlkkV+/mzAa8bikd/W1gbl7x0C8DOk/x5tW1kqtEbWQgRfr93Ixn
+WrYIToh13imL4UCb9TPTezOXuy01aH1+rsZTfNhdW4tO/onG52wxSgPHFbu
7sxGzW4tq2Lk/DiedVInrsaxV9RWLjKUzt/44Hku63kbDXUfZOI/YVmwqJG4
WhenG3YpvCkI5KDv3r0Lpw9Hf/jwYQsLCzs7u08//RQPEfPyZzv5uFmzZoGi
ULhJPFm1a9eeMGECnPUnn3wybNgw/IerbdeuXWJi4unTp5HmIzgDkM9wfIAO
a9SoAf9LFoiJiRk0aBDlV69e/fz58wzHByCQQmAD4A/sTbxzB+nLly+j1q+/
/oq0ry9rz549e/INjR07FvyKfmB4JzRu3HjIkCGkMP536dKlTZs2dEUNGzbs
378/w8Vz5+OA16tXj+JN6xyPg39HLRCP48eP3759G/SjQYMGSDAvd5JQ4cDA
QAjcuHEjNIFJkb5y5Qry0Si1Rd1HxLXANDp16kT5IJYgDKCCSPO0AULAPEFg
YAo9PT31YJGEbdu28UbYsGEDcqAe0uPGjaMbMXr0aCi2dOlSpKtUqSLiYpTj
PxpCYTCZFi1aUPW+ffvipiBz165ddevWBW3j++VovAnvou7du1erVo3okzAC
JUDAO4FAad5TUFeMXaC8+7YxjsFsNOQbSgvjnRMeJT3OLcibd3rFsAOz7njb
yMPcT0v+TM1mP/x1jg7gU3ft2rXr16/HWxcJOBo+ag9fUr2XZvqaEJCBC/cS
74lTfUKe4syABf56bWQnryVct01pOsitVm+X/IJiiTJD1Fh8xCwWBWr1cZ2w
nHUrmdkFdi7pP1+J12sr33IiiiTHJOZV7+Hcf56ftZNq49EoUQPHC/eSNhyN
ajxMyfaxuKQnpOTdtEut3d/NXJoGYrP2UCRq5eYVFRQW53MEY97GsMqfKczM
k247ptbp4QIuhMzFO8JFDcXGs/3+skmu39+t1VhPVJF5ZvxyJQ58hnppIBBN
PIh6Lmonn7Qs2NZZtXjHQ1FDx6vW7BwVyAH1AqW5aJ4kaikb9Q3rAQu0KM2o
UaP2798/Z84c+PSuXbtOmTJl69at3333HfPySA0VBhkAeSCqgP847NOnT2xs
LLgNnObJkyfPnDkDx4fbkZyc7ODgMGDAADhE9V4afPWLxeKZM2eiPLw2CZ89
ezZq4d6hJNw6WA2e3AsXLtCoCggDPGzVqlVVKlV6evpHH300Y8YM1BoxYgRc
MDTBo7F3715LS0s4Zeo7sre3Z0rjK2lQmm7duoF00dXhFFEaEADqcYJuaLFV
q1baA2rEWKZNm/bDDz+gFdADY2Pjzz//HNabN28e8zKlodahW8uWLTt27IhD
2AQEID6e7Zfz9vaGhuBCuC6mlNIMHTq0fv36NjY2169fB2MxMTEBqYBW+IXD
UJ6entAfdOvixYso2ahRI9RCi7gKui4XFxcUXrlyJcrDvEjjZejv708s8dKl
S19//TXSkBMREQHORpdJvTQgpZADPWEZvD9BKUkUxB46dAi0B6peu3YNZkQ+
bjfDhQKHJXFTwsPDGYHSCBDwjiBQmvcWrL/Iznk67vDCrbcPIb3EbLPJOfZL
PCQu3PjHiWell8uvTx7E3NwcfgEvW3zm9+vXD+9tcsRldelsOh4lai5NLR3f
SUjJF3VSzFofSofHL8eBSLj6ZT7LKaxm5DzFNMQ7OFvUTHLmBjsaQn0yYZEs
hdh0LIqmVd52SBUZSnvM9Bm/LHjAQn9RI/Hec9HgJ/p9XT2DskGfQG9+uRLf
aownSIhec8nGY1FFHKUBcYIfyHpaaDBMWaefG7jH+KVBH3d3bjTUHWK/2h6u
95k8khveGvJlQKOhyoxs9nqj4nJF7eXgTvwV/Xo1Xq+ZtN98PyjQe7afyECy
7zxLFdqO86xr7JqsYq/Uzi1d6pGheQM4E/Xq1Wvjxo0wHcPNk9m5c+eBAweW
LVvGVJjSJCQkgJ8QC0IxuF3QJKr1xRdfGBgYaPu7zZs3wzmC3uAUeWoaG2JK
+2Hgl69evQrPDp+LzC1btiATvpjhujjgjpOSksCjcLvpQkJDQ1esWDFr1qxh
w4bBBcP/0i8kNzcXvGXw4MGURqaRkREcN02CbdKkCX42yASPqlmzJqqD2jVs
2BDUQnv4iX5vaB3molkop06dWrNmzenTpxcsWMBoURo6hCVhnMTERNgNFEi9
WOvWrXv37k2agL3UqlULDG3u3LkgbLgE3BEoDM4AmoccqATy8Mknn4ALweZN
mzbF3VGnNJs2bUKtcePG4RKoFwgkJywsjLgiPSkoQB1QQIcOHWAKXtugoCBY
G3ZA9alTp6IWyC1TOnZGnUtgVqCmeENSFdwC6mcTIEDAu4JAad5f0OKmo7bn
xx8xCYt/NPzA7GvK+3AiPo8D+/446YzkFZSmREhREd78eaWgD16dKOCCTa85
GKlnKE1RlRSLScwTdVTM+r6E0uw5Fy1qDErDvrTHLQsGu1i2J6JaJ0Vk7IvV
TyylaSvfefIxVblqnazXRAKxYCwWsjRHt/TohFxrJ1WtPq6bTzyu09t1yKKA
aWtCQEtYNtJB0X++n7pW6VkF+v3cOkz2spKn3RWnSUsn4ZhsCa9k5JSQmged
By30B+3JfArnV+z34Klee5ZQ8RIO/B5byUCy60y0pTzNSpEG6vKIW6tlONrD
aLoP8/Jgk4bpGG6aKAgDvCS8c7Vq1UaPHg2iIpPJmJc/vSk9ceLEunXrZmez
v0A8Zfr6+nB/mZmZ8Hrff/89w03GANMYM2YMTf9AeVAa7aZBaeBAaXowftWf
fvopT2kuX74MaV5eXnCjSPj4+EDOunXrUB6UBmKPHTuG9E8//YSz1tbWDDdk
A18/adIksVi8e/dunL116xbfFngLeA5/2KVLl88++4zhXh24lqFDh7K2MjRs
2bKlRCKBx3dzcwsICND+IREVAVvbsGEDOAPMBRICtUGQ7t+/z2j1VFB5MBDo
uXfvXmhIQ288pWnVqhUxSYabAwP2MmHCBKlUamNjo1QqcVG4WAhfvnz58OHD
YSJcGowJ8gPqVaVKFfUVZ8CqVavAWMzMzMA6cPvACXEvYEa0/scff6BRooh4
PRIjbd++fffu3fnqsDONK0EBGAEVwRKRD51RKzg4WHvu8ZMnT7QHvwQIEPA2
ECjN+4sibje7oNiwsYcXrLy0bcLRL5OzWB+XmZM99cTXI36ac8ervIEn6kPA
Oxxv+0aNGuEzFomRI0eW1UtDC67XH44UNRTvOh1tLk7zCclGqa7TfCq3k5++
zg481e7hDPKQ9ZQlAWdvJIjayPR7ugw08edXG1lI0365Gq/XQTF7fRgIzOO4
3AePn4s+UxhN9raUq+RemTtPPvENexoS8ayGsUvjQW77zscYz/HT7+6yeDvb
Pz/sqwC0/vX2cBQ+ciGWZsiM+DpQ1Ep29M9Y94CsczcSznI9QvM2PqjczSk2
if0AH2xSQmmQDnr0TNRO3neu311x6n1ZWn5BsTIwS9RMOsTE39ZZJfHI2Prz
Y5pg03KMR5ep3mSGgpfXd5cYhHNSBw4cMDY2PnXqFIiNu7s7HCjNDNE57EJ8
w8TEBE/ZggULaIhHpVLBw44dOxae9JtvvkEmpFGtL774AqcuXLgAshEVFYUc
X19fMAc4Zfr2p3m/48ePx+HPP/9sZWXVokWLOnXq4BH+/fff4Uw9PDwYbtQG
BahPABJAvXC7mzVrRqTo3r17OLtnzx548169eiFNlMbZ2RneGb8KIyMjNEpD
JKBwNWvWNDc3h240vQSZixYtQnr//v1+fn5w/b/++itTBkU5e/YsSNGZM2c2
btwI4mFqavrnn3/q/L1RDjRs2rQptIXONCsGTzEUg6qNGzfu0KEDFAsKCsKP
tmvXrqCIsLC/vz8MiItCYaiHuvPmzdu+fTsSrVu3xgvt7t270LZ37943b94E
m8KNg0yaeDN37lyYFNYGiQLV9/b2hg3PnTsHUdeuXUMa7ZJuaBp2RivIgZJ4
VYL7waQQDgsfP36c5lMdOnSIn7CkvuIbNwh0C6do8rAw8CRAwDuBQGnea9Aq
EdPL2ztsGrrf8iTDEg/WcSjC3Ccf/4qdHrxr0siD83ROD6ZD3D64IXwt4ssa
vgBuq6whJ/Lpbn5Zjfq7sVN56zvO5aYHSz0yDIe40+zcZoPdpZ4lAzQPo3M+
MXYVNRLvORtDOfelaexk3XZyUQcF+2cgOXaJ5SSHzOIqd1Swp9rIRG3lEPgs
p6hWX1ekk9Pyl+95JKppv/ssOxgUGZszYL4f21Z7ObjNdz8+gk7eIU+7TPAS
NRGzkhuKv9rGzrecsTYUTRClAYGpN8g96xlrmZzcIm7RFqttle7OTxJY9rLp
58fs3GDuEkSdFGBZyAQL+myiV6mtyjB+cTEelsmTJ8PR79ixY9OmTaArYWFh
2luO8NvOfPfdd/wcVNpWBUwDtIHPhAT8UKk6mEOtWrUo/8iRI8iZMmWKSA2G
hoZQAI8tHDrlwNHTbFWa/evp6Yn02rVrkabZOHjM+/Tpg8M5c+Zwt7UoPj6e
n1gLeob/NPDUsmVL9bZobRQYSNWqVYkSNGjQgCbogm7Rcm/CtGnTGF1zY8gC
IBhoBRwDXAJcyMfHp6wdWkgC9IRM6Ew9P4mJiWDg6orRuJVCoWjTpg2fefDg
QWSuXLkSabC7kJAQJLp3704NoXWa3wu0atUKrBL5y5Yt46uDnMCw1EtDlOav
v/5CmigNw3W/8JO3LS0t2Z/3/fvqioGIMhzj5SkNP0uNFtGvWbMGHGnbtm3a
thIgQMCbQaA07zWIfjxKeuwY5JSYWTJ7gTIznme5P/JxDvekLpp3iITUfCu5
6o5jql9YySLutKwCWyeVrbNKlUU9PCUlxcqMu46piaklYxBImEvSLGRp4Db4
f0+cSgNSQGRcDjId3NJTM0rmnyBt78YyMZS5aZsSFZfLK+AZmH2ba51v6Flu
kVSZcU+SFh71nHpTvIKzITCHW7vk5JNp65JeUPBiwz1n78x7klQbJ9Wz0kXc
YVHPzaVpEvf07GclOY7uOubPlAULC4slS5asXr368uXL8LlMuevL4F5tbGyI
YKDYkydPqlevPnfuXJlMprEqGUAxqVRqb2+PYgy38hppMQc8qq6urjQVBM8s
0pCQkVGic0xMDFqhfeTAVOm5plO0XpsEkp/FYwuBUAy+FSVpJbiLiws8OLWF
RklhhluIJJFIoKG3tzf1ApEckBMUo+Gt8s2FYuAPpqamZmZmtDJIZxV+gAba
8uNEuF4nJycoySvGn8IzTrvn0Sxish6MgKvDdSGfdg0isbRk3s3NjcxCmXgB
2tnZgeRTJoyJ6jShFzZBmpbYU2HcLKgBBfAOpBycBbPCXaCpRKQAbQ+ofo1k
81u3boHtoDlGoDQCBLwjCJTmg0TF12vz34wVDBukfV5rq73XXipeTg2NMzq1
e/s++7fZFE17p7tXlufTNMYHlw3XtmLFCu0CFZRc8e2LX6nSmxV+ewlvj9e6
6rJ2I6y4BO3CFVGAaoH00qyqnTt3vm67AgQIKAcCpfkAwPbna7ERlqtw8RHe
+QuTghfoCIig1ZRGkAK+Iv/3In5BcWkkymK1ukXFfK0XQjjWpBG8gA+IwKtE
oS1L08WF6oUZPnyD+orsMhWoCPCVTXsVVjAiAK3TISeYnJwMB3fmzBkSorOw
xm78PNS37tcOiKBRS0OmBnfid/Ivqy31TgY+TIC2AhUhxvwGjxUxF6+btk20
jaAzQkFxaYQFdSHql6whmc9Ur66e1nlrXqkAU8pesrOzbWxsqCtJ4DMCBLxD
CJRGgAABAv4VCLOCBQh4txAojQAB/zqET/X/GirSlyVAgIDXhUBpBAgQIECA
AAEfAARKI0CAAAECBAj4ACBQGgECBAgQIEDABwCB0nyo4Jdp/DPNVWSeY8k6
o0Ida6PYw+K3Wkz9vkN7yVL5hXVut1vWnnXlo5ylUuW0/m9NBeFXFWkrqbEI
S4AAAf81CJRGwL+FN9jB5v0COV8Kj1g+AXjLjWU+DOCqCzi8/Q4zAgQI+G9C
oDQfAAqKCoqKi5weeCw6tzokjg0HgMOg2AcLzpj+5W7O8HvUqO/s8Uaf89qA
oy4oLM7LLw4If5aZXahjsxo1Zy52Zzf4vS9Nk3lkPMulzeFLNo2xUqiMx3ua
3UtiuM4cjZ1k1A+LtXawYbeU4c5q7CTDK1CyB466tMJiviC/7w21os48tC/h
JQXKtYy2ecs3OJ4+Dw8PfvtfvstFo+eBeicSExNjYmIoTZIBpVI5bNiws2fP
Mmq70WrvvkJp9c1eQkJC7O3t8bBTASQcHBwoIJT61iskE0oOHDhwzJgxY8eO
pW17NXaz0d6JRWNDmIqYq5wN/aAY7Z8MW/G7BJMFYJNRo0Zt3LiRN2A5vU9l
9U2Vs/9M+ddVVnVGbbsb9WvR2Sn3Zv1sAgQIIAiU5n0H/0q08he33zBEGeFD
h09S45Ze3HLXy5Ypw0G8Q/z0R0yV1vIUVQGfo7WlMPu/xSgPUUsZG56phdRw
qLtEyfpu2hDP1S9r9By/67bsNvIaG9wVa8l5caqcbYd1R2V6WatyraKzE6mC
CvAGv3nz5p49e65cuaK+6/7LAlmJ6kGamjVrJpVKdcqkwk+ePKlZsyYf2pIX
GxYWNnXq1IsXL/JiK8gTfvnlF7RLcR6BGzdu4JACRamD9joGcRoyZEj79u1R
xsnJiSl3M/+KKMAXi4qKOnbs2MGDBykWp3ZhamjXrl18HKVKlSpt3bqVP4WX
z/Tp01GgnLa0T5VFIcoZutUgJ69bvYIKCBAg4HUhUJoPAA8SIlzCPU86mhnv
nOAR6Ycc90c+bo+8nR4on6TGUhmfx4HO4R4U1BIIS3gkCXHJLWDDAxVrhh14
sbkrgXyZBuitHJ+cZyFLm7oqBFzlwr2ke+JU39CSj/28gmKpMsNSnhaXnEc5
oDQNh7jfl6UduxT3UUdF/UFu6VkFufnF1k4qB7d0SycVH/JJrMywdU3nSYUy
IMtcmpabx4XRySq04IIxFZRuDuwZlG3nwkaDUnhlyrigmXQiPbvwrmPqTftU
C3naNevk9KySa3fzy7orTo1OKAkaFZOYe0+ahstx98+ycVIRxaKWKXSUpSwt
WZXPZbK5SWn598RpTl6ZZblM8lARERE9e/YcP378li1bpk2b1qtXLzxcjC4v
j5w+ffrUqFHj2rVrd+7c+fTTT1u2bAmbg6JQ0EkXFxc/P/a24l64ublRPMrl
y5eD+YBU0EgNyiDt7OzMh0wiv5mQkODg4EDVGc71y+XyxMREPLnIj45mg4Gi
IT09vW+++YbKzJ49W19fn4JDJScny2QyiUQSFxfHK8xwIcUrV65MAZ6Qo1Kp
bGxsKDJUbGwsxZaikklJSeoKlGUukBkDA4Nly5atWrXKyMho7dq16lfBK4//
+/fvx+WfOHHCwsJiwIABSN+9e5f9GXh6wiCgQ3ycLIrBhAefDnEJ1tbW7PuK
A1SCYlCPDqEwzubm5sI4YrGYrwX4+PiA78EIoHkUDZyk2draBgUF0SHK29vb
482Jy4dYsh6vfEhIiJ2dHQXV4jOhMBpKT09Xv1LcEV6mAAECXhcCpXlPwc2l
LS4oKjhh/3v/3VMG7J46ZN+MoftmgMzg7MRjX/b9cVL3bWMOWZ+h8uekV7v9
MMo/mh0pwMtz0fk1s08uzSuD0lQE5PrBDdgI2p2d9Lo6iT5TiOo5zvmeDc/t
/+Bp1wleIkOZqJWsVnfny5bJyDT4XNl6nCdVP2QWK2rgaClXqTILqnR3FrWW
iZpK1h+OpLNfbX8oaiENiWDdytPnRQ2HKrvP8MEFg7o07O/GxstuKes1w+dJ
PEtLppqGNBmunLchjO0CainbeDQKmW7+WS2GuHec4NV0hAeEd57sHZuYBwY1
7ttANuJ2G1mNbk5m5qw7u2ieBIGffxXIBvJuJpm7MYyCXcq9MlsPV4oMpaKW
0tr93YiYXf8/9q4CPKpjbS/QlhZKW6S4S4trCgVCcLfg7u6uIUCAhOAJUCRA
cAJBIxDf3Wxss3EXYsRloxu387/nTPawZDchtPS/F+55nzx55nw78s2cOfO9
49ZpP/ZjtG0vGLnCH8qXK61qJmtCBg8evHv3bnxNp06d8vf3B08YPXp0pcWr
xEbDhMEuk+t+gPPnz+MRRnD//v1Nmzb9888/yYiEjo4O/Ldr1w5u9g5oPOKL
wwfbtm1bIiF3RZGLFS5evPjdd98R+ciRI2G+IW/Tpg0YVKtWrciIELHRv//+
O3gUuZHh119/HTt2LIQPHz5kx0MaNGhgampKMbdGov4YGxtD6O7uTnRGNvH4
6NEjuG/cuAE3yBXcIGmgaiSGuXPnoj2pxFJIaYCKIKcikcjAwODZs2fgZniE
g/pwCEiR0pCkwSt+/PHH6dOnw03oDUAuB6eYe8zxaGJiQlJcvHhx3bp1pVIp
SmzGjBnE888//wwaSTEXeePx8OHDTZo0IRd/g2wg4MKFC5s1a6aurg4hSNf9
+/fh+erVq+xF3suXL4e3iIgISMaMGUNuTu/Xrx9KG3LQvIkTJ7LFCA4DYWJi
4ogRI4gEcYJkUsxXifeIgFAyPDyc4kZvOHD4dHCU5gtFWTnd3Fn62vfSGnPw
2SmnMPfTr6+qHZksifSB3D3Sx9zbdqjujPPWN4j/+Iwk9RMzCcMJTYwE4Xkk
picaSlUtTBWLxegmwyLv2rULDvSgiVzRGCmO0szeGQJWcPtV8isHqVcwfUH2
0CV+oA1/PU4CB2ilLv5poKssr7T9OI+2YyVZOSWgQ7ZumbVa868+SSorK7d2
zrj4MLFWZ8f9BtEkco9AGYjHoUvvEJWtayavlQCkCCo0H+neeazEXJhOM6IW
/M26EfC8eH9Y7baCjhM8Hr1ObTXK/adBbmXl5VM2BTUe4lZcUh4dX/hdLyfd
G/TYxUHDGBAwg3sJlo7pncZJfhrkWlJS/sJeWquZQ6OhbvctUkavCgCHiUko
gLYtR7j/1Mf5+tMk0LYDBtHJ0uKM7NIf/3BRm+39WpShfTmG18xB7wY9ysGO
F1Fyswsb3b9//wcPHnTq1GnJkiXgFXfv3h00aBC7QIV4JsNfsLy1atV68+YN
Wa1hYWGBR8Sgp6dHqAgkIEjffvttZGSkRCJRHqUB3NzcwB9q167NXn/p5+eH
eBDQxsYGfAlByCKTzp07w71nzx4jIyPigPDAgQNwx8bGgkrBcevWLbp2WVqC
Y4A8mJubw1IjR5ScLFWiNLDUSAvkgWIoDdxeXl5oPcBnYOWhpJaWFvzfvn2b
UsVSZs2aBQ9r1qwZN24cuMTw4cP19fUXLFig0jOhNEKhkCy97tChA2gAxQx6
2NnZgQshBlLIaMdAGBAbxdypDfaybNkySj51hezz+fyOHTsiCClAqA1aAh6I
ag8PLi4u+BDgsLamZ28nT57co0cPihl/g7fZs2fDw7Zt2+CBjPZ8//33cF+6
dElbWxsOEEJ4nj9/PtxIEQqDlCJCCNeuXYu0njx5YmtrCwLZvXt3kjUo3KdP
H7xoMtDEURoOHD4VHKX5QkHYhdbz0yP156bJMuC2DXDsrTXWI6pihD8tJ32Y
7qyzVtfRMBaV0mZo9+MTky8sh7m/5/JMXXdmUhY9RkGoEQvStMKEwf5qaGig
cwqbuHLlSmJ8q1o2cMAwmtdaQGZngCRpca0eotm7Qsij4cNEWH8Xn+zfp3i2
GVNBaewYSnPlcRLxExqdz+viuO98NH4qLqZT6T3Lu9MEekhn/bG3P/ZxLiou
p3nO76JOkzwnbwwaBe7RWqC5lR50WrQ/DESFTDl5BsnM+FLQpJnbg0GfEFVQ
ZD5Yis4Vesy/32zv73o7j18XOHFDUJNhYl53UV5+qbkgndfQ/h4zYnP8emyt
pg7xKUXewTJeS/4JozjFbL4RZYC59Z7pPWljkPpSP14r/nodei5JkdKQgkIv
ftKkSVOmTHn+/DkeBwwY4OnpqaamRqYeVFIaKysrRUqDnjssIBxkIgn2l/AE
Sj6qo7iWhkSYkZEB7rRhwway6JQEQbrED2w3TD98NmvWDC+XYqZaYIVXrVoF
N4w7GdC4du0aQsXExJBQ9+7dmzt37uLFi3/66afevXsTnRH/zZs34R80gCSN
4AgFI46fwFvIKBMMPRzDhg2DWQdXIZadUsVShgwZArqFUiJFt337dqixaNEi
lZ4VKQ0ASkMCEoBDgnpBThYvgSnVqVMnMzOTjCNBYZQM/CPjc+bMgWItW7as
X78+GgeULSGKFEMtwDClUimoGtgLwiIUPoe2bdtS8mEoUE2QrlGjRsENgodm
EA4UPjwEBASAWxJa2LBhQ+RdsRYVFhb+/vvv4FcLGPzyyy/gXWiayK+gRoT3
cuDA4W+AozRfKMhs0d4nuhPPLckvpltvU3eLvtrjJQqUBrzF0M6YklMRp3CJ
2tHJXjEBa27v3WeqR8kXhygDdgoNb5EcytdDsyhhNhPtPBNVq60gNb3CGygB
2AJLaXRvxPKa80E2QGnajauYeDp2LRY8h6wQBkJAaTo7Hr5MLD6t1XXTJPAH
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
FFVtp/+/Gl+q3l8LyDgbu/rl317cUpOxLA4cOFQDjtJw+IrBmQcOHDhw+N8B
R2k4cODAgQMHDl8BOErDgQMHDhw4cPgKwFGarxXs5ov/oA41WefI7mCq2PH0
N7Z2fwoqNjGp2kilfKf2/yfYLTA1eWUqd2Szx9Z9atKV0q20Yaeq1P+DVavS
5qZ/WxPl/UrUPyhtDhw4/HvgKA2H/x38P9sfwg3IPY/Vm13lrdP/smr/jUCu
ya3i/z3Z/88yNw4cOHwqOErzFaCs4rSZMvkj7Q6MD1t8bauJmL77r+IkjQ/O
zytjTw+mT7Zhgnyu1hvRlJSWFxWX+4fnZctKVRxWw1h4klxcctELO6mlY4a5
MN2Mn+7gnllSwmhTxuxaKq8IUi4PXlZWrnwsTJni4TZl5R+k9aFPWX4Z3z3T
QpgenUCuhIAfOuyes1FD5niHx+ST8qx8Wo7CmA5Jq+xjo0lV3X1QFfD1SSQS
oVCYxZy7yw4CKJ4JQ8n33SQnJ8fFxbF7cIgHd3f3kSNHkquF2L05ysfCyA8x
en9aS3BwsK2tLTkFl2IOSLGzsyP3QbPjIeyBulBy6NCh48ePnzBhAjmht9JZ
NFWdS/NJxVVNVVQ+KDgjI4NNRflgHMUsKMavONRTzTE+AFpFKysrZJbIiQdn
Z+cRI0Y8fPiQVb6qsaOqTubhBnk4cPjs4CjN1wdi/99JEzbcPfjSkz5ZvfpJ
hGoe/wlO347/pqMjez03pXRccFEx3Z7fepHMa2zH6y7idRPxWgvajJXk5NZ0
qyx7Pp4yKtkKcvcByEy74czNU10ceR2E5NZLAl2j2Mmr/CNjC6iqLyhXjrYq
f2wxPn369MSJEzB87NH9ShHSMeK769WrF3udk0AgUBkn8fzu3bsff/zxypUr
lZILDQ3V1NS8e/cupWBkVWpVSXjp0iWk++rVKyIxNTXF4+vXryv5JEfmgjhp
aGiQ2xXJFQnVbG2uIVEh3qKjoy9cuHD69GlyFabKmTWKOWW3efPmitc5kYuT
aoLqZ2MV5YSTZGdnz5s3j01ow4YNlLwcAgICpk+f/vz5c+VsKmdNZRIcOHD4
7OAozVeA8KQoQYhrUEKYfKCmXBLp6xbh5RTmTm53Ig0phI6hYhF995M7HGk5
6SR4cWmJJNLHOVySlZ9DVWt3ihWg8kx4EjQxtchCmD5jWwivvfD2q5RXDlIf
+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
1Uqj79798tcZfTZ/w08MoOVHeWc/tflymP3k4Tu+5067tRufmHef7MOdt38n
mZBUrL+dmdmBucXyElITsszXe2eVVpbZXt37/trhN6PusbqfupCQkA4dOnTp
0oX+FNSTE3RVPcE///n27wZyH998jas92e0Visrpx6yHbp80lJTbjbc+a5Mt
yaNvyZLkkvRFCkkdfvfispNr8M0+m76he4DkQP3Z0Q12PBHkp8840tBvUVRU
FPnr5pVXXqm3oYY+q6zS9JocSX46XvjMn3whuwwJunpPotscW16hJl975t/e
ZHqpbwDJ6vFpFV2GBnFf+w99PyU/Pu8KSIwnm3pvXDjzJv+5T/25E/vf9dl2
LJvVj5ZQC70Yc/ny5caRhjYrkQPZO++8Q/5z09PT2WZ2n0GbhkjTRtFfKRW6
azlT9edSGi+QU8xd/RqaHl1WWfN5Farq6OwE8udbgtH4Ho8L+QXo6ekZHx9v
+O1BEhGPx6NNLn5+fobqkW9UaGioh4cH+ZVuWFgqlfr6+pLF6PXa5F0kyZBf
rawuX5GF8/LyDJ+R/L4VCAR1P3It0jIVL7jUjc9dNE1LDItHJZffFBTf4Bfn
FVXTQnGp6o5P8Z9+JbmimpKkzMornmJ5hZp98O9E8ts1MIq78jQ2pdwwaFhV
tZZkmFuCYmEhHTGVtXcQ/r1fgOtdcUCU7JhrAdOVv1B31rEbX0LPn9GPtMO9
nWzltqA4MJrLPLd8S9JzqiRSFdkEdwFsSGns/fISmerSXXFZOXdhTZBu69FJ
5dqaTeuG2vMuJmuOT60w3gN09/bo0YMkwIfurtKKsvEH5q7S9RYZHwLSi7LJ
dyw5P91QQhJycFpkzQh7unWWlJd6JwYo1aqo7ITk/LQqpUKQFEjbDeiqtm3b
Ro4vJCGzDzu+lFWV+yQHxeUmq2siOidDLCRxgmsX0sVAbo9VlQfcDyOTWF6s
q7yMLFCtVsbmJJF0Qb7qpAI0m+WWFPilhPqnhBbKxLX2zN69e0mtGmmlMSwc
lhnjlxKi0A99kCkWkvWTEt/kYO4xJURWWUZfShNlkt1FftDox69WVZNIRv+m
yCjKvhfvK62Q0SXJb6RXX311zJgxjWxdW7POLPLp6CnTrC5ikb9TDnk6kk0b
fpYN/7kkT3I7MIfbgVrdvS3I8qSe/vdDyX9TI3veUA2ZTPb+++/X6ngiubRr
166DBw9upNFDy10vryWBnOR28n0ur6oZ9ZEuTjK8Tyj5eZR4BEordC+RHxY3
L0lCWgX5/l/xEIulypC4stf7BNgczCIZ3t1f2vnz4E7Dg9kGh2/iSm1sbOo9
DXjgwIHkbx86UCdaaZ4diDQm6S/+CNM/Yw0aX1tDDThNX7i5f0N17tx51qxZ
p0+fJt/PRrb14HaN5uupQFM33ZSR8VS6kW3Mf0pk3vI+dD7P3b9kqX06874P
yUtNX2cT1Vtzwwrpjn333XcnTZrk4OBQd5gOrS6WZEtyyV/64/bPHrLNPCgt
UtvY6IXNqatu2aysrJEjR7711lvHjx9nH+nv5bonsT/y19twdMvNzSVZghyj
Dx069Gi1qn/9jb2kf1FXgRMnTnz44YejRo1q1oh2ai2XUtzjBD24657+e27S
f0/AftiYDI1dYKX7Sb979+769etfeeUVGmlo46qTk1P37t2HDRt2//79RmpL
T+IVhJVO1115zTZwXZW+JvUUnr5eyPzj3qItqXf9S4655L/wse/SHbSZpZ5P
IZFIfv/99379+k2bNo016iO7ePFir169+vbtGxYW1vhHBtODSNPWqRuIHFrD
vQ+Mft3pB0V//M2wmjq3raQlhnRUq2KGex8YCuvePUHfjqE1LiesrKxGjBhB
DtONn/6n/e9w63VrWzPiutboOENHXzf8Dqajste7Wo1+FPcH3q6/6wEtFBUr
NxzI7Dc1auCMmPFL4smvaJalQ9bXHv7dsHW6QrW+Q4punVZJq787g5atZ+uG
21aSz6V9YLXcs5UrV5LdNW7cuPz8/Fq7i34TUgrS5zqsWH9pZ2hGdN39qalz
Z426NzugNw7Qv6Rljf66JzmKHCXJL4q6a64X9y2t8xXVPniXAVpSczcE+iXR
95QZ6qbR72XDN9DwdWJ1v6ZIrbjfXU2rFb0OvXZ9jGN/nd1lSBeGKhneReYj
IyPpAbcp9Ous2cnXwu8uO2dbKBNzP0ea2v1l2jq3Tqj7q6BeNA9s3rx56NCh
JCTQbwstjImJCQ4ObkpVtfp7wtb9tWT4GTFcvqT/2tcMJEWfOlwpHDk7ZuCM
6BGzYg6ezaM/BbVWRfehUCgkaXn06NFHjhxhjfJqfHy8n58fOpueTYg0AK2j
Tfyx2HJ/0j6dh5gnXqtH2OFP8D7pT3x3NUvbqi08Fog00Oa0iZZk+ocnnac3
vnxyNWnSprVG93l8vFuv1cj2lHiytWpKl+4TVPfaxlarrUr/32JomWwu7cPG
MAQThkgD0HK0jZ5fAQD1wk8NPBpEGgAAADABiDQAAABgAhBpAB6qkYunauGu
pTI6bcZwIdWjnRUAAABNh0gDjdM0fAdnE2N8ebXx5dvIIgAAbQIiDZiGv3hl
jeF9v53L23Aoi30w1VQoNILQ0qv3JBGJcsPC2jprIFNUUrkgrNRwvUW+uPq6
F3dTGzeeRCavPRAxAAA8Rog0pqFmeDH9RbiGC3KNr8zVGt0dT92EERtoQvDz
8zt//jyrv66zWZdzavSDXxnqYBiCzHjgL8MKHzoaWAuh2+SHlU5fmfTK4KDX
BwTSez+pdOPXZeRU9TQLZ/7jzXT0GmedQMoV1frB1fRXatM1VCk0H02IYLr7
ZecraImru5h5ncf08GXeFpC0wzY6nioAAPwViDRtXT3DxTehpClo/hk6dKiV
lRWrv2VkMypW9zZ8fzmuaB9kXM+UlBRLS8v4+HjWaIitepevRa1bNji27IWP
fDsNDe4wKPD/PvPvPzWK3teAWP9bJtOFt/9snk9oKb01cCNi71f4hsvogKhE
rqj6Jr94nu39dm/xyUssIg0AQItBpGmj6AG6UCZectbmzxj+lbA7c06uOOXj
olBxt2krLpceund63qmVq1y2hWVwd4smS4tk4t/vOVk6riZvuR3lpR9JvoED
va6JJjg4+LXXXjMeGp3P51tYWNRKDnUr5hpyc/XFbXG5yesu7Vh+flOMMJG+
GpQaseKPLfNPrTrCc5Zx99Pkumv8UkLWXNw+12HF9hsH04uytc0MP4Y7BTMM
c+fOHbbRez3X80l1GWP9gcx2XXj+kbIPzcLd+JKiEqWiWpOcWUkCyZgFce0/
8bvqJfEOLRUWcDcuvO1TPPWnxM9+iBoxK+bwhXylLvycvFLw2YTwrxbF/bAy
qUBcc/NK6tczuSQUxaUi0gAAtCBEmjaKHvQzxTmjd0377uAC84OWP/xu9cG6
4TcjPTVa7Y/OG4bv+H61y7bJhxeN2PlDYh53D+glzjaf209a62pvcWL5tCPW
9E7BDUUamhOmTp06a9YsVhcSaMmMGTNIctiyZQvbQLsN7WPa537y8+3fTT5s
Nf3Y0sHbJo4/ME+tUQelRZD52Sd/XnHBboCd2carv5IlQzOiyfysEz+RVDN6
19RzAVfZhvvF5HJ5mRF6Tz1aMfLVffnll+Pi4gwlpM5kGZlMRhcm7603KdFz
Zv64XcR05b/1RchL/QLuBdXcsJjkHKYzj+QZpqcf854P8wZv2wkhKR88M7rL
0CAz64S3x4YynXjON0Sk8JhrQT/ziA6DApmPfDNz6U2oa7quyLsQaQAAWhoi
TRtFj87Zktxx+2eP2TM9vSi7QCqaf2rV3VjvpPy0Ppu+3XxtHz8x4BjvbI8N
o08K/iALmx9cMHavxa0orzxpYVGZpO4N7wzoyS3p6ekdOnSIjuZuZWiINOTr
QVJNbGws20ArDY00x/nnetuOtXM7QObP+F9efGY9SVC/XN41aueU6+HuXgn+
JMMM2WauVKt8U0I+Wj9i07W9EZmxYnmJrummwX6ynj17vvDCCy/pkJkzZ86w
+mRVWFjYsWNHGmlo1PH19SXLvPjii3Thrl27FhQU1K12zb0gtezeM7lvDAli
PvBh3vdZvjNdpdImplfc5Bd/tSie6eHnfFN0g198P6uSvEVYoEjKrHTjF5Os
8tw7gmX2adxGdW01VnZp7Xv6kQVY/QXdpHT7SUQaAIAWh0jTRtFIk1OcP8x+
0s7bv7M192jmDta3ou4N2GK29NzGZedsl5/fZH3Wxj1OQMrDM2PnnVo5dPt3
X+ye9punI8kY2gYG7KcdN8uWLRszZgzbzH4cGmmOeDn32/ItSVzGL1mc+Mns
wNyVF+ysnW1IxWyv/lpWJVeqlUe9nL/eazF4m7nFieW0m6yhmw0lJyeTiBWr
ExUVJZFIWP2nFolE3bt3z8jIMJTI5fKYmBi6MJlJSEigUacRTm6FXYcFf7Uw
junMc3UX08JFW1JJpCmV1+wEsu5tx7NfGxQ0YFr0aMs45j2fn3amk/JqJbcn
LTelMh/7GkcaFpEGAKBVINK0UcaR5tA9R/JUqVHRJOCbEtLb9utTPi50yWJ5
SUm5lMyQR7JAmihr49U93deP8ojlck7dLh66ZqlU+sYbb3h6erL6SENzwvXr
183NzQMCAtgGok5NpOE5D9o6oahMFzn03T0/nt3wzb7ZWbqco9aoc0ryybZK
K2QKpaKiupKX6D9y5w9TjixWqHQnotSXtQ4cOLDRSEREBGvUzXTx4kXydTWU
ZGZmkmVsbGzowjt27CAhh23gRJ3EjMoKhcZ6e5rFLykh8WXM614Hz+fRgfLm
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
     "], {{0, 359.5}, {376.5, 0}}, {0, 255},
     ColorFunction->RGBColor,
     ImageResolution->{144., 144.}],
    BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
    Selectable->False],
   DefaultBaseStyle->"ImageGraphics",
   ImageSize->Automatic,
   ImageSizeRaw->{752.5, 719.},
   PlotRange->{{0, 376.5}, {0, 359.5}}],
  Alignment->{Center, Center},
  Appearance->Image[CompressedData["
1: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
9RfzEj7XSO4=
    "], "Byte", ColorSpace -> "RGB", Interleaving -> True],
  BaseStyle->"Output",
  ContentPadding->False,
  FrameMargins->0]], "ExampleImage",
 CellMargins->{{49, 45}, {16, 5}},
 TaggingRules->{},
 CellChangeTimes->{{3.827842034107012*^9, 3.827842034539999*^9}},
 CellID->368473976,ExpressionUUID->"d82b1d75-ff7b-4d39-b1dc-fa0db5339355"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Create a Formatter Palette", "Subsubsection",
 CellChangeTimes->{{3.8600666175327415`*^9, 3.860066627448223*^9}, {
  3.860066863373948*^9, 3.860066864137273*^9}, {3.8600679167268696`*^9, 
  3.860067922116774*^9}},
 CellLabel->"In[12]:=",ExpressionUUID->"47eb1372-ccd7-4b09-9e20-222f3e70707a"],

Cell["Create a function to format notebook boxes:", "Text",
 CellChangeTimes->{{3.8600669052911406`*^9, 3.860066922065298*^9}, {
  3.8600679380937223`*^9, 
  3.8600679458879337`*^9}},ExpressionUUID->"20bdfc08-d57f-427d-93a3-\
b68635c05473"],

Cell[BoxData[
 RowBox[{
  RowBox[{"$lb", "=", 
   RowBox[{"_String", "?", 
    RowBox[{"(", 
     RowBox[{"StringMatchQ", "[", 
      RowBox[{
       RowBox[{"WhitespaceCharacter", "..."}], "~~", 
       RowBox[{"\"\<\\n\>\"", "|", 
        RowBox[{"FromCharacterCode", "[", "62371", "]"}]}], "~~", 
       RowBox[{"WhitespaceCharacter", "..."}]}], "]"}], ")"}]}]}], 
  ";"}]], "Input",
 CellChangeTimes->{
  3.8600668016768417`*^9, {3.8600668889340167`*^9, 3.8600668934208755`*^9}, {
   3.860067045081093*^9, 3.8600670531318007`*^9}, {3.860067111617908*^9, 
   3.8600671186833143`*^9}},
 CellLabel->"In[1]:=",ExpressionUUID->"52155ea4-f8f1-44b2-ba8a-bffeb46d9822"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"formatBoxes", "[", 
    RowBox[{"RowBox", "[", 
     RowBox[{"lines", ":", 
      RowBox[{"{", 
       RowBox[{"___", ",", "$lb", ",", "___"}], "}"}]}], "]"}], "]"}], ":=", 
   RowBox[{"Enclose", "[", 
    RowBox[{"Riffle", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"(", 
        RowBox[{"Confirm", "@*", "formatBoxes"}], ")"}], "/@", 
       RowBox[{"DeleteCases", "[", 
        RowBox[{"lines", ",", "$lb"}], "]"}]}], ",", "\"\<\\n\>\""}], "]"}], 
    "]"}]}], ";"}]], "Input",
 CellChangeTimes->{
  3.8600668016768417`*^9, {3.8600668889340167`*^9, 3.8600668934208755`*^9}, {
   3.860067045081093*^9, 3.8600670531318007`*^9}, {3.860067111617908*^9, 
   3.8600671186833143`*^9}},
 CellLabel->"In[2]:=",ExpressionUUID->"b6c2e285-d7cc-4b10-a5d9-b587f807bed8"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"formatBoxes", "[", "boxes_", "]"}], ":=", 
   RowBox[{"Enclose", "[", 
    RowBox[{"Replace", "[", 
     RowBox[{
      RowBox[{"Confirm", "[", 
       RowBox[{"Replace", "[", 
        RowBox[{
         RowBox[{"MakeExpression", "[", 
          RowBox[{
           RowBox[{"StripBoxes", "[", "boxes", "]"}], ",", "StandardForm"}], 
          "]"}], ",", 
         RowBox[{"_ErrorBox", "\[Rule]", "$Failed"}]}], "]"}], "]"}], ",", 
      RowBox[{
       RowBox[{"HoldComplete", "[", "e_", "]"}], "\[RuleDelayed]", 
       RowBox[{"Replace", "[", 
        RowBox[{
         RowBox[{"ToBoxes", "[", 
          RowBox[{
           RowBox[{"ReadableForm", "[", 
            RowBox[{
             RowBox[{"Unevaluated", "[", 
              StyleBox["e", "Input",
               StripOnInput->True,
               ShowAutoStyles->True,
               ShowStringCharacters->True], 
              StyleBox["]", "Input",
               StripOnInput->True,
               ShowAutoStyles->True,
               ShowStringCharacters->True]}], 
             StyleBox[",", "Input",
              StripOnInput->True,
              ShowAutoStyles->True,
              ShowStringCharacters->True], 
             StyleBox[
              RowBox[{"\"\<DynamicAlignment\>\"", "->", "True"}], "Input",
              StripOnInput->True,
              ShowAutoStyles->True,
              ShowStringCharacters->True]}], 
            StyleBox["]", "Input",
             StripOnInput->True,
             ShowAutoStyles->True,
             ShowStringCharacters->True]}], ",", "StandardForm"}], "]"}], ",", 
         RowBox[{
          RowBox[{"StyleBox", "[", 
           RowBox[{"b_", ",", "___"}], "]"}], "\[RuleDelayed]", "b"}]}], 
        "]"}]}]}], "]"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{
  3.8600668016768417`*^9, {3.8600668889340167`*^9, 3.8600668934208755`*^9}, {
   3.860067045081093*^9, 3.8600670531318007`*^9}, {3.860067111617908*^9, 
   3.8600671178776264`*^9}, 3.8600672457099867`*^9, {3.8600672988999295`*^9, 
   3.8600673008414745`*^9}, {3.8600673704618635`*^9, 3.860067371455193*^9}, 
   3.8600676599546757`*^9, {3.8600677207957525`*^9, 3.860067736987995*^9}, {
   3.8600677805562296`*^9, 3.8600677832338505`*^9}},
 CellLabel->"In[3]:=",ExpressionUUID->"3880a4d8-cbf2-4640-b8d1-8dd41472d23f"],

Cell["\<\
Create a button that formats the boxes representing the current selection:\
\>", "Text",
 CellChangeTimes->{{3.860067953053757*^9, 
  3.860067971192089*^9}},ExpressionUUID->"bd829b8b-be82-4b0a-9356-\
115c9a3c73f1"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"formatSelection", "[", "nbo_NotebookObject", "]"}], ":=", 
   RowBox[{"Enclose", "[", 
    RowBox[{
     RowBox[{"NotebookWrite", "[", 
      RowBox[{"nbo", ",", 
       RowBox[{"Confirm", "[", 
        RowBox[{"formatBoxes", "[", 
         RowBox[{"StripBoxes", "[", 
          RowBox[{"NotebookRead", "[", "nbo", "]"}], "]"}], "]"}], "]"}]}], 
      "]"}], ",", 
     RowBox[{
      RowBox[{
      "MessageDialog", "[", 
       "\"\<The current selection does not contain a valid expression.\>\"", 
       "]"}], "&"}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.8600680835313787`*^9, 3.860068113442003*^9}},
 CellLabel->"In[4]:=",ExpressionUUID->"2eae0db6-e9db-4bc6-881b-0d7d98ff7e50"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"sel", "=", 
  RowBox[{"Button", "[", 
   RowBox[{"\"\<Format Selection\>\"", ",", 
    RowBox[{"formatSelection", "[", 
     RowBox[{"InputNotebook", "[", "]"}], "]"}], ",", 
    RowBox[{"Method", "->", "\"\<Queued\>\""}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.860066821199332*^9, 3.860066851799402*^9}, {
   3.8600669711225004`*^9, 3.8600669797364707`*^9}, 3.8600671385359764`*^9, {
   3.860067169171258*^9, 3.8600671701526957`*^9}, 3.860067549104536*^9, 
   3.860067828724804*^9, {3.8600679253606277`*^9, 3.8600679275095935`*^9}, {
   3.860068122232485*^9, 3.8600681251139927`*^9}, {3.8600693487650356`*^9, 
   3.860069351065329*^9}},
 CellLabel->"In[5]:=",ExpressionUUID->"dd0d73bf-db09-48da-b839-b8d7d4f97db3"],

Cell[BoxData[
 ButtonBox["\<\"Format Selection\"\>",
  Appearance->Automatic,
  ButtonFunction:>$CellContext`formatSelection[
    InputNotebook[]],
  Evaluator->Automatic,
  Method->"Queued"]], "Output",
 CellChangeTimes->{
  3.8600678479124994`*^9, 3.860067931706577*^9, 3.860068131665316*^9, 
   3.860068228383938*^9, 3.8600686368936443`*^9, 3.8600691512386913`*^9, 
   3.860069181298049*^9, 3.860069253420211*^9, 3.8600693672370853`*^9, {
   3.860069460382332*^9, 3.860069473886447*^9}, 3.8600697445171084`*^9},
 CellLabel->"Out[5]=",ExpressionUUID->"e9b81a81-5c02-44fb-8a7d-a0f56cef82d0"]
}, Open  ]],

Cell["Create another button that formats cells:", "Text",
 CellChangeTimes->{{3.8600681502943788`*^9, 
  3.8600681704222455`*^9}},ExpressionUUID->"19ab0e49-a05f-4a78-a3c6-\
c96c4d7fee12"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"formatCell", "[", "cell_CellObject", "]"}], ":=", 
    RowBox[{"(", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"SelectionMove", "[", 
       RowBox[{"cell", ",", "All", ",", "CellContents"}], "]"}], ";", " ", 
      "\[IndentingNewLine]", 
      RowBox[{"formatSelection", "[", 
       RowBox[{"ParentNotebook", "[", "cell", "]"}], "]"}]}], 
     "\[IndentingNewLine]", ")"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"formatCell", "[", 
    RowBox[{"cells", ":", 
     RowBox[{"{", "___CellObject", "}"}]}], "]"}], ":=", 
   "\[IndentingNewLine]", 
   RowBox[{"formatCell", "/@", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"ResourceFunction", "[", "\"\<SelectByCurrentValue\>\"", "]"}], 
      "[", 
      RowBox[{"cells", ",", "CellStyle", ",", 
       RowBox[{"MemberQ", "[", 
        RowBox[{"\"\<Input\>\"", "|", "\"\<Code\>\""}], "]"}]}], "]"}], 
     ")"}]}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.860068052216028*^9, 3.8600680803304515`*^9}, {
   3.8600681767943325`*^9, 3.8600682031345673`*^9}, {3.8600685179751387`*^9, 
   3.8600686141435623`*^9}, 3.860068756125152*^9, {3.860068808579481*^9, 
   3.8600688253629055`*^9}, {3.860068861727803*^9, 3.860068875120343*^9}, {
   3.860068931983042*^9, 3.8600689389906116`*^9}, {3.860069077830008*^9, 
   3.8600690783884587`*^9}, {3.8600694500083914`*^9, 3.860069452682378*^9}},
 CellLabel->"In[6]:=",ExpressionUUID->"69fd8cd3-9a80-4764-947c-43494daa614a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"cell", "=", 
  RowBox[{"Button", "[", 
   RowBox[{"\"\<Format Cells\>\"", ",", 
    RowBox[{"formatCell", "[", 
     RowBox[{"SelectedCells", "[", 
      RowBox[{"InputNotebook", "[", "]"}], "]"}], "]"}], ",", 
    RowBox[{"Method", "->", "\"\<Queued\>\""}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.860067990206726*^9, 3.860068026038297*^9}, {
   3.860068213969122*^9, 3.8600682192790318`*^9}, {3.8600690962465754`*^9, 
   3.860069097474274*^9}, 3.860069355828611*^9},
 CellLabel->"In[8]:=",ExpressionUUID->"f5b1d348-c88b-4a9d-b875-a4d91fe96f17"],

Cell[BoxData[
 ButtonBox["\<\"Format Cells\"\>",
  Appearance->Automatic,
  ButtonFunction:>$CellContext`formatCell[
    SelectedCells[
     InputNotebook[]]],
  Evaluator->Automatic,
  Method->"Queued"]], "Output",
 CellChangeTimes->{
  3.8600680274732294`*^9, 3.8600682284349375`*^9, 3.8600686369166427`*^9, {
   3.860069155702155*^9, 3.860069181305049*^9}, 3.860069253439211*^9, 
   3.8600693672440853`*^9, 3.860069473904442*^9, 3.8600697445321093`*^9},
 CellLabel->"Out[8]=",ExpressionUUID->"81a8bfcd-93ef-4199-a229-83a65fd8ed9d"]
}, Open  ]],

Cell["Create one more button to format an entire notebook:", "Text",
 CellChangeTimes->{{3.8600682348975973`*^9, 
  3.860068257133277*^9}},ExpressionUUID->"58c90046-08a0-4dc0-ae24-\
f0dcdc87037b"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"nb", "=", 
  RowBox[{"Button", "[", 
   RowBox[{"\"\<Format Notebook\>\"", ",", 
    RowBox[{"formatCell", "[", 
     RowBox[{"Cells", "[", 
      RowBox[{"InputNotebook", "[", "]"}], "]"}], "]"}], ",", 
    RowBox[{"Method", "->", "\"\<Queued\>\""}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.8600686441105194`*^9, 3.8600686591100583`*^9}, 
   3.8600693587053432`*^9},
 CellLabel->"In[9]:=",ExpressionUUID->"efdf1fa6-2cc8-42be-943f-c0378ac887e3"],

Cell[BoxData[
 ButtonBox["\<\"Format Notebook\"\>",
  Appearance->Automatic,
  ButtonFunction:>$CellContext`formatCell[
    Cells[
     InputNotebook[]]],
  Evaluator->Automatic,
  Method->"Queued"]], "Output",
 CellChangeTimes->{
  3.86006866754103*^9, {3.8600691603528996`*^9, 3.860069181326051*^9}, 
   3.8600692534442124`*^9, 3.8600693672620845`*^9, 3.8600694739084425`*^9, 
   3.860069744536107*^9},
 CellLabel->"Out[9]=",ExpressionUUID->"45c429f9-4cf5-4363-999d-4713763440bd"]
}, Open  ]],

Cell["Combine into a single palette:", "Text",
 CellChangeTimes->{{3.860068692455519*^9, 
  3.8600686971905785`*^9}},ExpressionUUID->"52bf3e0d-fe7c-4e85-80d3-\
f9050fbe6c69"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"CreatePalette", "[", 
  RowBox[{
   RowBox[{"Column", "[", 
    RowBox[{"{", 
     RowBox[{"sel", ",", "cell", ",", "nb"}], "}"}], "]"}], ",", 
   RowBox[{"WindowTitle", "\[Rule]", "\"\<Formatter\>\""}]}], "]"}]], "Input",
 CellChangeTimes->{{3.860068674616719*^9, 3.860068688897605*^9}, {
  3.860069168947358*^9, 3.860069172814928*^9}},
 CellLabel->"In[10]:=",ExpressionUUID->"a75816d8-8646-43e4-8439-b2b260378fd6"],

Cell[BoxData[
 TemplateBox[{
   FrontEndObject[
    LinkObject["6hmdd_shm", 3, 1]], 113, 
   "FrontEndObject[LinkObject[\"6hmdd_shm\", 3, 1]]", "113", "\"Formatter\""},
  "NotebookObjectUnsaved"]], "Output",
 CellChangeTimes->{
  3.860068700629939*^9, {3.8600691604818954`*^9, 3.86006918140405*^9}, 
   3.860069253570212*^9, 3.8600693673960853`*^9, 3.860069473982444*^9, 
   3.8600697446131077`*^9},
 CellLabel->"Out[10]=",ExpressionUUID->"2a536d9a-eef2-4a77-ad7f-f36b15808615"]
}, Open  ]],

Cell["Test on an example notebook:", "Text",
 CellChangeTimes->{{3.8600691392921057`*^9, 
  3.8600691429754944`*^9}},ExpressionUUID->"4d8c9351-3c6a-48b5-9db8-\
158c70c7977a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"NotebookOpen", "[", 
  RowBox[{"FindFile", "[", "\"\<ExampleData/document.nb\>\"", "]"}], 
  "]"}]], "Input",
 CellLabel->"In[11]:=",ExpressionUUID->"63780c86-a660-420c-8483-743f5c4864b0"],

Cell[BoxData[
 TemplateBox[{
   FrontEndObject[
    LinkObject["6hmdd_shm", 3, 1]], 112, 
   "FrontEndObject[LinkObject[\"6hmdd_shm\", 3, 1]]", "112", 
   "\"document.nb\"", 
   "\"C:\\\\Program Files\\\\Wolfram \
Research\\\\Mathematica\\\\13.1\\\\Documentation\\\\English\\\\System\\\\\
ExampleData\\\\document.nb\""},
  "NotebookObject"]], "Output",
 CellChangeTimes->{3.8600691857513027`*^9, 3.860069370827454*^9, 
  3.860069474121442*^9},
 CellLabel->"Out[11]=",ExpressionUUID->"829045c2-2793-4f49-9330-369c136b85c4"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Properties and Relations", "Subsection",
 TaggingRules->{},
 CellLabel->"In[7]:=",
 CellID->276479422,ExpressionUUID->"a41ab143-9c45-471a-9506-868830f452ba"],

Cell[TextData[{
 "For expressions that only require a single line to display, the output will \
be very similar to ",
 Cell[BoxData[
  TagBox[
   ButtonBox[
    StyleBox["InputForm", "SymbolsRefLink",
     ShowStringCharacters->True,
     FontFamily->"Source Sans Pro"],
    BaseStyle->Dynamic[
      FEPrivate`If[
       CurrentValue["MouseOver"], {
       "Link", FontColor -> RGBColor[0.854902, 0.396078, 0.145098]}, {
       "Link"}]],
    ButtonData->"paclet:ref/InputForm",
    ContentPadding->False],
   MouseAppearanceTag["LinkHand"]]], "InlineFormula",
  FontFamily->"Source Sans Pro",
  FontSize->0.9428571428571428 Inherited,ExpressionUUID->
  "948e3192-743e-4aad-8c64-4f4cadd06a59"],
 ":"
}], "Text",
 TaggingRules->{},
 CellChangeTimes->{{3.743447900222294*^9, 3.7434479182067547`*^9}, 
   3.7633150861923027`*^9},
 CellID->11535262,ExpressionUUID->"36ff8f0d-3f49-4185-8e20-be4c7209bed3"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"InputForm", "[", 
  RowBox[{
   RowBox[{"x", " ", 
    SqrtBox["5"]}], "+", 
   SuperscriptBox["y", "2"], "+", 
   RowBox[{"1", "/", "z"}]}], "]"}]], "Input",
 TaggingRules->{},
 CellChangeTimes->{{3.86006499524236*^9, 3.860064997389653*^9}},
 CellLabel->"In[1]:=",
 CellID->328826672,ExpressionUUID->"df28115a-6a9d-4c18-9b78-b96cf4b6a35f"],

Cell["Sqrt[5]*x + y^2 + z^(-1)", "Output",
 TaggingRules->{},
 CellChangeTimes->{
  3.7434479261105194`*^9, 3.748369064209963*^9, 3.82753159063209*^9, 
   3.8277030587526655`*^9, 3.8277032924737463`*^9, 3.827703384996976*^9, 
   3.8277034204819393`*^9, 3.8277036117862387`*^9, 3.8277036761033287`*^9, 
   3.827703782818159*^9, 3.8600648850670204`*^9, {3.8600649988213224`*^9, 
   3.860065013619438*^9}},
 CellLabel->
  "Out[1]//InputForm=",ExpressionUUID->"41f42705-d407-43de-aa72-f50ea7ea6669"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ReadableForm", "[", 
  RowBox[{
   RowBox[{"x", " ", 
    SqrtBox["5"]}], "+", 
   SuperscriptBox["y", "2"], "+", 
   RowBox[{"1", "/", "z"}]}], "]"}]], "Input",
 TaggingRules->{},
 CellChangeTimes->{
  3.70999648737139*^9, {3.7434479340182843`*^9, 3.7434479353262453`*^9}, 
   3.8600650034075565`*^9},
 CellLabel->"In[2]:=",
 CellID->133319512,ExpressionUUID->"8f644f58-b89e-45f1-a5eb-43011da84a3a"],

Cell[BoxData[
 StyleBox[
  RowBox[{
   RowBox[{
    RowBox[{"Sqrt", "[", "5", "]"}], " ", "*", " ", "x"}], " ", "+", " ", 
   RowBox[{"y", "^", "2"}], " ", "+", " ", 
   RowBox[{"z", "^", 
    RowBox[{"(", 
     RowBox[{"-", "1"}], ")"}]}]}], "Input",
  StripOnInput->True,
  ShowAutoStyles->True,
  ShowStringCharacters->True]], "Output",
 TaggingRules->{},
 CellChangeTimes->{
  3.7434479369341974`*^9, 3.7483690655559254`*^9, 3.827531593577982*^9, 
   3.827703058812664*^9, 3.8277032925427227`*^9, 3.8277033850709925`*^9, 
   3.82770342055694*^9, 3.827703611860236*^9, 3.827703676169327*^9, 
   3.8277037828831563`*^9, 3.86006488507102*^9, {3.860065004461383*^9, 
   3.860065013633438*^9}},
 CellLabel->"Out[2]=",ExpressionUUID->"628735f2-5004-4733-8182-dbd05c747be7"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Possible Issues", "Subsection",
 TaggingRules->{},
 CellLabel->"In[3]:=",
 CellID->117763486,ExpressionUUID->"63ed7c75-5ee8-4877-b0a2-11cb3e21c948"],

Cell[TextData[{
 Cell[BoxData["ReadableForm"], "InlineFormula",
  FontFamily->"Source Sans Pro",
  FontSize->0.9428571428571428 Inherited,ExpressionUUID->
  "0f73f86b-0f03-427b-9a14-8eec5c103a13"],
 " is just a formatting wrapper; it doesn't evaluate on its own:"
}], "Text",
 TaggingRules->{},
 CellChangeTimes->{{3.7434486723272357`*^9, 3.7434486945735703`*^9}},
 CellID->304888343,ExpressionUUID->"ba450abb-ad8c-4859-ba9c-9c8d7aea5ecc"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FullForm", "[", 
  RowBox[{"ReadableForm", "[", "x", "]"}], "]"}]], "Input",
 TaggingRules->{},
 CellChangeTimes->{
  3.70999648737139*^9, {3.7434486439710827`*^9, 3.7434486479969616`*^9}},
 CellLabel->"In[1]:=",
 CellID->38630355,ExpressionUUID->"1de5aaaa-a059-4e6f-a44f-b248926ff45b"],

Cell[BoxData[
 TagBox[
  StyleBox[
   RowBox[{"ReadableForm", "[", "x", "]"}],
   ShowSpecialCharacters->False,
   ShowStringCharacters->True,
   NumberMarks->True],
  FullForm]], "Output",
 TaggingRules->{},
 CellChangeTimes->{3.7434486493429213`*^9, 3.7483690704707613`*^9, 
  3.8275316042006874`*^9, 3.8277036849880643`*^9, 3.827703786073084*^9, 
  3.860065021914223*^9},
 CellLabel->
  "Out[1]//FullForm=",ExpressionUUID->"b9da0416-c4a5-48fb-a335-89b5bc664043"]
}, Open  ]],

Cell[TextData[{
 "The head is not visible to ",
 Cell[BoxData[
  TagBox[
   ButtonBox[
    StyleBox["InputForm", "SymbolsRefLink",
     ShowStringCharacters->True,
     FontFamily->"Source Sans Pro"],
    BaseStyle->Dynamic[
      FEPrivate`If[
       CurrentValue["MouseOver"], {
       "Link", FontColor -> RGBColor[0.854902, 0.396078, 0.145098]}, {
       "Link"}]],
    ButtonData->"paclet:ref/InputForm",
    ContentPadding->False],
   MouseAppearanceTag["LinkHand"]]], "InlineFormula",
  FontFamily->"Source Sans Pro",
  FontSize->0.9428571428571428 Inherited,ExpressionUUID->
  "22eaa907-bd22-436f-9dc6-0b6fef076542"],
 ":"
}], "Text",
 TaggingRules->{},
 CellChangeTimes->{{3.7434487132310133`*^9, 3.743448727431589*^9}},
 CellID->710336198,ExpressionUUID->"621aaeff-2281-41e0-8bf8-c25e77577dff"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"InputForm", "[", 
  RowBox[{"ReadableForm", "[", "x", "]"}], "]"}]], "Input",
 TaggingRules->{},
 CellChangeTimes->{
  3.70999648737139*^9, {3.7434486226107335`*^9, 3.7434486283505487`*^9}},
 CellLabel->"In[2]:=",
 CellID->197839422,ExpressionUUID->"c7ef6b41-b0ab-449d-9246-9d254aa45dce"],

Cell["x", "Output",
 TaggingRules->{},
 CellChangeTimes->{3.7434486295295153`*^9, 3.7483690798665133`*^9, 
  3.827531608579537*^9, 3.827703685052062*^9, 3.8277037861380606`*^9, 
  3.860065026571862*^9},
 CellLabel->
  "Out[2]//InputForm=",ExpressionUUID->"adcf8b87-0651-4683-9ff9-190d6bea105d"]
}, Open  ]]
}, Open  ]]
},
WindowSize->{687., 685.5},
WindowMargins->{{473, Automatic}, {148.5, Automatic}},
WindowStatusArea->Automatic,
DockedCells->{
  Cell[
   BoxData[
    TemplateBox[{}, "ToolsGridTemplate"]], "DockedCell", 
   CellFrameMargins -> {{0, 0}, {2, 2}}, CellFrame -> {{0, 0}, {1, 0}}]},
TaggingRules->{
 "InformationPopupMenuItemAdded" -> True, "AutoUpdate" -> True, 
  "NotebookIndexQ" -> True, "NotebookLastIndexed" -> 
  DateObject[{2022, 4, 27, 13, 43, 54.5472439`9.489347653823193}, "Instant", 
    "Gregorian", -4.], "NotebookUUID" -> 
  "0c95abc5-f093-4791-9e3f-7a08a3411123"},
FrontEndVersion->"13.1 for Microsoft Windows (64-bit) (April 26, 2022)",
StyleDefinitions->FrontEnd`FileName[{"Wolfram"}, 
  "FunctionResourceDefinitionStyles.nb", CharacterEncoding -> "UTF-8"],
ExpressionUUID->"0c95abc5-f093-4791-9e3f-7a08a3411123"
]

